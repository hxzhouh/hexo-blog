<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>11 Tips for Detecting and Responding to Intrusions on Linux</title>
    <url>/2024/05/10/11%20Tips%20for%20Detecting%20and%20Responding%20to%20Intrusions%20on%20Linux/</url>
    <content><![CDATA[<p>![[Pasted image 20240510093043.png]]<br>
With the increasing popularity of open-source products, it is crucial for a backend engineer to be able to clearly identify whether an abnormal machine has been compromised. Based on my personal work experience, I have compiled several common scenarios of machines being hacked for reference.</p>
<span id="more"></span>
<blockquote>
<p>This article is first published in the medium MPP plan. If you are a medium user, please follow me in <a href="https://medium.hxzhouh.com/">medium</a>. Thank you very much.</p>
</blockquote>
<blockquote>
<p>Background: The following scenarios are observed on CentOS systems and are similar for other Linux distributions.</p>
</blockquote>
<h4 id="1-Intruders-May-Delete-Machine-Logs">1. Intruders May Delete Machine Logs</h4>
<p>Check if log information still exists or has been cleared using the following commands:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/42e92e989d964542c270e2815bde6619.png" alt="Image"></p>
<h3 id="2-Intruders-May-Create-a-New-File-for-Storing-Usernames-and-Passwords">2. Intruders May Create a New File for Storing Usernames and Passwords</h3>
<p>Check <code>/etc/passwd</code> and <code>/etc/shadow</code> files for any alterations using the following commands:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/e239d400fade65005ac316954e70fac8.png" alt="Pasted image 20240510085544"></p>
<h3 id="3-Intruders-May-Modify-Usernames-and-Passwords">3. Intruders May Modify Usernames and Passwords</h3>
<p>Examine the contents of <code>/etc/passwd</code> and <code>/etc/shadow</code> files for any changes using the following commands:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/b757b1e52c23abf2d352d480cbdfe85d.png" alt="Pasted image 20240510085559"></p>
<h3 id="4-Check-Recent-Successful-and-Last-Unsuccessful-Login-Events-on-the-Machine">4. Check Recent Successful and Last Unsuccessful Login Events on the Machine</h3>
<p>Refer to the log “/var/log/lastlog” using the following commands:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/ed0004d926cf0e1d7289d2437c25be21.png" alt="Pasted image 20240510085611"></p>
<h3 id="5-Use-who-to-View-All-Currently-Logged-in-Users-on-the-Machine">5. Use <code>who</code> to View All Currently Logged-in Users on the Machine</h3>
<p>Refer to the log file “/var/run/utmp”:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/f9f029a7bdbba6d3b2ed542885c9dd75.png" alt="Pasted image 20240510085623"></p>
<h3 id="6-Use-last-to-View-Users-Logged-in-Since-Machine-Creation">6. Use <code>last</code> to View Users Logged in Since Machine Creation</h3>
<p>Refer to the log file “/var/log/wtmp”:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/e1173e24b413d89a811a138ea74dcef2.png" alt="Pasted image 20240510085717"></p>
<h3 id="7-Use-ac-to-View-Connection-Time-in-Hours-for-All-Users-on-the-Machine">7. Use <code>ac</code> to View Connection Time (in Hours) for All Users on the Machine</h3>
<p>Refer to the log file “/var/log/wtmp”:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/1c311e4b87e54606127029433b6ecb6f.png" alt="Pasted image 20240510085812"></p>
<h3 id="8-If-Abnormal-Traffic-is-Detected">8. If Abnormal Traffic is Detected</h3>
<p>Use “tcpdump” to capture network packets or “iperf” to check traffic.</p>
<h3 id="9-Review-the-var-log-secure-Log-File">9. Review the <code>/var/log/secure</code> Log File</h3>
<p>Attempt to identify information about intruders using the following commands:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/6dd9205f9ffcab13df215be22965c6dd.png" alt="Pasted image 20240510085837"></p>
<h3 id="10-Identify-Scripts-Executed-by-Abnormal-Processes">10. Identify Scripts Executed by Abnormal Processes</h3>
<p>a. Use the <code>top</code> command to view the PID of abnormal processes:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/38f534f788f32154517ab65359f3e9c9.png" alt="Pasted image 20240510085848"></p>
<p>b. Search for the executable file of the process in the virtual file system directory:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/afb05ea6f7a54b5f129b365623fbccba.png" alt="Pasted image 20240510085857"></p>
<h3 id="11-File-Recovery-After-Confirming-Intrusion-and-Deletion-of-Important-Files">11. File Recovery After Confirming Intrusion and Deletion of Important Files</h3>
<ol>
<li>
<p>When a process opens a file, even if it’s deleted, it remains on the disk as long as the process keeps it open. To recover such files, use <code>lsof</code> from the <code>/proc</code> directory.</p>
</li>
<li>
<p>Most <code>lsof</code> information is stored in directories named after the process’s PID, such as <code>/proc/1234</code>, containing information for PID 1234. Each process directory contains various files providing insight into the process’s memory space, file descriptor list, symbolic links to files on disk, and other system information. <code>lsof</code> uses this and other kernel internal state information to generate its output.</p>
</li>
</ol>
<p>Using the information above, you can retrieve the data by examining <code>/proc/&lt;PID&gt;/fd/&lt;descriptor&gt;</code>.</p>
<p>For example, to recover <code>/var/log/secure</code>, follow these steps:</p>
<p>a. Check <code>/var/log/secure</code>, confirming its absence:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/6c18c569526d125bae3f25506cd5ec33.png" alt="Pasted image 20240510085921"></p>
<p>b. Use <code>lsof</code> to check if any process is currently accessing <code>/var/log/secure</code>:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/8461eb12150d46a0207768619be58e61.png" alt="Pasted image 20240510085930"></p>
<p>c. From the information above, PID 1264 (rsyslogd) has opened the file with a file descriptor of 4. It’s marked as deleted. Therefore, you can check the corresponding information in <code>/proc/1264/fd/4</code>:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/4f325beddb0b3eda8e6ba836f8ec3ad7.png" alt="Pasted image 20240510085938"></p>
<p>d. You can recover the data by redirecting it to a file using I/O redirection:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/5c36a1b092df4eacf143d1171a19d651.png" alt="Pasted image 20240510085950"></p>
<p>e. Confirm the existence of <code>/var/log/secure</code> again. This method is particularly useful for many applications, especially log files and databases.</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/46b775fce5dcc17d6114c49eb060460b.png" alt="Pasted image 20240510090000"></p>
<p>The above is the method I summarized for dealing with Linux intrusion. It can generally handle most problems. If you encounter an unresolved issue, it is best to seek advice from a professional IT operations and maintenance engineer.</p>
<p>I may not have written it completely correctly, so if you have different opinions, please leave a comment and let me know.</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title>Go1.22 add frist v2 lib, math/rand/v2 more fast and more Standard</title>
    <url>/2024/01/13/2024-01-13_Go1-22-add-frist-v2-lib--math-rand-v2-more-fast-and-more-Standard-27137c212612/</url>
    <content><![CDATA[<h3 id="Go1-22-add-first-v2-lib-math-rand-v2-more-fast-and-more-Standard">Go1.22 add first v2 lib, math/rand/v2 more fast and more Standard</h3>
<p><img src="https://cdn-images-1.medium.com/max/800/1*E5rm9m4S6Dr8EoHIuV5BBQ.jpeg" alt=""></p>
<p>The inaugural v2 version of the standard library in Go, hails from the esteemed <a href="https://github.com/golang/go/discussions/60751">math/rand/v2</a> repository. It is set to make its grand debut with the official release of Go1.22, poised to serve as a reliable and production-ready resource.</p>
<span id="more"></span>
<p><img src="https://cdn-images-1.medium.com/max/800/0*VHcA1NXtgo7WDlxo" alt=""></p>
<h1>Reasons</h1>
<ol>
<li>The original <code>math/rand</code> library in the standard package had numerous deficiencies and areas for improvement. These included outdated generators, slow algorithms (performance), and unfortunate conflicts with <code>crypto/rand.Read</code>, among other issues.</li>
<li>There is a plan in place to upgrade the v2 versions of standard libraries. Starting with <code>math</code> allows for the accumulation of experience and resolving tooling ecosystem challenges (such as support from tools like gopls and goimports for v2 packages). Subsequent iterations can then address higher-risk packages, like <code>sync/v2</code> or <code>encoding/json/v2</code>.</li>
<li>Go1 requires compatibility guarantees, making it impractical to directly modify the original library. The issues with <code>math/rand</code> are also more prominent and evident.</li>
</ol>
<h1>change list</h1>
<ul>
<li>Removed <code>Rand.Read</code> and the top-level <code>Read</code> function.</li>
<li>Removed <code>Source.Seed</code>, <code>Rand.Seed</code>, and the top-level <code>Seed</code> function (meaning that top-level functions like <code>Int</code> will always use random seeding).</li>
<li>Removed <code>Source64</code>, as <code>Source</code> now provides the <code>Uint64</code> method, making the original methods unnecessary.</li>
<li>Utilized a more direct implementation for <code>Float32</code> and <code>Float64</code>. For example, in the case of <code>Float64</code>, the original implementation used <code>float64(r.Int63()) / (1&lt;&lt;63)</code>. However, this had a problem of occasionally rounding to <code>1.0</code>, while <code>Float64</code> should never round. The improvement involves changing it to <code>float64(r.Int63n(1&lt;&lt;53)) / (1&lt;&lt;53)</code>, which avoids the rounding issue.</li>
<li>Implemented <code>Rand.Perm</code> using <code>Rand.Shuffle</code>. This improves efficiency and ensures only one implementation.</li>
<li>Renamed <code>Int31</code>, <code>Int31n</code>, <code>Int63</code>, and <code>Int64n</code> to <code>Int32</code>, <code>Int32n</code>, <code>Int64</code>, and <code>Int64n</code>, respectively. These names were unnecessary and confusing.</li>
<li>Added <code>Uint32</code>, <code>Uint32n</code>, <code>Uint64</code>, <code>Uint64n</code>, <code>Uint</code>, and <code>Uintn</code> as top-level functions and methods on <code>Rand</code>.</li>
<li>Utilized Lemire’s algorithm in <code>Intn</code>, <code>Uintn</code>, <code>Int32n</code>, <code>Uint32n</code>, <code>Int64n</code>, and <code>Uint64n</code>, resulting in improved performance.</li>
<li>Introduced a new implementation of <code>Source</code> called PCG-DXSM, including related APIs like <code>NewPCG</code>.</li>
<li>Removed the Mitchell &amp; Reeds LFSR generator and <code>NewSource</code>.</li>
</ul>
<h1>example</h1>
<h2 id="Read-Seed">Read &amp; Seed</h2>
<p>The functions <code>Read</code> and <code>Seed</code> have been removed. It is recommended to use <code>crypto/rand</code>’s <code>Read</code> function instead.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;crypto/rand&quot;</span></span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> )</span><br><span class="line"> ​</span><br><span class="line"> <span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  b := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">3</span>)</span><br><span class="line">  _, err := rand.Read(b)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">   <span class="built_in">panic</span>(err)</span><br><span class="line">  &#125;</span><br><span class="line">  fmt.Printf(<span class="string">&quot;hxzhouh: %v\n&quot;</span>, b)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>output：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hxzhouh: [48 71 122]</span><br></pre></td></tr></table></figure>
<p>For the <code>Seed</code> function, it is advised to call <code>New(NewSource(seed))</code> in order to reinitialize the random number generator.</p>
<h4 id="internal">internal</h4>
<p>The functions <code>N</code>, <code>IntN</code>, and <code>UintN</code> now utilize a novel implementation algorithm. Interested individuals are encouraged to allocate extra time to examine it in detail: <a href="https://lemire.me/blog/2016/06/27/a-fast-alternative-to-the-modulo-reduction/">A fast alternative to the modulo reduction</a></p>
<p>The functions <code>Intn</code>, <code>Int31</code>, <code>Int31n</code>, <code>Int63</code>, and <code>Int64n</code> have been renamed as follows: <code>IntN</code>, <code>Int32</code>, <code>Int32N</code>, <code>Int64</code>, and <code>Int64N</code>, respectively.</p>
<p>Additionally, new functions <code>Uint32</code>, <code>Uint32N</code>, <code>Uint64</code>, <code>Uint64N</code>, <code>Uint</code>, and <code>UintN</code> have been introduced to generate random unsigned integers. They have also been added as corresponding functions within the <code>Rand</code> structure.</p>
<p>The newly added function <code>N</code> generates random numbers of arbitrary integer types. This function is implemented using generics, and the following integer types are its type parameters:</p>
<ul>
<li><code>int</code></li>
<li><code>int8</code></li>
<li><code>int16</code></li>
<li><code>int32</code></li>
<li><code>int64</code></li>
</ul>
<h1>Summary:</h1>
<p>Today, we have shared and further described the new <code>math/rand/v2</code> library, highlighting key changes including performance optimization (algorithm rewrite), standardization, and additions of new random generators.</p>
<p>Given the substantial amount of information covered, we have selected and presented only the aspects that are essential for understanding and using the library. However, for those who are interested in delving deeper, it is recommended to refer to the full documentation of <a href="https://pkg.go.dev/math/rand/v2@master">https://pkg.go.dev/math/rand/v2@master</a></p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>golib</tag>
      </tags>
  </entry>
  <entry>
    <title>Why TCP requires three handshakes to establish a connection?</title>
    <url>/2024/01/30/2024-01-30_Why-TCP-requires-three-handshakes-to-establish-a-connection--31d814aac6b8/</url>
    <content><![CDATA[<p>TCP protocol is a network protocol that we encounter almost every day. The majority of network connections are established based on the TCP protocol. People who have studied computer networks or have some understanding of the TCP protocol know that establishing a connection using TCP requires a three-way handshake.</p>
<span id="more"></span>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/c680b2ef5dc88552c1838e5bf7f1ba65.png" alt="Pasted image 20240517205741"></p>
<p>If we briefly explain the process of establishing a TCP connection, many people who have prepared for interviews would be familiar with it. However, when it comes to delving into the question of “Why does TCP require a three-way handshake to establish a connection?” most people would not be able to answer this question or might provide incorrect answers. This article will discuss why we need a three-way handshake to establish a TCP connection instead of four or two.</p>
<h1>Overview</h1>
<p>Before analyzing the question at hand, let’s first address a common misconception that has misled many people regarding the TCP connection process. For a long time, the author of this article also believed that it provided a good explanation for why a TCP connection requires a three-way handshake:</p>
<blockquote>
<p>–&gt; Can you hear me?<br>
&lt;-- I can hear you. Can you hear me?<br>
–&gt; I can hear you too.</p>
</blockquote>
<p>Using analogies to explain a problem often leads to a situation where “nine out of ten analogies are wrong.” If someone uses an analogy to answer your “why” question, you need to carefully consider the flaws in their analogy. Analogies can only provide a partial similarity, and we can never find an absolutely correct analogy. Analogies are only useful when we want to present the characteristics of something in a simple and understandable way. In the rest of the article, we will explain why this analogy is flawed, and readers can read the remaining content with this question in mind.</p>
<p>When many people try to answer or think about this question, they tend to focus on the “three” in the three-way handshake, which is indeed important. However, if we reexamine the question, do we really understand what a “connection” is? Only when we know the definition of a “connection” can we attempt to answer why TCP requires a three-way handshake.</p>
<blockquote>
<p><em>The reliability and flow control mechanisms described above require that TCPs initialize and maintain certain status information for each data stream. The combination of this information, including sockets, sequence numbers, and window sizes, is called a connection.</em></p>
</blockquote>
<p>The <a href="https://tools.ietf.org/html/rfc793">RFC 793 — Transmission Control Protocol</a> document clearly defines what a connection is in TCP. In summary, a connection is the information used to ensure reliability and flow control mechanisms, including sockets, sequence numbers, and window sizes.</p>
<p>Therefore, establishing a TCP connection means that the two parties involved in communication need to reach a consensus on the three types of information mentioned above. A pair of sockets in a connection is composed of an Internet address identifier and a port. The window size is mainly used for flow control, and the sequence number is used to track the sequence of data packets sent by the initiating party, allowing the receiving party to confirm the successful receipt of a particular data packet based on the sequence number.</p>
<p>At this point, we have transformed the original question into “Why do we need a three-way handshake to initialize sockets, window sizes, and initial sequence numbers?” Next, we will analyze and seek explanations for this refined question.</p>
<h1>Design</h1>
<p>This article will mainly discuss why we need a three-way handshake to initialize sockets, window sizes, initial sequence numbers, and establish a TCP connection from the following aspects:</p>
<ul>
<li>A three-way handshake is required to prevent the initialization of duplicate historical connections.</li>
<li>A three-way handshake is required to initialize the initial sequence numbers of both communicating parties.</li>
<li>Discuss the possibility of establishing a connection with a different number of handshakes.</li>
</ul>
<p>Among these arguments, the first one is the primary reason why TCP chooses to use a three-way handshake. The other reasons are secondary in comparison. We discuss them here to provide a more comprehensive perspective and understand this interesting design decision from multiple angles.</p>
<h1>Historical Connections</h1>
<p>The <a href="https://tools.ietf.org/html/rfc793">RFC 793 — Transmission Control Protocol</a> clearly points out the primary reason why TCP uses a three-way handshake: to prevent confusion caused by the initiation of old duplicate connections.</p>
<blockquote>
<p><em>The principle reason for the three-way handshake is to prevent old duplicate connection initiations from causing confusion.</em></p>
</blockquote>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/6679e5256608619c68d265cab45e3c3c.png" alt="img for geeksforgeeks.org"></p>
<p>Imagine this scenario: if the number of communications between the two parties is only two, once the sender sends a connection establishment request, it cannot retract this request. In a complex or poor network condition, if the sender continuously sends multiple connection establishment requests and TCP establishes a connection with only two communications, the receiver can only choose to accept or reject the sender’s request. The receiver is not sure whether this request is an expired connection due to network congestion.</p>
<p>Therefore, TCP chooses to use a three-way handshake to establish a connection and introduces the <code>RST</code> control message. When the receiver receives the request, it sends the sender’s <code>SEQ+1</code> as part of the <code>ACK</code> control message. At this point, the sender can determine whether the current connection is a historical connection:</p>
<ul>
<li>If the current connection is a historical connection, meaning the <code>SEQ</code> has expired or timed out, the sender will directly send an <code>RST</code> control message to terminate this connection.</li>
<li>If the current connection is not a historical connection, the sender will send an <code>ACK</code> control message, and the two parties will successfully establish a connection.</li>
</ul>
<p>By using a three-way handshake and the <code>RST</code> control message, the ultimate control over whether to establish a connection is given to the sender. Only the sender has enough context to determine if the current connection is erroneous or expired. This is also the primary reason why TCP uses a three-way handshake to establish a connection.</p>
<h1>Initial Sequence Numbers</h1>
<p>Another important reason for using a three-way handshake is that both communicating parties need to obtain an initial sequence number for sending information. As a reliable transport layer protocol, TCP needs to build a reliable transport layer in an unstable network environment. The uncertainty of the network can lead to issues such as packet loss and out-of-order delivery. Common problems may include:</p>
<ul>
<li>Data packets being repeatedly sent by the sender, resulting in duplicate data.</li>
<li>Data packets being lost during transmission due to routing or other network nodes.</li>
<li>Data packets arriving at the receiver may not be in the order they were sent.</li>
</ul>
<p>To address these potential issues, the TCP protocol requires the sender to include a “sequence number” field in the data packet. With the sequence number corresponding to each data packet, we can:</p>
<ul>
<li>The receiver can deduplicate repeated data packets based on the sequence number.</li>
<li>The sender will resend the corresponding data packet until it is acknowledged.</li>
<li>The receiver can reorder the data packets based on their sequence numbers.</li>
</ul>
<p>Sequence numbers play a crucial role in TCP connections, and the initial sequence number, as part of a TCP connection, needs to be initialized during the three-way handshake. Since both parties in a TCP connection need to obtain the initial sequence number, they need to send a <code>SYN</code> control message to each other, carrying their expected initial sequence number <code>SEQ</code>. Upon receiving the <code>SYN</code> message, the receiver will confirm it using the <code>ACK</code> control message and <code>SEQ+1</code>.</p>
<p>As shown in the above diagram, the two TCPs, A and B, send <code>SYN</code> and <code>ACK</code> control messages to each other. After both parties obtain their expected initial sequence numbers, they can start communication. Due to the design of the TCP message header, we can combine the two middle communications into one. TCP B can send both the <code>ACK</code> and <code>SYN</code> control messages to TCP A simultaneously, reducing the four communications to three.</p>
<blockquote>
<p><em>A three-way handshake is necessary because sequence numbers are not tied to a global clock in the network, and TCPs may have different mechanisms for picking the ISN’s. The receiver of the first SYN has no way of knowing whether the segment was an old delayed one or not unless it remembers the last sequence number used on the connection (which is not always possible), and so it must ask the sender to verify this SYN. The three-way handshake and the advantages of a clock-driven scheme are discussed in [3].</em></p>
</blockquote>
<p>Furthermore, as a distributed system, the network does not have a global clock for counting. TCP can initialize sequence numbers using different mechanisms. As the receiver of a TCP connection, we cannot determine if the initial sequence number received from the other party is expired. Therefore, we need the other party to make this determination. It is not practical for the receiver to save and verify the sequence numbers, which reinforces the point we made in the previous section — avoiding the initialization of historical wrong connections.</p>
<h1>Number of Communications</h1>
<p>When discussing the number of communications required to establish a TCP connection, we often focus on why it takes three communications instead of two or four. Discussing using more communications to establish a connection is often meaningless because we can always “exchange the same information using more communications.” Therefore, it is technically possible to establish a connection using four, five, or even more communications.</p>
<p>The issue of increasing the number of communications in a TCP connection often does not require discussion. What we pursue is actually completing the information exchange with the fewest number of communications (the theoretical minimum). This is why we repeatedly emphasize in the previous sections that using a “two-way handshake” cannot establish a TCP connection, and using a three-way handshake is the minimum number of communications required to establish a connection.</p>
<h1>Conclusion</h1>
<p>In this article, we discussed why TCP requires a three-way handshake to establish a connection. Before analyzing this question in detail, we first reconsidered what a TCP connection is. The <a href="https://tools.ietf.org/html/rfc793">RFC 793 — Transmission Control Protocol — IETF Tools</a> provides a clear definition of a TCP connection — the data used for ensuring reliability and flow control mechanisms, including sockets, sequence numbers, and window sizes.</p>
<p>The three-way handshake in TCP can effectively prevent the initiation of erroneous historical connections and reduce unnecessary resource consumption for both communicating parties. The three-way handshake helps both parties obtain the initial sequence numbers, ensuring that data packets are transmitted without duplication or loss and maintaining their order. At this point, it is clear why “two-way handshake” and “four-way handshake” are not used:</p>
<ul>
<li>“Two-way handshake”: It cannot prevent the initialization of erroneous historical connections and wastes resources for the receiver.</li>
<li>“Four-way handshake”: The design of the TCP protocol allows us to simultaneously transmit both the <code>ACK</code> and <code>SYN</code> control messages, reducing the number of communications. Therefore, there is no need to use more communications to transmit the same information.</li>
</ul>
<p>Returning to the question raised at the beginning of the article, why is using an analogy to explain TCP’s three-way handshake incorrect? This is mainly because the analogy does not clearly explain the core issue — avoiding the initialization of historical duplicate connections.</p>
<h1>Reference</h1>
<ul>
<li><a href="https://tools.ietf.org/html/rfc793">RFC 793 — Transmission Control Protocol — IETF Tools</a></li>
<li><a href="https://networkengineering.stackexchange.com/questions/24068/why-do-we-need-a-3-way-handshake-why-not-just-2-way">Why do we need a 3-way handshake? Why not just 2-way?</a></li>
<li><a href="https://www.geeksforgeeks.org/tcp-3-way-handshake-process/"># TCP 3-Way Handshake Process</a></li>
</ul>
]]></content>
      <categories>
        <category>network</category>
      </categories>
      <tags>
        <tag>tcp</tag>
      </tags>
  </entry>
  <entry>
    <title>Performance Profiling with PProf</title>
    <url>/2024/02/02/2024-02-02_Performance-Profiling-with-PProf--A-Powerful-Tool-in-Golang-c0b0fbce4bdb/</url>
    <content><![CDATA[<h1>Introduction</h1>
<p>After writing tons of code and implementing hundreds of interfaces, you finally managed to deploy your application successfully. However, you soon discover that the performance is not up to par. What a nightmare! 😭</p>
<span id="more"></span>
<blockquote>
<p>The Need for Performance Analysis<br>
![[Pasted image 20240517214930.png]]</p>
</blockquote>
<h2 id="Introducing-PProf">Introducing PProf</h2>
<p>To optimize performance, the first thing to focus on is the toolchain provided by Go itself. In this article, we will explore and utilize the powerful features of Go’s performance profiling tool, PProf. It covers the following areas:</p>
<ul>
<li><code>runtime/pprof</code>: Collects runtime data of non-server programs for analysis</li>
<li><code>net/http/pprof</code>: Collects runtime data of HTTP servers for analysis</li>
</ul>
<h2 id="What-is-PProf">What is PProf?</h2>
<p><code>PProf</code> is a tool used for visualizing and analyzing performance profiling data. It reads a collection of analysis samples in the <a href="https://github.com/google/pprof/blob/master/proto/profile.proto">profile.proto</a> format and generates reports to visualize and analyze the data (supports both text and graphical reports).</p>
<p>The profile.proto file is a Protocol Buffer v3 descriptor file that describes a set of call stacks and symbolization information. It represents a set of sampled call stacks for statistical analysis and is a common format for stack trace configuration files.</p>
<h2 id="Supported-Usage-Modes">Supported Usage Modes</h2>
<ul>
<li>Report generation: Generates reports</li>
<li>Interactive terminal use: Supports interactive terminal-based usage</li>
<li>Web interface: Provides a web-based interface</li>
</ul>
<h2 id="What-Can-You-Do-with-PProf">What Can You Do with PProf?</h2>
<ul>
<li>CPU Profiling: Collects CPU (including registers) usage of the monitored application at a certain frequency. It helps identify the time spent by the application in actively consuming CPU cycles.</li>
<li>Memory Profiling: Records stack traces when heap allocations occur in the application. It monitors current and historical memory usage and helps detect memory leaks.</li>
<li>Block Profiling: Records the locations where goroutines block and wait for synchronization (including timer channels).</li>
<li>Mutex Profiling: Reports the competition status of mutexes.</li>
</ul>
<h1>A Simple Example</h1>
<p>Let’s start with a simple example that has some performance issues. This will serve as a basic demonstration of program analysis.</p>
<h2 id="Writing-the-Demo-Files">Writing the Demo Files</h2>
<ol>
<li>Create a file named <code>demo.go</code> with the following content:</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"> ​</span><br><span class="line"> <span class="keyword">import</span> (</span><br><span class="line">     <span class="string">&quot;log&quot;</span></span><br><span class="line">     <span class="string">&quot;net/http&quot;</span></span><br><span class="line">     _ <span class="string">&quot;net/http/pprof&quot;</span></span><br><span class="line">     <span class="string">&quot;github.com/EDDYCJY/go-pprof-example/data&quot;</span></span><br><span class="line"> )</span><br><span class="line"> ​</span><br><span class="line"> <span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">     <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">         <span class="keyword">for</span> &#123;</span><br><span class="line">             log.Println(data.Add(<span class="string">&quot;https://github.com/EDDYCJY&quot;</span>))</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;()</span><br><span class="line"> ​</span><br><span class="line">     http.ListenAndServe(<span class="string">&quot;0.0.0.0:6060&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>Create a file named <code>data/d.go</code> with the following content:</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> data</span><br><span class="line"> ​</span><br><span class="line"> <span class="keyword">var</span> datas []<span class="type">string</span></span><br><span class="line"> ​</span><br><span class="line"> <span class="function"><span class="keyword">func</span> <span class="title">Add</span><span class="params">(str <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">     data := []<span class="type">byte</span>(str)</span><br><span class="line">     sData := <span class="type">string</span>(data)</span><br><span class="line">     datas = <span class="built_in">append</span>(datas, sData)</span><br><span class="line"> ​</span><br><span class="line">     <span class="keyword">return</span> sData</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>When you run this file, your HTTP server will have an additional endpoint <code>/debug/pprof</code> for observing the application’s status.</p>
<h2 id="Analysis">Analysis</h2>
<h3 id="1-Using-the-Web-Interface">1. Using the Web Interface</h3>
<p>To view the current overview, visit <code>http://127.0.0.1:6060/debug/pprof/</code> <a href="http://127.0.0.1:6060/debug/pprof/.">.</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/debug/pprof/</span><br><span class="line"> ​</span><br><span class="line"> profiles:</span><br><span class="line"> 0    block</span><br><span class="line"> 5    goroutine</span><br><span class="line"> 3    heap</span><br><span class="line"> 0    mutex</span><br><span class="line"> 9    threadcreate</span><br><span class="line"> ​</span><br><span class="line"> full goroutine stack dump</span><br></pre></td></tr></table></figure>
<p>This page contains several subpages. Let’s dive deeper to see what we can find:</p>
<ul>
<li>cpu (CPU Profiling): <code>$HOST/debug/pprof/profile</code>. This performs CPU profiling for 30 seconds by default and generates a profile file for analysis.</li>
<li>block (Block Profiling): <code>$HOST/debug/pprof/block</code>. This shows the stack traces causing blocking synchronization.</li>
<li>goroutine: <code>$HOST/debug/pprof/goroutine</code>. This displays the stack traces of all currently running goroutines.</li>
<li>heap (Memory Profiling): <code>$HOST/debug/pprof/heap</code>. This shows the memory allocation of active objects.</li>
<li>mutex (Mutex Profiling): <code>$HOST/debug/pprof/mutex</code>. This displays the stack traces of mutex contention.</li>
</ul>
<h3 id="2-Using-the-Interactive-Terminal">2. Using the Interactive Terminal</h3>
<ol>
<li>Execute the following command: <code>go tool pprof http://localhost:6060/debug/pprof/profile?seconds=60</code> <a href="http://localhost:6060/debug/pprof/profile?seconds=60.">.</a></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go tool pprof http://localhost:6060/debug/pprof/profile\?seconds\=60</span></span><br><span class="line"> ​</span><br><span class="line"> Fetching profile over HTTP from http://localhost:6060/debug/pprof/profile?seconds=60</span><br><span class="line"> Saved profile in /Users/eddycjy/pprof/pprof.samples.cpu.007.pb.gz</span><br><span class="line"> Type: cpu</span><br><span class="line"> Duration: 1mins, Total samples = 26.55s (44.15%)</span><br><span class="line"> Entering interactive mode (type &quot;help&quot; for commands, &quot;o&quot; for options)</span><br><span class="line"> (pprof)</span><br></pre></td></tr></table></figure>
<p>After executing this command, wait for 60 seconds (you can adjust the value of <code>seconds</code>). PProf will perform CPU profiling during this time. Once finished, it will enter the interactive command mode, allowing you to view or export the analysis results. For a list of available commands, type <code>pprof help</code>.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(pprof) top10</span><br><span class="line"> Showing nodes accounting for 25.92s, 97.63% of 26.55s total</span><br><span class="line"> Dropped 85 nodes (cum &lt;= 0.13s)</span><br><span class="line"> Showing top 10 nodes out of 21</span><br><span class="line">       flat  flat%   sum%        cum   cum%</span><br><span class="line">     23.28s 87.68% 87.68%     23.29s 87.72%  syscall.Syscall</span><br><span class="line">      0.77s  2.90% 90.58%      0.77s  2.90%  runtime.memmove</span><br><span class="line">      0.58s  2.18% 92.77%      0.58s  2.18%  runtime.freedefer</span><br><span class="line">      0.53s  2.00% 94.76%      1.42s  5.35%  runtime.scanobject</span><br><span class="line">      0.36s  1.36% 96.12%      0.39s  1.47%  runtime.heapBitsForObject</span><br><span class="line">      0.35s  1.32% 97.44%      0.45s  1.69%  runtime.greyobject</span><br><span class="line">      0.02s 0.075% 97.51%     24.96s 94.01%  main.main.func1</span><br><span class="line">      0.01s 0.038% 97.55%     23.91s 90.06%  os.(*File).Write</span><br><span class="line">      0.01s 0.038% 97.59%      0.19s  0.72%  runtime.mallocgc</span><br><span class="line">      0.01s 0.038% 97.63%     23.30s 87.76%  syscall.Write</span><br></pre></td></tr></table></figure>
<ul>
<li>flat: The time spent in a given function.</li>
<li>flat%: The percentage of CPU time spent in a given function.</li>
<li>sum%: The cumulative percentage of CPU time spent in a given function and its callees.</li>
<li>cum: The total time spent in a function and its callees.</li>
<li>cum%: The cumulative percentage of CPU time spent in a given function and its callees.</li>
</ul>
<p>The last column represents the function names. In most cases, these five columns provide insights into the application’s runtime behavior, helping you optimize it. 🤔</p>
<ol>
<li>Execute the following command: <code>go tool pprof http://localhost:6060/debug/pprof/heap</code> <a href="http://localhost:6060/debug/pprof/heap.">.</a></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go tool pprof http://localhost:6060/debug/pprof/heap</span></span><br><span class="line"> Fetching profile over HTTP from http://localhost:6060/debug/pprof/heap</span><br><span class="line"> Saved profile in /Users/eddycjy/pprof/pprof.alloc_objects.alloc_space.inuse_objects.inuse_space.008.pb.gz</span><br><span class="line"> Type: inuse_space</span><br><span class="line"> Entering interactive mode (type &quot;help&quot; for commands, &quot;o&quot; for options)</span><br><span class="line"> (pprof) top</span><br><span class="line"> Showing nodes accounting for 837.48MB, 100% of 837.48MB total</span><br><span class="line">       flat  flat%   sum%        cum   cum%</span><br><span class="line">   837.48MB   100%   100%   837.48MB   100%  main.main.func1</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-inuse_space:</code> Analyzes the resident memory usage of the application.</li>
<li><code>-alloc_objects:</code> Analyzes the temporary memory allocations of the application.</li>
</ul>
<ol>
<li>Execute the following command: <code>go tool pprof http://localhost:6060/debug/pprof/block</code></li>
<li>Execute the following command: <code>go tool pprof http://localhost:6060/debug/pprof/mutex</code></li>
</ol>
<h3 id="3-PProf-Visualization-Interface">3. PProf Visualization Interface</h3>
<p>This is the exciting part! But before we proceed, we need to write a simple test case to run.</p>
<p>Writing the Test Case</p>
<ol>
<li>Create a file named <code>data/d_test.go</code> with the following content:</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> data</span><br><span class="line"> ​</span><br><span class="line"> <span class="keyword">import</span> <span class="string">&quot;testing&quot;</span></span><br><span class="line"> ​</span><br><span class="line"> <span class="keyword">const</span> url = <span class="string">&quot;https://github.com/EDDYCJY&quot;</span></span><br><span class="line"> ​</span><br><span class="line"> <span class="function"><span class="keyword">func</span> <span class="title">TestAdd</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">     s := Add(url)</span><br><span class="line">     <span class="keyword">if</span> s == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">         t.Errorf(<span class="string">&quot;Test.Add error!&quot;</span>)</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> ​</span><br><span class="line"> <span class="function"><span class="keyword">func</span> <span class="title">BenchmarkAdd</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">     <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">         Add(url)</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>Run the test case:</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go <span class="built_in">test</span> -bench=. -cpuprofile=cpu.prof</span></span><br><span class="line"> pkg: github.com/EDDYCJY/go-pprof-example/data</span><br><span class="line"> BenchmarkAdd-4       10000000           187 ns/op</span><br><span class="line"> PASS</span><br><span class="line"> ok      github.com/EDDYCJY/go-pprof-example/data    2.300s</span><br></pre></td></tr></table></figure>
<p>You can also explore <code>-memprofile</code>.</p>
<p>Launching the PProf Visualization InterfaceMethod 1:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go tool pprof -http=:8080 cpu.prof</span></span><br></pre></td></tr></table></figure>
<p>Method 2:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go tool pprof cpu.prof</span></span><br><span class="line"><span class="meta prompt_"> $ </span><span class="language-bash">(pprof) web</span></span><br></pre></td></tr></table></figure>
<p>If you encounter the message “Could not execute dot; may need to install graphviz,” it means you need to install <code>graphviz</code> (please consult your favorite search engine).</p>
<p>Viewing the PProf Visualization Interface</p>
<p>When you open the PProf visualization interface, you will notice that it is more refined than the official toolchain’s PProf. Additionally, it includes a Flame Graph.</p>
<p>The Flame Graph is the highlight of this section. It is a dynamic visualization where the call sequence is represented from top to bottom (A -&gt; B -&gt; C -&gt; D). Each block represents a function, and the larger the block, the more CPU time it consumes. It also supports drill-down analysis by clicking on the blocks!</p>
<h1>Conclusion</h1>
<p>In this article, we provided a brief introduction to PProf, the performance profiling tool in Go.<br>
PProf offers great assistance in locating and analyzing performance issues in specific scenarios.<br>
We hope this article has been helpful to you. We encourage you to try it out yourself and delve deeper into the various features and knowledge points it offers.</p>
<h1>Thought Questions</h1>
<p>Congratulations on making it to the end! Here are two simple thought questions to expand your thinking:</p>
<ol>
<li>Is <code>flat</code> always greater than <code>cum</code>? Why? In what scenarios would <code>cum</code> be greater than <code>flat</code>?</li>
<li>What performance issues can you identify in the demo code provided in this article? How would you address them?</li>
</ol>
<p>Now it’s your turn to share your thoughts!</p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Why does It Take Four Waves For TCP To Disconnect?</title>
    <url>/2024/02/01/2024-02-01_Why-does-it-take-four-waves-for-TCP-to-disconnect--bd3de1af5b6e/</url>
    <content><![CDATA[<p>TCP protocol is one of the network protocols we use in our daily lives. It is responsible for establishing and terminating connections. In the <a href="https://levelup.gitconnected.com/why-tcp-requires-three-handshakes-to-establish-a-connection-31d814aac6b8">previous</a> blog post, we analyzed why TCP requires three handshakes to establish a connection. When establishing a connection, we need to ensure the issues of historical connections and sequence numbers. Unlike the three-way handshake during connection establishment, disconnecting a TCP connection requires a four-way handshake. This article will explore why TCP disconnects require a four-way handshake instead of three or any other number.</p>
<span id="more"></span>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/db19965682f215f42c5a8a03cd7f7b76.png" alt="Material from: history-computer.com"></p>
<h1>Overview</h1>
<p>Before delving into why a four-way handshake is necessary, let’s first understand the process of TCP connection termination. Typically, when one party in the communication decides to terminate the connection, it sends a FIN (Finish) control message to the other party, indicating that it has no more data to send. The receiving party responds with an ACK (Acknowledgment) control message to acknowledge and enters a half-closed state, indicating that it will no longer send data but can still receive data. When the other party also has no more data to send, it sends a FIN message to indicate its intention to disconnect. The receiving party then sends another ACK message to confirm, and only then will the connection be fully closed.<br>
<img src="https://images.hxzhouh.com/blog-images/2024/05/b2b3a5d3921acfa31d009eab0f48e139.png" alt="The Four-Way Handshake Process（ geeksforgeeks.org ）"></p>
<h1>Design</h1>
<p>Why does TCP disconnect require a four-way handshake? Let’s analyze this question from several aspects:</p>
<h1>Ensuring Data Integrity</h1>
<p>TCP is a connection-oriented reliable transport protocol that guarantees data reliability and integrity. During connection termination, both parties may still have unsent or unacknowledged data packets. If only a three-way handshake is performed, the other party may not know whether the FIN message it sent has been received during the final handshake. This could result in the other party not fully receiving the data, leading to data loss. Therefore, by performing a four-way handshake, both parties can ensure that they receive each other’s data completely and maintain data integrity.</p>
<h1>Handling Network Latency and Packet Loss</h1>
<p>In a network, data packets may be delayed or lost due to network latency or packet loss. During connection termination, if only a three-way handshake is performed, the other party may not know whether the FIN message it sent has been received, which may prevent timely closure of the connection. By performing a four-way handshake, sufficient time is provided for the network to handle latency and packet loss issues, ensuring that the connection can be properly closed.</p>
<h1>Waiting for Unsent Data to be Sent</h1>
<p>During connection termination, both parties may still have unsent data packets. If only a three-way handshake is performed, the other party may not know whether there is any unsent data before sending the FIN message. By performing a four-way handshake, both parties have enough time to send and receive the remaining data, ensuring data integrity and correctness.</p>
<h1>Handling the Half-Closed State</h1>
<p>During the TCP connection termination process, one party enters a half-closed state by sending a FIN message, indicating that it will no longer send data but can still receive data. If only a three-way handshake is performed, the other party will immediately close the connection upon receiving the FIN message, which may prevent proper handling of the half-closed state. By performing a four-way handshake, both parties can ensure the correct handling of the half-closed state, avoiding data loss and confusion.</p>
<h1>Conclusion</h1>
<p>Based on the analysis above, we can conclude that a four-way handshake is necessary for TCP disconnection to ensure data integrity, handle network latency and packet loss, wait for unsent data to be sent, and handle the half-closed state. Through the four-way handshake, both parties can better coordinate and handle the disconnection, ensuring the correct transmission of data and secure closure of the connection.</p>
<p>When discussing TCP disconnection, we should not focus on why a four-way handshake is used, but rather understand why multiple handshakes are needed to ensure data integrity and proper connection closure. By gaining a deep understanding of TCP protocol design, we can better apply and comprehend the principles and mechanisms of network communication.</p>
<p>Whether it is three handshakes or four handshakes, the first element of a tcp connection to consider is always security and data integrity, although it seems that three handshakes and four handshakes seem to be very inefficient, but the vast majority of Internet traffic is based on the tcp protocol, which is enough to prove that its reliability, on the issue of performance, there are other ways to optimize the performance of the protocol, such as udp, and later on, we will analyze how UDP and UDP-based QUIC protocol will affect the Internet in the next ten years. and how the UDP-based QUIC protocol will influence the next decade of the Internet.</p>
<hr>
<p>If you found my article enjoyable, feel free to follow me and give it a 👏. Your support would be greatly appreciated.</p>
<h1>References</h1>
<ul>
<li><a href="https://tools.ietf.org/html/rfc793">RFC 793 — Transmission Control Protocol — IETF Tools</a></li>
<li><a href="https://networkengineering.stackexchange.com/questions/24072/why-do-we-need-a-4-way-handshake-to-terminate-a-tcp-connection">Why do we need a 4-way handshake to terminate a TCP connection?</a></li>
<li><a href="https://www.geeksforgeeks.org/why-tcp-connect-termination-need-4-way-handshake">why-tcp-connect-termination-need-4-way-handshake</a></li>
</ul>
]]></content>
      <categories>
        <category>network</category>
      </categories>
      <tags>
        <tag>tcp</tag>
      </tags>
  </entry>
  <entry>
    <title>Aws ec2 switch to ipv6,Save $43 per year</title>
    <url>/2024/01/19/2024-01-19_Aws-ec2-switch-to-ipv6-Save--43-per-year-6ade4eff710d/</url>
    <content><![CDATA[<p><img src="https://cdn-images-1.medium.com/max/800/0*32WLSHGCAPKEBvI3" alt="">Photo by <a href="https://unsplash.com/@burntime?utm_source=medium&amp;utm_medium=referral">Alex Kulikov</a> on <a href="https://unsplash.com?utm_source=medium&amp;utm_medium=referral">Unsplash</a></p>
<p>IPv6 has been around for a long time, and I have dealt with many IPv6 tasks in my work. However, I never thought about switching my EC2 instance to IPv4. Yesterday, while going through my email trash, I came across a message stating that AWS will start charging for IPv4 addresses from February 1, 2024. This caught my attention, so I decided to switch my EC2 instance to IPv6 today. The process was a bit of a hassle. This article is not only applicable to EC2 instances but should also work for other Linux hosts.</p>
<span id="more"></span>
<p><img src="https://cdn-images-1.medium.com/max/800/0*SHE5MfrCO4t2ckNL.png" alt=""></p>
<h1>Adding an IPv6 Address to EC2</h1>
<p>Since my EC2 instance’s DNS resolution is handled by Cloudflare, I mainly referred to this blog post: <a href="https://blog.cloudflare.com/zh-cn/amazon-2bn-ipv4-tax-how-avoid-paying-zh-cn/">Amazon’s $2bn IPv4 Tax — and How to Avoid Paying It</a></p>
<p>And also, the official AWS documentation on <a href="https://docs.aws.amazon.com/zh_cn/vpc/latest/userguide/vpc-migrate-ipv6.html">Migrating Your VPC from IPv4 to IPv6</a>.</p>
<p>It’s worth noting that the demo in the “Migrating Your VPC from IPv4 to IPv6” documentation assumes that the VPC has both a public and a private subnet. If you, like me, only have a public subnet, you can skip that part.</p>
<p><img src="https://cdn-images-1.medium.com/max/800/0*ESBOHJRAC3rtmcsk.png" alt=""></p>
<p>I must say, AWS documentation is well-written, and there’s a lot to learn from it.</p>
<p>The result after completing the setup should look like this, with both IPv4 and IPv6 addresses. Make sure to add the same rules for IPv6 in the security group.</p>
<p><img src="https://cdn-images-1.medium.com/max/800/0*N95oY6RVuVkurxfn.png" alt=""></p>
<h1>Application Support</h1>
<p>On my EC2 instance, I only have Nginx and Docker running, and I usually log in via SSH. So, I need to add IPv6 support for Nginx and SSH.</p>
<h1>Nginx</h1>
<p>For your HTTP server block (the one listening on port 80), add the line <code>listen [::]:80;</code>. This allows Nginx to listen to both IPv4 and IPv6 HTTP traffic. Your modified server block should look like this:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">     listen 80;</span><br><span class="line">     listen [::]:80;</span><br><span class="line">     server_name hexo.hxzhouh.com;</span><br><span class="line">     return 301 https://$host$request_uri;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>For each HTTPS server block (those listening on port 443), add <code>listen [::]:443 ssl;</code> inside each block. This enables Nginx to listen for HTTPS traffic on IPv6. For example, for the first HTTPS server block, you need to make the following modification:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">     listen 443 ssl;</span><br><span class="line">     listen [::]:443 ssl;</span><br><span class="line">     server_name hexo.hxzhouh.com;</span><br><span class="line">     # other configurations...</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>Make these modifications for each HTTPS server block. Then, test the Nginx configuration with <code>Nginx -t</code>. If there are no issues, reload the Nginx configuration with <code>systemctl reload nginx</code>.</p>
<h3 id="SSHD">SSHD</h3>
<p>In the <code>sshd_config</code> file, uncomment the line <code>AddressFamily any</code> (i.e., remove the preceding <code>#</code>) to enable IPv6 listening for SSH and other applications.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line"> ​</span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">Port 22</span></span><br><span class="line"> AddressFamily any</span><br><span class="line"> AddressFamily inet</span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">ListenAddress 0.0.0.0</span></span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">ListenAddress ::</span></span><br></pre></td></tr></table></figure>
<p>Then, restart SSHD with <code>sudo systemctl reload sshd</code>. Use the <code>netstat -tupln</code> command to check if SSH is successfully listening on IPv6. If you see the following output, it means SSH is listening on IPv6:</p>
<p><img src="https://cdn-images-1.medium.com/max/800/0*x564Ur3tmy5qQIOt.png" alt=""></p>
<p>Now the application layer modifications are complete.</p>
<h1>DNS Configuration</h1>
<p>Finally, in Cloudflare, modify the DNS settings by changing the previous IPv4 A records to AAAA records for IPv6.</p>
<p><img src="https://cdn-images-1.medium.com/max/800/0*Qpu-dV3-6obShvN4.png" alt=""></p>
<h1>Test</h1>
<p>Test everything to make sure it’s working fine, and then you can delete the IPv4 address to avoid being charged.</p>
<p>Update: Running instances cannot have their IPv4 addresses removed, but you can rebuild them using an AMI. It’s a bit of a hassle, but at least AWS won’t send me any more emails. ✌️</p>
<h1>References</h1>
<p><a href="https://repost.aws/questions/QUVmpO9BWGSuGwQh5tXk3f5w/how-to-remove-ipv4-public-ip-address-from-ec2-instances-before-february-2024-ipv6">How to remove IPv4 public IP address from EC2 instances before February 2024? (IPv6)</a></p>
]]></content>
      <categories>
        <category>compute</category>
      </categories>
      <tags>
        <tag>aws</tag>
      </tags>
  </entry>
  <entry>
    <title>How to analyze Go code in assembly</title>
    <url>/2024/01/16/2024-01-16_How-to-analyze-Go-code-in-assembly-81cada6d4f0a/</url>
    <content><![CDATA[<p><img src="https://cdn-images-1.medium.com/max/800/1*FDyDifSTzvJZmOhKsy1z9g.png" alt=""></p>
<p>Today, I will introduce some commonly used commands and tools for viewing Go assembly code and debugging Go programs. These tools can be used in regular situations or when engaging with colleagues or online discussions, allowing you to have an upper hand in critical moments.</p>
<span id="more"></span>
<p>For example, if a colleague <strong>claims</strong> that the first piece of code is more efficient than the second one:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"> ​</span><br><span class="line"> <span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">   Class <span class="type">int</span></span><br><span class="line"> &#125;</span><br><span class="line"> ​</span><br><span class="line"> <span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> a = &amp;Student&#123;<span class="number">1</span>&#125;</span><br><span class="line">   <span class="built_in">println</span>(a)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"> ​</span><br><span class="line"> <span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">   Class <span class="type">int</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> a = Student&#123;<span class="number">1</span>&#125;</span><br><span class="line">   <span class="keyword">var</span> b = &amp;a</span><br><span class="line">   <span class="built_in">println</span>(b)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>and they explained it in such a way that you couldn’t win the argument. What should you do? Just use a single command to generate the <code>assembly code</code> and expose their argument, giving them a reality check.</p>
<h1>Generating Assembly Code with go tool</h1>
<p>In fact, it’s quite simple. There are two commands that can achieve this:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go tool compile -S main.go</span><br></pre></td></tr></table></figure>
<p>or:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go build main.go &amp;&amp; go tool objdump ./main</span><br></pre></td></tr></table></figure>
<p>The first one is for compilation, which means compiling the source code into an <code>.o</code> object file and outputting the corresponding assembly code.</p>
<p>The second one is for disassembling, which means decompiling the executable file into assembly code. Therefore, you need to compile the code into an executable file using the <code>go build</code> command first.</p>
<p>Although these two commands are not identical, they both reveal that the assembly code generated for the two example code snippets is the same. Your colleague’s “ <strong>claims</strong>” falls apart, and you’ve got them cornered.</p>
<h1>Locating the Runtime Source Code</h1>
<p>Go is a language with a runtime. What is the runtime? It’s essentially a set of auxiliary programs that the user didn’t write. The runtime writes code for us, such as the Go scheduler.</p>
<p>All we need to know is that we can create goroutines using the <code>go</code> keyword, and then we can pile up our business logic. As for how goroutines are scheduled, we don’t need to worry about it at all because that’s the job of the runtime scheduler.</p>
<p>But how can we correlate our code with the code inside the runtime?</p>
<p>The methods mentioned earlier can achieve this by adding a <code>grep</code> command.</p>
<p>For example, if I want to know which function in the runtime corresponds to the <code>go</code> keyword, I can write a test code snippet:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"> ​</span><br><span class="line"> <span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">     <span class="built_in">println</span>(<span class="number">1</span> + <span class="number">2</span>)</span><br><span class="line">   &#125;()</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>Since the line <code>go func() &#123; &#125;()</code> is on line 4, we can add a condition when using <code>grep</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go tool compile -S main.go | grep &quot;main.go:4&quot; ​</span><br><span class="line"> // or ​</span><br><span class="line">go build main.go &amp;&amp; go tool objdump ./main | grep &quot;main.go:4&quot;</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn-images-1.medium.com/max/800/0*DZwzs6kZukATzmXi.png" alt=""></p>
<p>By analyzing the code, we can immediately see that the line <code>go func()&#123;&#125;</code> corresponds to the <code>newproc()</code> function. By further studying the <code>newproc()</code> function, we can gain a better understanding of how goroutines are created.</p>
<h1>Debugging Code with dlv</h1>
<p>Some may ask, “Are there any other methods or tools available for debugging Go programs and interacting with them?” The answer is yes! That’s where the dlv debugging tool comes in. It currently provides the best support for debugging Go programs.</p>
<p>Previously, I hadn’t really explored it in-depth and only knew some very basic commands. However, this time I have learned a few advanced commands, which have significantly enhanced my understanding of Go.</p>
<p>Let’s demonstrate how to use dlv with a specific task.</p>
<p>We know that appending elements to a nil slice will not cause any problems. However, if we try to insert new elements into a nil map, it will immediately panic. Why does this happen and where exactly does the panic occur?</p>
<p>First, let’s write a sample program that triggers a panic in a map:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"> ​</span><br><span class="line"> <span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> m <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span></span><br><span class="line">   m[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>Next, compile the program and generate an executable file using the <code>go build</code> command:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go build main.go</span><br></pre></td></tr></table></figure>
<p>Then, enter the debugging mode using dlv:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dlv exec ./main</span><br></pre></td></tr></table></figure>
<p>To set a breakpoint, we can use the <code>b</code> command in three different ways:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">b + address</span><br><span class="line">b + line number</span><br><span class="line">b + function name</span><br></pre></td></tr></table></figure>
<p>Let’s set a breakpoint at the line where the map assignment occurs, which is line 5. We’ll add a breakpoint at that line:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(dlv) b main.go:5</span><br><span class="line">Breakpoint 1 set at 0x104203070 for main.main() ./main.go:5</span><br><span class="line">(dlv)</span><br></pre></td></tr></table></figure>
<p>Use the <code>c</code> command to directly run until the breakpoint is reached. Then, execute the <code>disass</code> command to see the assembly instructions:</p>
<p><img src="https://cdn-images-1.medium.com/max/800/0*SKMSX7Qi9vQMTqVh.png" alt=""></p>
<p>Next, use the <code>si</code> command to execute a single instruction. Repeat the <code>si</code> command to execute until the <code>mapassign_fast64</code> function is reached:</p>
<p><img src="https://cdn-images-1.medium.com/max/800/0*R4qs64IT4_KGun_C.png" alt=""><img src="https://cdn-images-1.medium.com/max/800/0*1o3G1DXK3oMWKoQe.png" alt=""></p>
<p>Then, let’s set a breakpoint in the <code>map_fast64.go</code> file:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b /opt/homebrew/Cellar/go/1.21.6/libexec/src/runtime/map_fast64.go:93</span><br></pre></td></tr></table></figure>
<p>Now, by using the <code>s</code> command, we can step into the branch where <code>h</code> is checked for nil and then the <code>panic</code> function is executed:</p>
<p><img src="https://cdn-images-1.medium.com/max/800/0*PKb_bBXHmm3b7agP.png" alt=""><img src="https://cdn-images-1.medium.com/max/800/0*hBYhNqkEyBomybnR.png" alt=""></p>
<p>At this point, we have found the code that triggers a panic when assigning to a nil map. From here, we can follow the graph and locate the corresponding position in the runtime source code for further exploration.</p>
<p>In addition, we can use the <code>bt</code> command to view the call stack:</p>
<p><img src="https://cdn-images-1.medium.com/max/800/0*xO35ECn-fUQVINEh.png" alt=""></p>
<p>Using the <code>frame 1</code> command, we can jump to the corresponding position. In this case, <code>1</code> corresponds to the <code>main.go:5</code> line where we set the breakpoint. Isn’t it fascinating?</p>
<p>In the graph above, we can also clearly see that the user goroutine is called all the way by the <code>goexit</code> function. When the user goroutine completes, it goes back to the <code>goexit</code> function to do some finalization work. However, that’s beyond the scope of our discussion.</p>
<p>Additionally, dlv can also help us with the second part, “Locating the Runtime Source Code.”</p>
<h1>Summary</h1>
<p>Today, I provided systematic methods for viewing runtime source code or assembly code corresponding to user code using commands and tools, which is very practical. To summarize:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go tool compile</span><br><span class="line">go tool objdump</span><br><span class="line">dlv</span><br></pre></td></tr></table></figure>
<p>In the future, we will continue analyzing Go source code using these tools, such as for maps and slices. With these tools, our learning process will be more efficient.</p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Overview of Changes in Go’s Concurrency Library in 2023</title>
    <url>/2024/01/19/2024-01-19_Overview-of-Changes-in-Go-s-Concurrency-Library-in-2023-144a65184715/</url>
    <content><![CDATA[<p>In 2023, there have been some changes to Go’s concurrency library, and this article provides an overview of these changes. Minor details such as typos and documentation changes will not be covered.</p>
<span id="more"></span>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/a0fe00350455e762e3a3891a422913ff.png" alt="Pasted image 20240517205357"></p>
<h1>sync.Map</h1>
<p>In Go 1.21.0, three functions related to <code>Once</code> were added to the <code>sync</code> package to facilitate the usage of <code>Once</code>:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">OnceFunc</span><span class="params">(f <span class="keyword">func</span>()</span></span>) <span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">OnceValue</span>[<span class="title">T</span> <span class="title">any</span>]<span class="params">(f <span class="keyword">func</span>()</span></span> T) <span class="function"><span class="keyword">func</span><span class="params">()</span></span> T</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">OnceValues</span>[<span class="title">T1</span>, <span class="title">T2</span> <span class="title">any</span>]<span class="params">(f <span class="keyword">func</span>()</span></span> (T1, T2)) <span class="function"><span class="keyword">func</span><span class="params">()</span></span> (T1, T2)</span><br></pre></td></tr></table></figure>
<p>The functionality of these three functions is as follows:</p>
<ul>
<li><code>OnceFunc</code>: Returns a function <code>g</code> that, when called multiple times, will only execute <code>f</code> once. If <code>f</code> panics during execution, subsequent calls to <code>g</code> will not execute <code>f</code>, but each call will still panic.</li>
<li><code>OnceValue</code>: Returns a function <code>g</code> that, when called multiple times, will only execute <code>f</code> once. The return type of <code>g</code> is <code>T</code>, which is an additional return value compared to the previous function. The panic behavior is the same as <code>OnceFunc</code>.</li>
<li><code>OnceValues</code>: Returns a function <code>g</code> that, when called multiple times, will only execute <code>f</code> once. The return type of <code>g</code> is <code>(T1, T2)</code>, which is an additional return value compared to the previous function. The panic behavior is the same as <code>OnceFunc</code>.</li>
</ul>
<p>In theory, you can add more functions and return more values. However, since Go does not have a tuple type, the return values of function <code>g</code> cannot be simplified to a tuple type. In any case, Go 1.21.0 only added these three functions.</p>
<p>What are the benefits of these functions? Previously, when using <code>sync.Once</code>, such as initializing a thread pool, we needed to define a variable for the thread pool and call <code>sync.Once.Do</code> every time we accessed the thread pool variable:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestOnce</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> pool any</span><br><span class="line">   <span class="keyword">var</span> once sync.Once</span><br><span class="line">   <span class="keyword">var</span> initFn = <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">     <span class="comment">// initialize pool</span></span><br><span class="line">     pool = <span class="number">1</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">     once.Do(initFn)</span><br><span class="line">     t.Log(pool)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>With <code>OnceValue</code>, the code can be simplified:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestOnceValue</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> initPool = <span class="function"><span class="keyword">func</span><span class="params">()</span></span> any &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">var</span> poolGenerator = sync.OnceValue(initPool)</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">     t.Log(poolGenerator())</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>The code is slightly simplified, and you only need to call the returned function <code>g</code> to obtain the singleton.</p>
<p>In summary, these three functions are just encapsulations of <code>sync.Once</code> to make it more convenient to use.</p>
<h1>Understanding copyChecker</h1>
<p>We know that <code>sync.Cond</code> has two fields, <code>noCopy</code> and <code>checker</code>. <code>noCopy</code> can be statically checked using the <code>go vet</code> tool, but <code>checker</code> is checked at runtime:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Cond <span class="keyword">struct</span> &#123;</span><br><span class="line">   noCopy noCopy</span><br><span class="line">   <span class="comment">// L is held while observing or changing the condition</span></span><br><span class="line">   L Locker</span><br><span class="line">   notify  notifyList</span><br><span class="line">   checker copyChecker</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>Previously, the conditions for <code>copyChecker</code> were as follows, although it is just three simple lines, it is not easy to understand:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *copyChecker)</span></span> check() &#123;</span><br><span class="line">   <span class="keyword">if</span> <span class="type">uintptr</span>(*c) != <span class="type">uintptr</span>(unsafe.Pointer(c)) &amp;&amp;</span><br><span class="line">     !atomic.CompareAndSwapUintptr((*<span class="type">uintptr</span>)(c), <span class="number">0</span>, <span class="type">uintptr</span>(unsafe.Pointer(c))) &amp;&amp;</span><br><span class="line">     <span class="type">uintptr</span>(*c) != <span class="type">uintptr</span>(unsafe.Pointer(c)) &#123;</span><br><span class="line">     <span class="built_in">panic</span>(<span class="string">&quot;sync.Cond is copied&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>Now, with added comments, the meaning of these three lines is explained:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *copyChecker)</span></span> check() &#123;</span><br><span class="line"> ​</span><br><span class="line">   <span class="comment">// Check if c has been copied in three steps:</span></span><br><span class="line"> ​</span><br><span class="line">   <span class="comment">// 1. The first comparison is the fast-path. If c has been initialized and not copied, this will return immediately. Otherwise, c is either not initialized, or has been copied.</span></span><br><span class="line"> ​</span><br><span class="line">   <span class="comment">// 2. Ensure c is initialized. If the CAS succeeds, we&#x27;re done. If it fails, c was either initialized concurrently and we simply lost the race, or c has been copied.</span></span><br><span class="line"> ​</span><br><span class="line">   <span class="comment">// 3. Do step 1 again. Now that c is definitely initialized, if this fails, c was copied.</span></span><br><span class="line">   <span class="keyword">if</span> <span class="type">uintptr</span>(*c) != <span class="type">uintptr</span>(unsafe.Pointer(c)) &amp;&amp;</span><br><span class="line">     !atomic.CompareAndSwapUintptr((*<span class="type">uintptr</span>)(c), <span class="number">0</span>, <span class="type">uintptr</span>(unsafe.Pointer(c))) &amp;&amp;</span><br><span class="line">     <span class="type">uintptr</span>(*c) != <span class="type">uintptr</span>(unsafe.Pointer(c)) &#123;</span><br><span class="line">     <span class="built_in">panic</span>(<span class="string">&quot;sync.Cond is copied&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>The main logic is as follows:</p>
<ul>
<li>The first step is a fast check, directly comparing the pointer of <code>c</code> and the pointer of <code>c</code> itself. If they are not equal, it means that <code>c</code> has been copied. This is the fastest check path.</li>
<li>The second step ensures that <code>c</code> is initialized. It initializes <code>c</code> using CAS (CompareAndSwap). If the CAS succeeds, we’re done. If it fails, it means that <code>c</code> was either initialized concurrently and we simply lost the race, or <code>c</code> has been copied.</li>
<li>The third step repeats the first step’s check. Since we know that <code>c</code> is definitely initialized at this point, if the check fails, it means that <code>c</code> was copied.</li>
</ul>
<p>The entire logic uses CAS combined with two pointer checks to ensure the correctness of the judgment.</p>
<p>In summary, the first step is a performance optimization. The second step uses CAS to ensure initialization. The third step rechecks to ensure the judgment.</p>
<h1>Optimization in sync.Map</h1>
<p>Previously, the implementation of the <code>Range</code> function in <code>sync.Map</code> was as follows:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Map)</span></span> Range(f <span class="function"><span class="keyword">func</span><span class="params">(key, value any)</span></span> <span class="type">bool</span>) &#123;</span><br><span class="line">     ...</span><br><span class="line">     <span class="keyword">if</span> read.amended &#123;</span><br><span class="line">       read = readOnly&#123;m: m.dirty&#125;</span><br><span class="line">       m.read.Store(&amp;read)</span><br><span class="line">       m.dirty = <span class="literal">nil</span></span><br><span class="line">       m.misses = <span class="number">0</span></span><br><span class="line">   &#125;</span><br><span class="line">     ...</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>There was a line of code: <code>m.read.Store(&amp;read)</code>, which caused <code>read</code> to escape to the heap. To avoid the escape of <code>read</code>, a small trick was employed by introducing a new variable:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Map)</span></span> Range(f <span class="function"><span class="keyword">func</span><span class="params">(key, value any)</span></span> <span class="type">bool</span>) &#123;</span><br><span class="line">     ...</span><br><span class="line">   <span class="keyword">if</span> read.amended &#123;</span><br><span class="line">     read = readOnly&#123;m: m.dirty&#125;</span><br><span class="line">     copyRead := read</span><br><span class="line">     m.read.Store(&amp;Read)</span><br><span class="line">     m.dirty = <span class="literal">nil</span></span><br><span class="line">     m.misses = <span class="number">0</span></span><br><span class="line">   &#125;</span><br><span class="line">     ...</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/golang/go/issues/62404">Issue #62404</a> analyzed this problem.</p>
<h1>Replacing done in sync.Once implementation with atomic.Uint32</h1>
<p>Previously, the implementation of <code>sync.Once</code> was as follows:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Once <span class="keyword">struct</span> &#123;</span><br><span class="line">	done <span class="type">uint32</span></span><br><span class="line">	m    Mutex</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The <code>done</code> field was of type <code>uint32</code> to indicate whether <code>Once</code> has been executed. The reason for using <code>uint32</code> instead of <code>bool</code> is that <code>uint32</code> can be used with atomic operations from the <code>atomic</code> package, while <code>bool</code> cannot.</p>
<p>Now, the implementation of <code>sync.Once</code> is as follows:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Once <span class="keyword">struct</span> &#123;</span><br><span class="line">	done atomic.Uint32</span><br><span class="line">	m    Mutex</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Since Go 1.19, the standard library has provided atomic wrappers for basic types, and a large amount of code in the Go standard library has been replaced with <code>atomic.XXX</code> types.</p>
<p>In my opinion, this modification may result in a performance decrease compared to the previous implementation in certain cases. I will write an article specifically to explore this.</p>
<p>Besides <code>sync.Once</code>, there are other types that have been replaced with <code>atomic.XXX</code> types in their usage. Is it necessary to replace them?</p>
<h1>Optimization in Initial Implementation of sync.OnceFunc</h1>
<p>The initial implementation of <code>sync.OnceFunc</code> was as follows:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">OnceFunc</span><span class="params">(f <span class="keyword">func</span>()</span></span>) <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"> <span class="keyword">var</span> (</span><br><span class="line">  once  Once</span><br><span class="line">  valid <span class="type">bool</span></span><br><span class="line">  p     any</span><br><span class="line"> )</span><br><span class="line"></span><br><span class="line"> g := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">   p = <span class="built_in">recover</span>()</span><br><span class="line">   <span class="keyword">if</span> !valid &#123;</span><br><span class="line">    <span class="built_in">panic</span>(p)</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;()</span><br><span class="line">  f()</span><br><span class="line">  valid = <span class="literal">true</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">  once.Do(g)</span><br><span class="line">  <span class="keyword">if</span> !valid &#123;</span><br><span class="line">   <span class="built_in">panic</span>(p)</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If you look closely at this code, you will notice that the function <code>f</code> passed to <code>OnceFunc/OnceValue/OnceValues</code> remains alive even after it has been executed once, as long as the returned function <code>g</code> is not garbage collected. This is unnecessary because <code>f</code> only needs to be executed once and can be garbage collected afterwards. Therefore, an optimization can be made to set <code>f</code> to <code>nil</code> after it is executed, allowing it to be garbage collected.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">OnceFunc</span><span class="params">(f <span class="keyword">func</span>()</span></span>) <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"> <span class="keyword">var</span> (</span><br><span class="line">  once  Once</span><br><span class="line">  valid <span class="type">bool</span></span><br><span class="line">  p     any</span><br><span class="line"> )</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Construct the inner closure just once to reduce costs on the fast path.</span></span><br><span class="line"> g := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">   p = <span class="built_in">recover</span>()</span><br><span class="line">   <span class="keyword">if</span> !valid &#123;</span><br><span class="line">    <span class="comment">// Re-panic immediately so on the first call the user gets a</span></span><br><span class="line">    <span class="comment">// complete stack trace into f.</span></span><br><span class="line">    <span class="built_in">panic</span>(p)</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;()</span><br><span class="line">  f()</span><br><span class="line">  f = <span class="literal">nil</span>      <span class="comment">// Do not keep f alive after invoking it.</span></span><br><span class="line">  valid = <span class="literal">true</span> <span class="comment">// Set only if f does not panic.</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">  once.Do(g)</span><br><span class="line">  <span class="keyword">if</span> !valid &#123;</span><br><span class="line">   <span class="built_in">panic</span>(p)</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>Context</h1>
<p>As we know, in Go 1.20, a new method <code>WithCancelCause</code> was added ( <code>func WithCancelCause(parent Context) (ctx Context, cancel CancelCauseFunc)</code>), which allows us to pass the cancellation cause to the <code>Context</code> generated by <code>WithCancelCause</code>. This allows us to retrieve the cancellation cause using the <code>context.Cause</code> method.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ctx, cancel := context.WithCancelCause(parent)</span><br><span class="line">cancel(myError)</span><br><span class="line">ctx.Err() <span class="comment">// returns context.Canceled</span></span><br><span class="line">context.Cause(ctx) <span class="comment">// returns myError</span></span><br></pre></td></tr></table></figure>
<p>Of course, this implementation is only halfway done, as timeout-related <code>Context</code> also needs this functionality. Therefore, in Go 1.21.0, two additional functions were added:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithDeadlineCause</span><span class="params">(parent Context, d time.Time, cause <span class="type">error</span>)</span></span> (Context, CancelFunc)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithTimeoutCause</span><span class="params">(parent Context, timeout time.Duration, cause <span class="type">error</span>)</span></span> (Context, CancelFunc)</span><br></pre></td></tr></table></figure>
<p>These two functions, unlike <code>WithCancelCause</code>, directly pass the cause as a parameter instead of using the returned cancel function.</p>
<p>Go 1.21.0 also introduced a function <code>AfterFunc</code>, which is similar to <code>time.AfterFunc</code>, but it returns a <code>Context</code> that is automatically canceled after the timeout. The implementation of this function is as follows:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AfterFunc</span><span class="params">(ctx Context, f <span class="keyword">func</span>()</span></span>) (stop <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">bool</span>)</span><br></pre></td></tr></table></figure>
<p>The specified <code>Context</code> triggers the invocation of <code>f</code> immediately when done (either due to timeout or cancellation). The returned <code>stop</code> function is used to stop the invocation of <code>f</code>. If <code>stop</code> is called and returns <code>true</code>, <code>f</code> will not be invoked.</p>
<p>This is a helper function, but it may be difficult to understand, and it is unlikely to be widely used.</p>
<p>Other minor performance optimizations, such as replacing <code>type emptyCtx int</code> with <code>type emptyCtx struct&#123;&#125;</code>, are not mentioned here.</p>
<p>An additional function <code>func WithoutCancel(parent Context) Context</code> was added, which creates a <code>Context</code> that is not affected when the parent is canceled.</p>
<h1><a href="http://golang.org/x/sync">golang.org/x/sync</a> No Significant Changes in sync</h1>
<p><code>errgroup</code> now supports setting the cause using <code>withCancelCause</code>. <code>singleflight</code> added an <code>Unwrap</code> method to <code>panicError</code>.</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
  </entry>
  <entry>
    <title>Advanced Debugging Tips for the Go Language</title>
    <url>/2024/02/04/2024-02-04_Advanced-Debugging-Tips-for-the-Go-Language-9ca36e7e8f68/</url>
    <content><![CDATA[<p>Last time we shared the method of <a href="https://medium.com/@hxzhouh/how-to-analyze-go-code-in-assembly-81cada6d4f0a">debugging Go code using assembly language</a>. Assembly language allows us to easily trace low-level knowledge of the Go runtime and other underlying details. In this article, we will introduce the powerful debugging tool called “go tool”, which, when mastered, can elevate your development skills to the next level.</p>
<span id="more"></span>
<p><img src="https://cdn-images-1.medium.com/max/800/0*2Qecdc1lDBmffp1b" alt=""></p>
<p>This article focuses on practical techniques for debugging in Golang and the effective usage of related tools, so you no longer need to worry about how to debug Golang code. Golang, as a modern language, comes with built-in debugging capabilities from the very beginning:</p>
<ul>
<li>Golang tools are directly integrated into the language tools, supporting memory analysis, CPU analysis, and blocking lock analysis, among others.</li>
<li>Delve and GDB are the most commonly used debug tools, allowing you to dive deeper into program debugging.</li>
<li>Delve is currently the most user-friendly Golang debugging program, and IDE debugging is essentially calling dlv, such as in Goland.</li>
<li>Unit testing is deeply integrated into the language design, making it very convenient to execute unit tests and generate code coverage.</li>
</ul>
<h1>Golang tools</h1>
<p>Golang integrates a variety of useful tools at the language level, which are the essence of the experience accumulated by Robert Griesemer, Rob Pike, Ken Thompson, and other experts. After installing Golang, you can see all the built-in tools by executing <code>go tool</code>.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hxzhouh@hxzhouhdeMacBook-Pro ~&gt; go tool</span><br><span class="line"> addr2line</span><br><span class="line"> asm</span><br><span class="line"> buildid</span><br><span class="line"> cgo</span><br><span class="line"> compile</span><br><span class="line"> covdata</span><br><span class="line"> cover</span><br><span class="line"> dist</span><br><span class="line"> distpack</span><br><span class="line"> doc</span><br><span class="line"> fix</span><br><span class="line"> link</span><br><span class="line"> nm</span><br><span class="line"> objdump</span><br><span class="line"> pack</span><br><span class="line"> pprof</span><br><span class="line"> test2json</span><br><span class="line"> trace</span><br><span class="line"> vet</span><br></pre></td></tr></table></figure>
<p>Here, I will focus on selecting several commonly used debug tools:</p>
<ul>
<li><code>nm</code>: view the symbol table (equivalent to the system <code>nm</code> command).</li>
<li><code>objdump</code>: disassembly tool, used to analyze binary files (equivalent to the system <code>objdump</code> command).</li>
<li><code>pprof</code>: metric and performance analysis tool.</li>
<li><code>cover</code>: code coverage generation.</li>
<li><code>trace</code>: sampling over a period of time, metric tracking and analysis tool.</li>
<li><code>compile</code>: code assembly.</li>
</ul>
<p>Now, I will demonstrate the usage of these tools with an example.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"> ​</span><br><span class="line"> <span class="keyword">import</span> (</span><br><span class="line">     <span class="string">&quot;log&quot;</span></span><br><span class="line">     <span class="string">&quot;net&quot;</span></span><br><span class="line"> )</span><br><span class="line"> ​</span><br><span class="line"> <span class="keyword">var</span> helloCount <span class="type">int</span></span><br><span class="line"> ​</span><br><span class="line"> <span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">     listener, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:50050&quot;</span>)</span><br><span class="line">     <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">         log.Fatal(err)</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">defer</span> listener.Close()</span><br><span class="line"> ​</span><br><span class="line">     <span class="keyword">for</span> &#123;</span><br><span class="line">         conn, err := listener.Accept()</span><br><span class="line">         <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">             log.Fatal(err)</span><br><span class="line">         &#125;</span><br><span class="line">         tcpConn := conn.(*net.TCPConn)</span><br><span class="line">         err = tcpConn.SetNoDelay(<span class="literal">true</span>)</span><br><span class="line">         <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">             log.Println(err)</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">go</span> handleConnection(conn)</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> ​</span><br><span class="line"> <span class="function"><span class="keyword">func</span> <span class="title">handleConnection</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line">     <span class="keyword">defer</span> conn.Close()</span><br><span class="line">     helloCount++</span><br><span class="line">     resp := []<span class="type">byte</span>(<span class="string">&quot;Hello count: &quot;</span>)</span><br><span class="line">     resp = <span class="built_in">append</span>(resp, []<span class="type">byte</span>(<span class="type">string</span>(<span class="type">rune</span>(helloCount)))...)</span><br><span class="line">     resp = <span class="built_in">append</span>(resp, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">     conn.Write(resp)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// go build main.go</span></span><br></pre></td></tr></table></figure>
<h2 id="nm">nm</h2>
<p>The <code>nm</code> command is used to view the symbol table, which is equivalent to the system <code>nm</code> command and is very useful. When setting breakpoints, if you don’t know the function symbol of the breakpoint, you can use this command to find out (this command operates on binary program files).</p>
<h2 id="compile">compile</h2>
<p>Assemble a specific file:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go tool compile -N -l -S main.go</span><br></pre></td></tr></table></figure>
<p>You will be able to see the assembly code corresponding to your Go code (please note that this command operates on Go code text), which is cool.</p>
<h2 id="objdump">objdump</h2>
<p>The objdump tool is used to disassemble binaries, equivalent to the system <code>objdump</code> (please note that this command parses binary program files).</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go tool objdump main.o</span><br><span class="line">go tool objdump -s DoFunc main.o  // Disassembling specific functions</span><br></pre></td></tr></table></figure>
<p>Assembly code may not be needed in 90% of scenarios, but if you have experience working with C programs, in certain special situations, inferring application behavior by disassembling a piece of logic may be your only way out. This is because the code running in production usually has optimization enabled, which can cause your code to not match. Furthermore, you cannot attach to processes at will in production environments. Many times, you only have a core file to troubleshoot.</p>
<h2 id="pprof">pprof</h2>
<p>pprof supports four types of analysis:</p>
<ul>
<li><code>CPU</code>: CPU analysis, sampling calls that consume CPU resources, which is generally used to locate and troubleshoot areas of high computational resource consumption in programs.</li>
<li><code>Memory</code>: Memory analysis, which is generally used to troubleshoot memory usage, memory leaks, and other issues.</li>
<li><code>Block</code>: Blocking analysis, which samples the blocking calls in the program.</li>
<li><code>Mutex</code>: Mutex analysis, which samples the competition for mutex locks.</li>
</ul>
<p>For more information about pprof, you can refer to this article.</p>
<h2 id="trace">trace</h2>
<p>Program trace debugging:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go tool trace -http=&quot;:6060&quot; ./ssd_336959_20190704_105540_trace</span><br></pre></td></tr></table></figure>
<p>The trace command allows you to trace and collect information over a period of time, then dump it to a file, and finally analyze the dump file using <code>go tool trace</code> and open it in a web format.</p>
<h1>Unit Testing</h1>
<p>The importance of unit testing is self-evident. In Golang, files ending with <code>_test.go</code> are considered test files. As a modern language, Golang supports unit testing at the language tool level.</p>
<h2 id="Running-Unit-Tests">Running Unit Tests</h2>
<p>There are two ways to execute unit tests:</p>
<ul>
<li>Run <code>go test</code> directly, which is the simplest method.</li>
<li>Compile the test files first, then run them. This method provides more flexibility.</li>
</ul>
<h2 id="Running-go-test">Running <code>go test</code></h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// Run go test directly in your project directory.</span><br><span class="line"> go test .</span><br><span class="line"> // Specify the running function.</span><br><span class="line"> go test -run=TestPutAndGetKeyValue</span><br><span class="line"> // Print details.</span><br><span class="line"> go test -v</span><br></pre></td></tr></table></figure>
<h2 id="Compilation-and-Execution">Compilation and Execution</h2>
<p>Essentially, running Golang unit tests involves compiling <code>*_test.go</code> files into binaries and then running these binaries. When you execute <code>go test</code>, the tool handles these actions for you, but you can also perform them separately.</p>
<p>Compile the test files to generate the test executable:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// Compile the .test file first.</span><br><span class="line">go test -c -coverpkg=. -covermode=atomic -o 1TestSwapInt32_in_sync_atomic.test sync/atomic</span><br><span class="line"> // Specify running a file.</span><br><span class="line">./1TestSwapInt32_in_sync_atomic.test -test.timeout=10m0s -test.v=true -test.run=TestSwapInt32</span><br></pre></td></tr></table></figure>
<p>This method is usually used in the following scenarios:</p>
<ol>
<li>Compile on one machine and run tests on another.</li>
<li>Debugging test programs.</li>
</ol>
<h1>Code Coverage Analysis</h1>
<p>Golang’s code coverage is based on unit tests, which serve as the starting point for measuring code coverage of your business code. The operation is simple:</p>
<ol>
<li>Add the <code>-coverprofile</code> parameter when running tests to record code coverage.</li>
<li>Use the <code>go tool cover</code> command to analyze and generate coverage reports.</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go test -coverprofile=coverage.out</span><br><span class="line">go tool cover -func=coverage.out</span><br></pre></td></tr></table></figure>
<p>The output will be similar to the following:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hxzhouh@hxzhouhdeMacBook-Pro ~/w/g/s/sync&gt; go tool cover -func=coverage.out                                                                                                                heads/go1.21.4?</span><br><span class="line">sync/cond.go:47:        NewCond                         100.0%</span><br><span class="line">sync/cond.go:66:        Wait                            100.0%</span><br><span class="line">sync/cond.go:81:        Signal                          100.0%</span><br><span class="line">sync/cond.go:90:        Broadcast                       100.0%</span><br><span class="line">sync/cond.go:98:        check                           100.0%</span><br><span class="line">sync/cond.go:116:       Lock                            0.0%</span><br><span class="line">sync/cond.go:117:       Unlock                          0.0%</span><br><span class="line">sync/map.go:104:        newEntry                        100.0%</span><br><span class="line">sync/map.go:110:        loadReadOnly                    100.0%</span><br><span class="line">sync/map.go:120:        Load                            100.0%</span><br><span class="line">sync/map.go:145:        load                            100.0%</span><br><span class="line">.......</span><br></pre></td></tr></table></figure>
<p>This way, you can see the code coverage for each function.</p>
<h1>Program Debugging</h1>
<p>Program debugging mainly relies on two tools:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. dlv</span><br><span class="line">2. gdb</span><br></pre></td></tr></table></figure>
<p>Here, I recommend dlv because GDB’s functionality is limited. GDB does not understand Golang’s specific types such as channels, maps, and slices. GDB’s native support for goroutines is limited since it only understands threads. However, GDB has one irreplaceable feature, which is the <code>gcore</code> command.</p>
<h2 id="dlv-Debugging">dlv Debugging</h2>
<h4 id="Debugging-Binaries">Debugging Binaries</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dlv exec &lt;path/to/binary&gt; [flags]</span><br></pre></td></tr></table></figure>
<p>For example:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dlv exec ./main</span><br></pre></td></tr></table></figure>
<p>Debugging binaries with dlv and passing arguments:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dlv exec ./main -- --audit=./d</span><br></pre></td></tr></table></figure>
<h2 id="Debugging-Processes">Debugging Processes</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dlv attach $&#123;pid&#125; [executable] [flags]</span><br></pre></td></tr></table></figure>
<p>The process ID is mandatory. For example:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dlv attach 12808 ./main</span><br></pre></td></tr></table></figure>
<h4 id="Debugging-Core-Files">Debugging Core Files</h4>
<p>Debugging core files with dlv and redirecting standard output to a file:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dlv core &lt;executable&gt; &lt;core&gt; [flags]</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dlv core ./main core.277282</span><br></pre></td></tr></table></figure>
<h1>Common Debugging Syntax</h1>
<h2 id="System-Summary">System Summary</h2>
<p><strong>Program Execution</strong></p>
<ol>
<li>call: call a function (note that this will cause the entire program to run).</li>
<li>continue: resume execution.</li>
<li>next: step over.</li>
<li>restart: restart.</li>
<li>step: step into a function.</li>
<li>step-instruction: step into a specific assembly instruction.</li>
<li>stepout: step out of the current function.</li>
</ol>
<h2 id="Breakpoint-related"><strong>Breakpoint-related</strong></h2>
<ol>
<li>break (alias: b): set a breakpoint.</li>
<li>breakpoints (alias: bp): print all breakpoint information.</li>
<li>clear: clear a breakpoint.</li>
<li>clearall: clear all breakpoints.</li>
<li>condition (alias: cond): set a conditional breakpoint.</li>
<li>on: set a command to be executed when a breakpoint is hit.</li>
<li>trace (alias: t): set a tracepoint, which is also a breakpoint but does not stop the program when hit; it only prints a line of information. This command is useful in certain scenarios where stopping the program affects logic (e.g., business timeouts), and you only want to print a specific variable.</li>
</ol>
<h2 id="Information-Printing"><strong>Information Printing</strong></h2>
<ul>
<li>args: print function arguments.</li>
<li>examinemem (alias: x): a powerful command for examining memory, similar to gdb’s <code>x</code> command.</li>
<li>locals: print local variables.</li>
<li>print (alias: p): print an expression or variable.</li>
<li>regs: print register information.</li>
<li>set: set variable value.</li>
<li>vars: print global variables (package variables).</li>
<li>whatis: print type information.</li>
</ul>
<h2 id="Goroutine-related"><strong>Goroutine-related</strong></h2>
<ul>
<li>goroutine (alias: gr): print information of a specific goroutine.</li>
<li>goroutines (alias: grs): list all goroutines.</li>
<li>thread (alias: tr): switch to a specific thread.</li>
<li>threads: print information of all threads.</li>
</ul>
<h2 id="Stack-related"><strong>Stack-related</strong></h2>
<ul>
<li>deferred: execute commands in the context of a defer function.</li>
<li>down: move up the stack.</li>
<li>frame: jump to a specific stack frame.</li>
<li>stack (alias: bt): print stack information.</li>
<li>up: move down the stack.</li>
</ul>
<h2 id="Other-Commands"><strong>Other Commands</strong></h2>
<ul>
<li>config: modify configurations.</li>
<li>disassemble (alias: disass): disassemble.</li>
<li>edit (alias: ed): omitted.</li>
<li>exit (alias: quit | q): omitted.</li>
<li>funcs: print all function symbols.</li>
<li>libraries: print all loaded dynamic libraries.</li>
<li>list (alias: ls | l): display source code.</li>
<li>source: load commands.</li>
<li>sources: print source code.</li>
<li>types: print all type information.</li>
</ul>
<p>The above commands cover the complete set of commands supported by dlv, which meet our debugging needs (some commands are only applicable during development and debugging, as it is not possible to single-step debug on production code in most cases).</p>
<p>Application Examples</p>
<p><strong>Print Global Variables</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(dlv) vars</span><br></pre></td></tr></table></figure>
<p>This is very useful for inspecting global variables.</p>
<p><strong>Conditional Breakpoints</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Set a breakpoint first.</span></span><br><span class="line">(dlv) b</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Check breakpoint information.</span></span><br><span class="line">(dlv) bp</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Customize the condition.</span></span><br><span class="line">(dlv) condition 2 i==2 &amp;&amp; j==7 &amp;&amp; z==32</span><br></pre></td></tr></table></figure>
<p><strong>Inspecting the Stack</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Show all stacks.</span></span><br><span class="line">(dlv) goroutines</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Expand all stacks.</span></span><br><span class="line">(dlv) goroutines -t</span><br></pre></td></tr></table></figure>
<p><strong>Examining Memory</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(dlv) x -fmt hex -len 20 0xc00008af38</span><br></pre></td></tr></table></figure>
<p>The <code>x</code> command is the same as gdb’s <code>x</code> command.</p>
<h3 id="gdb-Debugging">gdb Debugging</h3>
<p>GDB’s support for Golang debugging is achieved through a Python script called <code>src/runtime/runtime-gdb.py</code>, so its functionality is limited. GDB can only perform basic variable printing and cannot understand some of Golang’s specific types such as channels, maps, and slices. GDB cannot directly debug goroutines because it only understands threads. However, GDB has one feature that cannot be replaced, which is the <code>gcore</code> command.</p>
<h4 id="dlv-Debugging-Example">dlv Debugging Example</h4>
<p>Debugging a Binary</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dlv exec ./main</span><br></pre></td></tr></table></figure>
<p>Debugging a Process</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dlv attach 12808 ./main</span><br></pre></td></tr></table></figure>
<p>Debugging a Core File</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dlv core ./main core.277282</span><br></pre></td></tr></table></figure>
<h4 id="gdb-Debugging-Example">gdb Debugging Example</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gdb ./main</span><br></pre></td></tr></table></figure>
<p>Print Global Variables (note the single quotation marks)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(gdb) p &#x27;runtime.firstmoduledata&#x27;</span><br></pre></td></tr></table></figure>
<p>Due to GDB’s limited understanding of Golang’s type system, sometimes it may not be able to print variables, so please pay attention to this.</p>
<p>Print Array Length</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(gdb) p $len(xxx)</span><br></pre></td></tr></table></figure>
<p>Therefore, I usually only use GDB to generate core files.</p>
<h3 id="Tips-and-Tricks">Tips and Tricks</h3>
<h3 id="Don’t-know-how-to-set-breakpoints-in-functions">Don’t know how to set breakpoints in functions?</h3>
<p>Sometimes you don’t know how to set breakpoints in a function. You can use <code>nm</code> to query the function and then set a breakpoint, which will ensure that you hit the breakpoint.</p>
<h3 id="Don’t-know-the-calling-context">Don’t know the calling context?</h3>
<p>Add the following line in your code:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">debug.PrintStack()</span><br></pre></td></tr></table></figure>
<p>This will print the stack trace at the current code position, allowing you to understand the calling path of the function.</p>
<h3 id="Don’t-know-how-to-enable-pprof">Don’t know how to enable pprof?</h3>
<p>There are two ways to enable pprof, corresponding to two packages:</p>
<ul>
<li>net/http/pprof: used in web server scenarios.</li>
<li>runtime/pprof: used in non-server applications.</li>
</ul>
<p>These two packages are essentially the same, with <code>net/http/pprof</code> being a web wrapper on top of <code>runtime/pprof</code>.</p>
<p><strong>Using</strong> <code>net/http/pprof</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="string">&quot;net/http/pprof&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>Using</strong> <code>runtime/pprof</code></p>
<p>This method is usually used for performance optimization. When running a program that is not a server application, you want to find bottlenecks, so you typically use this method.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CPU pprof file path</span></span><br><span class="line">    f, err := os.Create(<span class="string">&quot;cpufile.pprof&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Start CPU pprof</span></span><br><span class="line">    pprof.StartCPUProfile(f)</span><br><span class="line">    <span class="keyword">defer</span> pprof.StopCPUProfile()</span><br></pre></td></tr></table></figure>
<h3 id="Why-does-the-code-sometimes-execute-unexpectedly-during-single-step-debugging">Why does the code sometimes execute unexpectedly during single-step debugging?</h3>
<p>This situation is usually caused by compiler optimization, such as function inlining and removal of redundant logic and parameters from the compiled binary. This can cause unexpected execution during dlv single-step debugging or prevent the printing of certain variables. The solution to this problem is to disable compiler optimization.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go build -gcflags &quot;-N -l&quot;</span><br></pre></td></tr></table></figure>
<h1>Conclusion</h1>
<p>This article provides a systematic overview of the techniques and usage of Golang program debugging:</p>
<ol>
<li>The language tool package provides built-in tools that support assembly, disassembly, pprof analysis, symbol table queries, and other practical functions.</li>
<li>The language tool package integrates unit testing, and code coverage relies on triggering unit tests.</li>
<li>The powerful dlv/gdb tools serve as the main debugging tools, supporting the analysis of binaries, processes, and core files.</li>
</ol>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Crafting Your Second Brain Lessons Learned from My Note-Taking Journey</title>
    <url>/2024/05/08/2024-05-08_Crafting-Your-Second-Brain--Lessons-Learned-from-My-Note-Taking-Journey-21de5c55e95d/</url>
    <content><![CDATA[<p><img src="https://images.hxzhouh.com/blog-images/2024/05/5ab6b54893dc2241704444526269572a.jpg" alt="o8f0u"></p>
<p>I’ve spent the past few years building my second brain, and here are some lessons I’ve learned along the way.</p>
<h1>Frequent Switching of Note-Taking Software/Blogging Systems</h1>
<p>I’ve tried EverNote, WizNote, VNote, CSDN blog, Google blogspot, WordPress, only to end up scattering my blogs across multiple corners of the internet. The solution? Going all in one. I’ve now settled on Obsidian.</p>
<h1>Constantly Switching Note Formats</h1>
<p>I’ve experimented with txt, orgmode, markdown, rich text, and more, only to find myself frustrated with format conversions. Similar to the first point, each note system may not be universally compatible. The reason I chose Obsidian is for its markdown syntax. If need be, I can easily migrate it to any note system.</p>
<h1>Mixing Fleeting Thoughts with Truly Useful Notes</h1>
<p>Fleeting thoughts serve to capture a moment of inspiration, but it’s only meaningful if you revisit them within a day or two and turn them into useful, relevant notes. Without timely review, good ideas drown in a sea of whims. Most of our daily thoughts are insignificant and should be discarded, while those with potential significance must be identified.</p>
<h1>Mixing Project Notes with Knowledge Notes</h1>
<p>Only recording notes relevant to specific projects leads to the loss of interesting insights or ideas during the project. The correct approach is to extract universal knowledge from projects. I recommend using the P.A.R.A method to organize notes. For more information on P.A.R.A, you can refer to this <a href="https://fortelabs.com/blog/para/">page</a></p>
<h1>Obsessive Note Organization</h1>
<p>A large pile of notes leads to an urge to organize knowledge, but too many attempts can affect the confidence to keep recording. The solution is to define the areas of interest and responsibility and not completely adopt a bottom-up knowledge management approach. When reaching the point of psychological pressure, use the MOCS (Maps of Content) method to organize notes (bidirectional linking is definitely worth trying). The most important aspect of a knowledge management system is to record your insights in one place, with the same format, and consistent standards.</p>
]]></content>
      <categories>
        <category>self</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Why The Design :Why is the CPU slow to access the hard disk?</title>
    <url>/2024/02/19/2024-02-19_Why-The-Design--Why-is-the-CPU-slow-to-access-the-hard-disk--910527fe7be6/</url>
    <content><![CDATA[<p><img src="https://cdn-images-1.medium.com/max/800/0*WaxXsYm3cXY_ZGVG" alt="">Photo by <a href="https://unsplash.com/@heapdump?utm_source=medium&amp;utm_medium=referral">Patrick Lindenberg</a> on <a href="https://unsplash.com?utm_source=medium&amp;utm_medium=referral">Unsplash</a></p>
<p>Mechanical hard disk drives (HDD) and solid-state drives (SSD) are two of the most common types of hard drives. As external storage for computers, it takes a long time for the CPU to access the data stored on them. According to the table below, accessing 4KB of data randomly in an SSD takes 1,500 times longer than accessing main memory, while the seek time for a mechanical disk is 100,000 times longer than accessing main memory:</p>
<p><img src="https://cdn-images-1.medium.com/max/800/1*uPqEtBpV77g_KjSICrt0OA.png" alt=""><em>Latency Numbers Every Programmer Should Know</em> <a href="https://gist.github.com/jboner/2841832"><em>https://gist.github.com/jboner/2841832</em></a></p>
<p>Although the seek time for a disk is only 10 ms, it is already a very long time for the CPU. When we scale up the times mentioned above proportionally, we can intuitively feel the performance differences. For example, if accessing L1 cache takes 1 second for the CPU, accessing main memory would take 3 minutes, reading data randomly from an SSD would take 3.4 days, disk seek would take 2 months, and network transmission could take over a year.</p>
<p>In computer architecture, hard disks are common input/output devices, and the operating system does not necessarily need a hard disk to start. It can start through a hard disk, a network device, or an external device. Therefore, a hard disk is not a necessary condition for computer operation.</p>
<p><img src="https://cdn-images-1.medium.com/max/800/0*yyPSe13T7fXKL3lI.png" alt=""><strong>Input/Output Devices</strong></p>
<p>As an external input/output device, compared to CPU cache and memory, the slow read and write speed of a hard disk is reasonable. However, the several thousand to several hundred thousand times difference in speed does make it difficult to imagine or accept. In this article, we will analyze why accessing a hard disk is very slow for the CPU:</p>
<ul>
<li>The process of CPU accessing data from a hard disk is complex. It first reads the data from the disk into memory through I/O operations and then accesses the data stored in memory.</li>
<li>Mechanical hard disks rely on mechanical structures to access the data in the disk, which requires moving the mechanical arm of the disk.</li>
</ul>
<h1>I/O Operations</h1>
<p>In order for the CPU to access data from the disk, it must first read the data from the disk into memory through I/O operations, and then access the data stored in memory. There are three common types of I/O operations in computers: Programmed I/O, Interrupt-driven I/O, and Direct Memory Access (DMA). We will introduce these operations one by one:</p>
<p>The simplest form of performing I/O operations is using <em>Programmed I/O</em>. When using Programmed I/O, the CPU is responsible for all the work. For example, if we want to output “Hello World” on the screen, the CPU will write a new character to the I/O device each time, and after writing, it will poll the device’s status and wait for it to complete its work before writing a new character. This method is simple but it occupies all the CPU resources, which can cause serious waste of computing resources in some complex systems.</p>
<p><em>Interrupt-driven I/O</em> is a more efficient way to perform I/O operations. In Programmed I/O, the CPU actively retrieves the device’s status and waits for the device to become idle. However, if Interrupt-driven I/O is used, the device will actively initiate an interrupt when it is idle, pause the current process, and save the context. The operating system will then execute the interrupt handler for the I/O device:</p>
<ul>
<li>If there are no characters to be printed at the moment, the interrupt handler stops and resumes the paused process.</li>
<li>If there are characters to be printed, the next character is copied to the device and the paused process is resumed.</li>
</ul>
<p>Using Interrupt-driven I/O allows the CPU to handle other tasks when the device is busy, thus maximizing CPU utilization and avoiding wasting precious computing resources. Compared to Programmed I/O, Interrupt-driven I/O delegates some work to the I/O device, thereby improving resource utilization.</p>
<p><em>Direct Memory Access (DMA)</em> uses a DMA controller to perform I/O operations. Interrupt-driven I/O requires triggering an operating system interrupt for each character, which consumes CPU time. When we use a DMA controller, the CPU reads all the data from the buffer into the DMA controller at once, and the DMA controller is responsible for writing the data to the I/O device character by character。 Although the DMA controller can free up the CPU and reduce the number of interrupts, its execution speed is much slower than the CPU. If the DMA controller cannot drive the I/O device quickly, the CPU may have to wait for the DMA controller to trigger an interrupt. In this case, Interrupt-driven I/O or even Programmed I/O can provide faster access speed.</p>
<p>By default, we use a DMA controller to perform I/O tasks. However, Programmed I/O and Interrupt-driven I/O are also acceptable options. When the CPU frequently needs to wait for the DMA controller to perform I/O tasks, using Interrupt-driven I/O or even polling Programmed I/O can achieve higher throughput. However, regardless of the method used, I/O is a complex and time-consuming operation in the program.</p>
<h1>Mechanical Hard Disk</h1>
<p>A mechanical hard disk drive (HDD) is an electronic, non-volatile mechanical data storage device. It uses magnetic storage to store and retrieve data on the disk. During the process of reading and writing data, the disk head connected to the mechanical arm of the hard disk reads and writes bits on the surface of the disk <a href="https://draveness.me/whys-the-design-cpu-and-disk//#fn:4">4</a>.</p>
<p>Because the disk has a complex mechanical structure, reading and writing data on the disk takes a lot of time. The read and write performance of databases also depends on the performance of the disk. If we randomly query a piece of data in a database using a mechanical hard disk, it may trigger random I/O on the disk. However, it requires a significant cost to read data from the disk into memory. Loading data from a regular disk (non-SSD) involves processes such as queueing, seeking, rotating, and transferring data, which takes about 10 ms.</p>
<p>When estimating the query performance of a database, we can use the order of magnitude of 10 ms to estimate the time occupied by random I/O. It is worth mentioning that random I/O has a significant impact on the query performance of databases. On the other hand, reading data sequentially from a disk can achieve a speed of up to 40 MB/s, which is several orders of magnitude faster. Therefore, we should try to minimize the number of random I/O operations in order to improve performance.</p>
<p>A solid-state drive (SSD) is a computer storage device that uses flash memory as persistent storage. Unlike mechanical hard disks, SSDs do not contain any mechanical structures. When we read or write data using an SSD, no mechanical structures are involved because everything is done by circuits. Therefore, the read and write speed of an SSD is much faster than that of an HDD.</p>
<p><img src="https://cdn-images-1.medium.com/max/800/0*Yw0ydv7zAqHbVrXZ.jpg" alt=""></p>
<p><strong>Figure 5 — HDD and SSD Prices</strong></p>
<p>Since their inception, the prices of both mechanical hard disks and SSDs have been continuously decreasing. Mechanical hard disks are the main external storage used in data centers today. Most general-purpose commercial servers use mechanical hard disks as their main external storage. However, because the read and write speed of SSDs is tens of times faster than that of mechanical hard disks, more and more servers, especially databases, use SSDs as their external storage. However, as an external storage device with mechanical structures, it is susceptible to external interference when subjected to vibration.</p>
<h1>Conclusion</h1>
<p>Hard disks are external storage devices in computers that can store large amounts of data persistently. However, the CPU cannot directly access the data on the hard disk. When a computer starts, the operating system loads the necessary data from the disk into memory for CPU access. But if the data the CPU wants to access is not in memory, it takes several thousand to several hundred thousand times longer to read the data. This is mainly due to the following two reasons:</p>
<ul>
<li>CPU needs to access data in external storage through I/O operations. The three methods of Programmed I/O, Interrupt-driven I/O, and DMA all incur additional overhead and consume a significant amount of CPU time.</li>
<li>Mechanical hard disks access the data in the disk through mechanical structures. Each random I/O operation on the hard disk requires several processes such as queueing, seeking, rotating, and transferring data, which takes about 10 ms.</li>
</ul>
<p>As mentioned in the article, a hard disk is not a necessary hardware device for computer operation. A computer can load the necessary data for startup from any external storage device such as a disk or CD-ROM into memory and start normally. However, hard disks are currently the most common external storage devices. In the end, let’s look at some open-ended questions related to the topic. Interested readers can carefully consider the following questions:</p>
<ul>
<li>Is data written to a hard disk always persistently stored without loss?</li>
<li>Why is the data in memory cleared after a power outage and restart?</li>
</ul>
<blockquote>
<p><em>If you have any questions about the content of the article or want to learn more about the reasons behind some design decisions in software engineering, you can leave a comment below the blog post. The author will reply to related questions in a timely manner and select suitable topics for future content based on them</em></p>
</blockquote>
]]></content>
      <categories>
        <category>compute</category>
      </categories>
      <tags>
        <tag>disk</tag>
      </tags>
  </entry>
  <entry>
    <title>Decrypt Go:  Understand the Three Pointers in the Go</title>
    <url>/2024/02/25/2024-02-25_Decrypt-Go--Understand-the-Three-Pointers-in-the-Go-769bea07a6b3/</url>
    <content><![CDATA[<h1>Decrypt Go: Understand the Three types of pointers in the Go</h1>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/55dd0bd25be20f4740f49df92d204682.png" alt="source: Dalle-3 generation"></p>
<p>Go language has three types of pointers. In the normal development process, we only encounter the ordinary pointer. However, in the low-level source code of the Go language, there are a lot of operations involving three types of pointer conversion and manipulation. Let’s clarify these points first.</p>
<span id="more"></span>
<p>In the C language, pointers are crucial. Although pointers make operations highly flexible and efficient, there are many security risks associated with accessing memory through pointer operations, such as accessing memory out of bounds and compromising the atomicity of types in the type system. Here are some examples of incorrect usage:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Example 1</span></span><br><span class="line"> <span class="type">int</span> arr[<span class="number">2</span>];</span><br><span class="line"> *(arr+<span class="number">2</span>) = <span class="number">1</span>;   <span class="comment">// Accessing memory address out of bounds</span></span><br><span class="line"> ​</span><br><span class="line"> <span class="comment">// Example 2</span></span><br><span class="line"> <span class="type">int</span> a = <span class="number">4</span>;</span><br><span class="line"> <span class="type">int</span>* ap = &amp;a;  <span class="comment">// Taking the starting address of variable a (4 bytes)</span></span><br><span class="line"> *(short*)ap = <span class="number">2</span>; <span class="comment">// Modifying the first 2 bytes of the 4-byte variable a directly through type casting, thus breaking the atomicity of the int variable</span></span><br><span class="line"> ​</span><br><span class="line"> <span class="comment">// The code in Example 2 may occur in certain scenarios, but it has portability issues on machines with different endianness</span></span><br></pre></td></tr></table></figure>
<p>The reason for these security risks in the C language is that it supports pointer operations and pointer type conversions. Therefore, in Go language, the most commonly used ordinary pointers, which have types, have eliminated pointer arithmetic and type conversion operations to ensure type safety. Here’s an example:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="type">int32</span> = <span class="number">10</span></span><br><span class="line"> <span class="keyword">var</span> ap *<span class="type">int32</span> = &amp;a  <span class="comment">// Ordinary pointer with type</span></span><br><span class="line"> ​</span><br><span class="line"> ap++        <span class="comment">// Illegal, pointer arithmetic is not allowed</span></span><br><span class="line"> p := (*<span class="type">int16</span>)(ap) <span class="comment">// Illegal, *int32 cannot be directly converted to *int16</span></span><br></pre></td></tr></table></figure>
<p>This ensures that pointers always point to valid addresses with allocated memory and preserves type independence and atomicity.</p>
<p>In addition to ordinary pointers, Go language also retains two other types of pointers that allow bypassing the type system and achieving the same level of memory manipulation as in C language. The other two types of pointers are:<br>
<code>unsafe.Pointer</code><br>
<code>uintptr</code></p>
<p>To understand these two, we need to establish a concept: a pointer is essentially a number that stores a memory address. The addressing space is 32 bits for a 32-bit machine and 64 bits for a 64-bit machine, so the size of a pointer is equal to the number of bits in the machine.</p>
<p><code>uintptr</code> is straightforward; it is simply a number that stores a memory address. It is equivalent to <code>uint32</code> a 32-bit machine and <code>uint64</code> on a 64-bit machine. Since it is a number, it naturally supports arithmetic operations, which allows it to represent any memory location. However, the problem is that data cannot be operated solely based on its memory address; you also need to know its size. In other words, we cannot manipulate data solely based on a <code>uintptr</code> pointer. On the other hand, an ordinary typed pointer not only provides the address but also informs the compiler about the size of the data pointed to. For example, <code>*int32</code> and <code>*int64</code> pointers tell the compiler that they operate on 4-byte and 8-byte data, respectively.</p>
<p>Now that we have explained ordinary pointers and <code>uintptr</code> pointers in Go language, what is this additional <code>unsafe.Pointer</code> compared to C language?</p>
<p><code>unsafe.Pointer</code> is a generic pointer that, like <code>uintptr</code>, only keeps the memory address without concerning itself with the type. However, the difference between <code>unsafe.Pointer</code> and <code>uintptr</code> is that the former refers to an object that will be referenced by the garbage collector (GC), so it will not be collected as garbage by the GC. In contrast, the latter only represents the memory address as a number, which means that if a data address is saved by <code>uintptr</code>, it will be mercilessly collected by the garbage collector.</p>
<p>Summary of the three types of pointers in Go language:</p>
<ul>
<li>Ordinary pointer: This does not support pointer arithmetic, saves the address and type information, and the data it points to will not be garbage collected by the GC.</li>
<li><code>unsafe.Pointer</code>: Does not support pointer arithmetic, saves the address but not the type information, and the data it points to will not be garbage collected by the GC.</li>
<li><code>uintptr</code>: Supports address arithmetic, saves the address but not the type information, and the data it points to will be garbage collected by the GC.</li>
</ul>
<p>In practical usage, <code>uintptr</code> cannot be directly converted to an ordinary pointer, and both must be first converted to <code>unsafe.Pointer</code> as an intermediate step before further conversion.</p>
<p>Here’s a simple example:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Foo <span class="keyword">struct</span>&#123;</span><br><span class="line">     a <span class="type">int32</span></span><br><span class="line">     b <span class="type">int32</span></span><br><span class="line"> &#125;</span><br><span class="line"> foo := &amp;Foo&#123;&#125;</span><br><span class="line"> bp := <span class="type">uintptr</span>(unsafe.Pointer(foo)) + <span class="number">4</span>  <span class="comment">// Add 4 to the address of foo to locate foo.b</span></span><br><span class="line"> *(*<span class="type">int32</span>)(unsafe.Pointer(bp)) = <span class="number">1</span>   <span class="comment">// Convert to *int32 ordinary pointer and modify the value</span></span><br><span class="line"> fmt.Println(foo.b)  <span class="comment">// foo.b = 1</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>A Study of Concurrency Bugs In Real-World</title>
    <url>/2024/02/04/2024-02-04_Read-the-paper--A-Study-of-Concurrency-Bugs-in-Real-World-Go/</url>
    <content><![CDATA[<p>Today I read a paper about real-world go concurrency error bugs, and here’s a transcript of what I read as a start to learning about go concurrency programming.</p>
<blockquote>
<p><a href="https://golangweekly.com/link/59972/b208593eda">Link</a></p>
</blockquote>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/3f9b7292094086961ecb0d8658528cbe.png" alt="Pasted image 20240517213857"></p>
<p>Recently, I came across a paper in one of the newsletters I subscribe to. The paper, from the University of Pennsylvania, presents the first systematic study of concurrency-related bugs in several major open-source Golang software projects. The researchers examined the commit histories of the following software: Docker, Kubernetes, etcd, gRPC, CockroachDB, and BoltDB, and drew several interesting conclusions.</p>
<h1>Research Method</h1>
<p>The focus of this study was on concurrency-related bugs. The researchers conducted their study by examining the commit histories of these projects. They searched for keywords such as “race,” “deadlock,” “synchronization,” and Golang-specific synchronization primitives like “context,” “once,” and “WaitGroup.” They identified fixes for synchronization bugs and even performed some bug replay and reproduction. The bugs were classified as either “blocking” or “non-blocking.”</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/52b66c9567ff341e8ff5a0a85387a417.png" alt="Pasted image 20240517214102"></p>
<p>Number and types of bugs in different projects</p>
<h1>Blocking Bugs</h1>
<p>Blocking bugs refer to bugs where one or more Goroutines are blocked, leading to partial or global deadlock. These bugs typically arise from circular dependencies. Here’s an example:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// goroutine 1</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">goroutine1</span><span class="params">()</span></span> &#123;</span><br><span class="line">      m.Lock()</span><br><span class="line">-     ch &lt;- request <span class="comment">// blocks</span></span><br><span class="line">+     <span class="keyword">select</span> &#123;</span><br><span class="line">+         <span class="keyword">case</span> ch &lt;- request</span><br><span class="line">+         <span class="keyword">default</span>:</span><br><span class="line">+     &#125;</span><br><span class="line">      m.Unlock()</span><br><span class="line">  &#125;<span class="comment">// goroutine 1 func goroutine1() &#123; m.Lock() - ch &lt;- request // blocks + select &#123; + case ch &lt;- request + default: + &#125; m.Unlock() goroutine 2 func goroutine2() &#123; for &#123; m.Lock() // blocks m.Unlock() request &lt;- ch &#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// goroutine 2</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">goroutine2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        m.Lock()   <span class="comment">// blocks</span></span><br><span class="line">        m.Unlock()</span><br><span class="line">        request &lt;- ch</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In the author’s study, it was found that the proportion of bugs caused by message passing was even higher than those caused by traditional mutexes. Furthermore, there are currently no mature detection methods for such bugs.</p>
<blockquote>
<p><em>Overall, we found that there are around 42% blocking bugs caused by errors in protecting shared memory, and 58% are caused by errors in message passing. Considering that shared memory primitives are used more frequently than message passing ones (Section 3.2), message passing operations are even more likely to cause blocking bugs.</em></p>
</blockquote>
<p>Personal opinion: The reasons for these issues may include the unfamiliarity with new channel synchronization primitives or the overreliance on channels, leading to a relaxed attitude towards bugs. In summary, channels are powerful, but they are not a panacea for solving all synchronization problems.</p>
<h1>Non-blocking Bugs</h1>
<p>Non-blocking bugs refer to data race issues caused by inadequate memory protection, as well as Goroutine leaks due to delayed sending or receiving on Goroutine channels, which are unique to Go.</p>
<p>Here’s an example where the original code uses select-case, resulting in the default case being unintentionally executed multiple times. The fix completely replaces the original code with Once:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// when multiple goroutines execute the following code, default // can execute multiple times, closing the channel more than once, // which leads to panic in Go runtime - select &#123; - case &lt;- c.closed: // do something - default: + Once.Do(func() &#123; close(c.closed) + &#125;) - &#125;// when multiple goroutines execute the following code, default</span><br><span class="line">// can execute multiple times, closing the channel more than once,</span><br><span class="line">// which leads to panic in Go runtime</span><br><span class="line"></span><br><span class="line">- select &#123;</span><br><span class="line">-     case &lt;- c.closed:</span><br><span class="line">          // do something</span><br><span class="line">-     default:</span><br><span class="line">+         Once.Do(func() &#123;</span><br><span class="line">              close(c.closed)</span><br><span class="line">+         &#125;)</span><br><span class="line">- &#125;</span><br></pre></td></tr></table></figure>
<p>Additionally, the paper explores different methods for modifying different types of bugs and provides recommendations for the development of future bug detection tools.</p>
<h1>Conclusions and Reflections</h1>
<ul>
<li>Go channels provide powerful concurrency patterns, but they are not a panacea. The study found that message passing can cause a higher proportion of blocking bugs. Currently, there are no well-established detection methods. Concurrency issues are inherently complex, and while language features may reduce complexity, they cannot effortlessly solve all problems through casual analysis.</li>
<li>In Go programs, synchronization of shared memory (e.g., classic lock/unlock) still accounts for a higher proportion.</li>
<li>Furthermore, misuse of channels can lead to performance issues ( <a href="https://syslog.ravelin.com/so-just-how-fast-are-channels-anyway-4c156a407e45">see this article</a>).</li>
<li>The author observes that many Go bugs exhibit similar patterns, which suggests the possibility of developing more static analysis tools dedicated to analyzing specific types of problems.</li>
<li>Personal opinion: When writing Go code, whether using synchronization locks or channels, it is advisable to keep the synchronized code concise, clear, and easy to verify and inspect in order to reduce bugs.</li>
<li>The Go compiler includes deadlock and data race detection, but it cannot detect many situations. More in-depth bug research could consider using debuggers like gdb and runtime profiling tools like pprof ( <a href="https://zhuanlan.zhihu.com/p/56430428">see this article</a> and <a href="https://golang.org/pkg/net/http/pprof/">official documentation</a>).</li>
<li>There is further discussion of this paper on HackerNews ( <a href="https://news.ycombinator.com/item?id=19280927">link</a>).</li>
<li>Commit messages are not only helpful for tracing bugs, but also for systematically analyzing historical bugs in the future. (Remember not to write “asdfasdf” in Git commit messages, kids!)</li>
</ul>
]]></content>
      <categories>
        <category>paper</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>11 Tips for Detecting and Responding to Intrusions on Linux</title>
    <url>/2024/05/10/2024-05-10_11-Tips-for-Detecting-and-Responding-to-Intrusions-on-Linux/</url>
    <content><![CDATA[<p><img src="https://images.hxzhouh.com/blog-images/2024/05/db9ed8c90e3341c2adf625afbd5ea8b0.png" alt="Generate By DELLA-3">Generate By DELLA-3</p>
<p>With the increasing popularity of open-source products, a backend engineer must be able to clearly identify whether an abnormal machine has been compromised. Based on my personal work experience, I have compiled several common scenarios of machines being hacked for reference.</p>
<blockquote>
<p><strong><em>Background</em></strong> <em>: The following scenarios are observed on CentOS systems and are similar for other Linux distributions.</em></p>
</blockquote>
<span id="more"></span>
<h3 id="1-Intruders-May-Delete-Machine-Logs">1. Intruders May Delete Machine Logs</h3>
<p>Check if log information still exists or has been cleared using the following commands:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/eb6d7948e20ca2e5613deee40d505bf2.jpg" alt="t5rdb"></p>
<h3 id="2-Intruders-May-Create-a-New-File-for-Storing-Usernames-and-Passwords">2. Intruders May Create a New File for Storing Usernames and Passwords</h3>
<p>Check <code>/etc/passwd</code> and <code>/etc/shadow</code> files for any alterations using the following commands:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/57d96bc4dfd26646223553f567be86c9.png" alt="zutpn"></p>
<h3 id="3-Intruders-May-Modify-Usernames-and-Passwords">3. Intruders May Modify Usernames and Passwords</h3>
<p>Examine the contents of <code>/etc/passwd</code> and <code>/etc/shadow</code> files for any changes using the following commands:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/206a5a3babe2a2a64d0e1f4b47120320.png" alt="4j407"></p>
<h3 id="4-Check-Recent-Successful-and-Last-Unsuccessful-Login-Events-on-the-Machine">4. Check Recent Successful and Last Unsuccessful Login Events on the Machine</h3>
<p>Refer to the log “/var/log/lastlog” using the following commands:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/b512fa0d6737c035aa1780287177c6f7.png" alt="v9cf6"></p>
<h3 id="5-Use-who-to-View-All-Currently-Logged-in-Users-on-the-Machine">5. Use <code>who</code> to View All Currently Logged-in Users on the Machine</h3>
<p>Refer to the log file “/var/run/utmp”:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/6fcc7bd1b96fab1bb6d5dbd6c9a0459a.png" alt="bpi14"></p>
<h3 id="6-Use-last-To-view-Users-Logged-in-Since-Machine-Creation">6. Use <code>last</code> To view Users Logged in Since Machine Creation</h3>
<p>Refer to the log file “/var/log/wtmp”:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/d8a528e67c28f0004f066a9feb63c8ed.png" alt="m1m69"></p>
<h3 id="7-Use-ac-to-View-Connection-Time-in-Hours-for-All-Users-on-the-Machine">7. Use <code>ac</code> to View Connection Time (in Hours) for All Users on the Machine</h3>
<p>Refer to the log file “/var/log/wtmp”:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/e0f5f25546b30c12dec7cfc59dc30776.png" alt="aa7k0"></p>
<h3 id="8-If-Abnormal-Traffic-is-Detected">8. If Abnormal Traffic is Detected</h3>
<p>Use <code>tcpdump</code> to capture network packets or <code>iperf</code> to check traffic.</p>
<h3 id="9-Review-the-var-log-secure-Log-File">9. Review the <code>/var/log/secure</code> Log File</h3>
<p>Attempt to identify information about intruders using the following commands:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/90f84dd4a382230d881ce8bd5ce8d073.png" alt="bv4nh"></p>
<h3 id="10-Identify-Scripts-Executed-by-Abnormal-Processes">10. Identify Scripts Executed by Abnormal Processes</h3>
<ol>
<li>1. Use the <code>top</code> command to view the PID of abnormal processes:</li>
</ol>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/6a68a473ba76f9f22683e650be207c17.png" alt="4aiu7"></p>
<ol>
<li>1. Search for the executable file of the process in the virtual file system directory:</li>
</ol>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/19288c7a155ac9235834ab971109166c.png" alt="2f0vv"></p>
<h3 id="11-File-Recovery-After-Confirming-Intrusion-and-Deletion-of-Important-Files">11. File Recovery After Confirming Intrusion and Deletion of Important Files</h3>
<ol>
<li>When a process opens a file, even if it’s deleted, it remains on the disk as long as the process keeps it open. To recover such files, use <code>lsof</code> the <code>/proc</code> directory.</li>
<li>Most <code>lsof</code> information is stored in directories named after the process’s PID, such as <code>/proc/1234</code>, containing information for PID 1234. Each process directory contains various files providing insight into the process’s memory space, file descriptor list, symbolic links to files on disk, and other system information. <code>lsof</code> uses this and other kernel internal state information to generate its output.</li>
</ol>
<p>Using the information above, you can retrieve the data by examining <code>/proc/&lt;PID&gt;/fd/&lt;descriptor&gt;</code>.</p>
<p>For example, to recover <code>/var/log/secure</code>, follow these steps:</p>
<p>a. Check <code>/var/log/secure</code>, confirming its absence:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/00558f66ae2e3ee693c28e6d3a6e6447.png" alt="z02gs"></p>
<p>b. Use <code>lsof</code> to check if any process is currently accessing <code>/var/log/secure</code>:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/b9730ac8afdb1f047558fd360adb1c6c.png" alt="mtose"></p>
<p>c. From the information above, PID 1264 (rsyslogd) has opened the file with a file descriptor of 4. It’s marked as deleted. Therefore, you can check the corresponding information in <code>/proc/1264/fd/4</code>:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/7cb26d0bb8b0ebe300d7bcf1a8204eb9.png" alt="6u6kh"></p>
<p>d. You can recover the data by redirecting it to a file using I/O redirection:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/5c781e5701b7da6564de1599c479cb13.png" alt="nsspr"></p>
<p>e. Confirm the existence of <code>/var/log/secure</code> it again. This method is particularly useful for many applications, especially log files and databases.</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/529dd47d9993282b0fa10af537742b91.png" alt="40eal"></p>
<p>The above is the method I summarized for dealing with Linux intrusion. It can generally handle most problems. If you encounter an unresolved issue, it is best to seek advice from a professional IT operations and maintenance engineer.</p>
<p>I may not have written it completely correctly, so if you have different opinions, please leave a comment and let me know.</p>
]]></content>
      <categories>
        <category>compute</category>
      </categories>
      <tags>
        <tag>safe</tag>
      </tags>
  </entry>
  <entry>
    <title>8 Common SQL Slow Query Statements and How to Optimize Them</title>
    <url>/2024/05/11/8%20Common%20SQL%20Slow%20Query%20Statements%20and%20How%20to%20Optimize%20Them/</url>
    <content><![CDATA[<p>Thanks to Moore’s Law, computer performance has greatly improved, along with advancements in databases and various anti-pattern designs advocated by microservices. As a result, we now have fewer opportunities to write complex SQL queries. The industry (yes, even Google) has started advocating against specialized SQL optimization, as the resources saved do not outweigh the cost of employee salaries. However, as engineers, we should strive for technical excellence to become rocket scientists in our field.</p>
<span id="more"></span>
<blockquote>
<p>This article is first published in the medium MPP plan. If you are a medium user, please follow me in <a href="https://medium.hxzhouh.com/">medium</a>. Thank you very much.</p>
</blockquote>
<p>In this article, I will introduce eight common SQL slow query statements and explain how to optimize their performance. I hope this will be helpful to you.</p>
<h2 id="LIMIT-Statement">LIMIT Statement</h2>
<p>Pagination is one of the most commonly used scenarios, but it is also prone to problems. For example, for the simple statement below, a typical solution suggested by DBAs is to add a composite index on the <code>type</code>, <code>name</code>, and <code>create_time</code> fields. This way, the conditions and sorting can effectively utilize the index, resulting in a significant performance improvement.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span>   operation</span><br><span class="line"><span class="keyword">WHERE</span>  type <span class="operator">=</span> <span class="string">&#x27;SQLStats&#x27;</span></span><br><span class="line">       <span class="keyword">AND</span> name <span class="operator">=</span> <span class="string">&#x27;SlowLog&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span>  <span class="keyword">BY</span> create_time</span><br><span class="line">LIMIT  <span class="number">1000</span>, <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<p>Okay, this might solve the problem for over 90% of DBAs. However, when the LIMIT clause becomes “LIMIT 1000000, 10”, programmers still complain, “Why is it slow when I’m only fetching 10 records?” You see, the database doesn’t know where the 1,000,000th record starts, so even with an index, it still needs to calculate from the beginning. In most cases, this performance issue is caused by lazy programming.</p>
<p>In scenarios such as frontend data browsing or exporting large data in batches, you can use the maximum value of the previous page as a parameter for querying. The SQL can be redesigned as follows:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>   <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span>     operation</span><br><span class="line"><span class="keyword">WHERE</span>    type <span class="operator">=</span> <span class="string">&#x27;SQLStats&#x27;</span></span><br><span class="line"><span class="keyword">AND</span>      name <span class="operator">=</span> <span class="string">&#x27;SlowLog&#x27;</span></span><br><span class="line"><span class="keyword">AND</span>      create_time <span class="operator">&gt;</span> <span class="string">&#x27;2017-03-16 14:00:00&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> create_time</span><br><span class="line">LIMIT    <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<p>With this new design, the query time remains constant and does not change with the increasing data volume.</p>
<h2 id="Implicit-Conversion">Implicit Conversion</h2>
<p>Another common mistake in SQL statements is when the types of query variables and field definitions do not match. Take the following statement as an example:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">explain extended SELECT *</span></span><br><span class="line">     &gt; FROM   my_balance b</span><br><span class="line">     &gt; WHERE  b.bpn = 14000000123</span><br><span class="line">     &gt;       AND b.isverified IS NULL ;</span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">show warnings;</span></span><br><span class="line">| Warning | 1739 | Cannot use ref access on index &#x27;bpn&#x27; due to type or collation conversion on field &#x27;bpn&#x27;</span><br></pre></td></tr></table></figure>
<p>In this case, the field <code>bpn</code> is defined as <code>varchar(20)</code>, and MySQL’s strategy is to convert the string to a number before comparing. This causes the function to be applied to the table field, rendering the index ineffective.</p>
<p>Such cases may be caused by parameters automatically filled in by the application framework, rather than the programmer’s intention. Nowadays, application frameworks are often complex, and while they provide convenience, they can also create pitfalls.</p>
<h2 id="Join-Updates-and-Deletions">Join Updates and Deletions</h2>
<p>Although MySQL 5.6 introduced materialization, it only optimizes SELECT statements. For UPDATE or DELETE statements, you need to manually rewrite them using JOIN.</p>
<p>For example, consider the following UPDATE statement. MySQL actually performs a loop/nested subquery (DEPENDENT SUBQUERY), and you can imagine the execution time.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> operation o</span><br><span class="line"><span class="keyword">SET</span>    status <span class="operator">=</span> <span class="string">&#x27;applying&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span>  o.id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> id</span><br><span class="line">                <span class="keyword">FROM</span>   (<span class="keyword">SELECT</span> o.id,</span><br><span class="line">                               o.status</span><br><span class="line">                        <span class="keyword">FROM</span>   operation o</span><br><span class="line">                        <span class="keyword">WHERE</span>  o.group <span class="operator">=</span> <span class="number">123</span></span><br><span class="line">                               <span class="keyword">AND</span> o.status <span class="keyword">NOT</span> <span class="keyword">IN</span> ( <span class="string">&#x27;done&#x27;</span> )</span><br><span class="line">                        <span class="keyword">ORDER</span>  <span class="keyword">BY</span> o.parent,</span><br><span class="line">                                  o.id</span><br><span class="line">                        LIMIT  <span class="number">1</span>) t);</span><br></pre></td></tr></table></figure>
<p>The execution plan is as follows:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----+--------------------+-------+-------+---------------+---------+---------+-------+------+-----------------------------------------------------+</span><br><span class="line">| <span class="built_in">id</span> | select_type        | table | <span class="built_in">type</span>  | possible_keys | key     | key_len | ref   | rows | Extra                                               |</span><br><span class="line">+----+--------------------+-------+-------+---------------+---------+---------+-------+------+-----------------------------------------------------+</span><br><span class="line">| 1  | PRIMARY            | o     | index |               | PRIMARY | 8       |       | 24   | Using <span class="built_in">where</span>; Using temporary                        |</span><br><span class="line">| 2  | DEPENDENT SUBQUERY |       |       |               |         |         |       |      | Impossible WHERE noticed after reading const tables |</span><br><span class="line">| 3  | DERIVED            | o     | ref   | idx_2,idx_5   | idx_5   | 8       | const | 1    | Using <span class="built_in">where</span>; Using filesort                         |</span><br><span class="line">+----+--------------------+-------+-------+---------------+---------+---------+-------+------+-----------------------------------------------------+</span><br></pre></td></tr></table></figure>
<p>After rewriting it as a JOIN, the subquery’s select type changes from DEPENDENT SUBQUERY to DERIVED, significantly speeding up the execution time from 7 seconds to 2 milliseconds.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> operation o</span><br><span class="line">       <span class="keyword">JOIN</span>  (<span class="keyword">SELECT</span> o.id,</span><br><span class="line">                            o.status</span><br><span class="line">                     <span class="keyword">FROM</span>   operation o</span><br><span class="line">                     <span class="keyword">WHERE</span>  o.group <span class="operator">=</span> <span class="number">123</span></span><br><span class="line">                            <span class="keyword">AND</span> o.status <span class="keyword">NOT</span> <span class="keyword">IN</span> ( <span class="string">&#x27;done&#x27;</span> )</span><br><span class="line">                     <span class="keyword">ORDER</span>  <span class="keyword">BY</span> o.parent,</span><br><span class="line">                               o.id</span><br><span class="line">                     LIMIT  <span class="number">1</span>) t</span><br><span class="line">         <span class="keyword">ON</span> o.id <span class="operator">=</span> t.id</span><br><span class="line"><span class="keyword">SET</span>    status <span class="operator">=</span> <span class="string">&#x27;applying&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>The simplified execution plan is as follows:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----+-------------+-------+------+---------------+-------+---------+-------+------+-----------------------------------------------------+</span><br><span class="line">| <span class="built_in">id</span> | select_type | table | <span class="built_in">type</span> | possible_keys | key   | key_len | ref   | rows | Extra                                               |</span><br><span class="line">+----+-------------+-------+------+---------------+-------+---------+-------+------+-----------------------------------------------------+</span><br><span class="line">| 1  | PRIMARY     |       |      |               |       |         |       |      | Impossible WHERE noticed after reading const tables |</span><br><span class="line">| 2  | DERIVED     | o     | ref  | idx_2,idx_5   | idx_5 | 8       | const | 1    | Using <span class="built_in">where</span>; Using filesort                         |</span><br><span class="line">+----+-------------+-------+------+---------------+-------+---------+-------+------+-----------------------------------------------------+</span><br></pre></td></tr></table></figure>
<h2 id="Mixed-Sorting">Mixed Sorting</h2>
<p>MySQL cannot utilize indexes for mixed sorting. However, in certain scenarios, there are still opportunities to improve performance using special methods.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span>   my_order o</span><br><span class="line">       <span class="keyword">INNER</span> <span class="keyword">JOIN</span> my_appraise a <span class="keyword">ON</span> a.orderid <span class="operator">=</span> o.id</span><br><span class="line"><span class="keyword">ORDER</span>  <span class="keyword">BY</span> a.is_reply <span class="keyword">ASC</span>,</span><br><span class="line">          a.appraise_time <span class="keyword">DESC</span></span><br><span class="line">LIMIT  <span class="number">0</span>, <span class="number">20</span>;</span><br></pre></td></tr></table></figure>
<p>The execution plan shows a full table scan:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----+-------------+-------+--------+-------------+---------+---------+---------------+---------+-+</span><br><span class="line">| <span class="built_in">id</span> | select_type | table | <span class="built_in">type</span>   | possible_keys     | key     | key_len | ref      | rows    | Extra</span><br><span class="line">+----+-------------+-------+--------+-------------+---------+---------+---------------+---------+-+</span><br><span class="line">|  1 | SIMPLE      | a     | ALL    | idx_orderid | NULL    | NULL    | NULL    | 1967647 | Using filesort |</span><br><span class="line">|  1 | SIMPLE      | o     | eq_ref | PRIMARY     | PRIMARY | 122     | a.orderid |       1 | NULL           |</span><br><span class="line">+----+-------------+-------+--------+---------+---------+---------+-----------------+---------+-+</span><br></pre></td></tr></table></figure>
<p>Since <code>is_reply</code> only has two states, 0 and 1, we can rewrite it as follows, reducing the execution time from 1.58 seconds to 2 milliseconds:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span>   ((<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">         <span class="keyword">FROM</span>   my_order o</span><br><span class="line">                <span class="keyword">INNER</span> <span class="keyword">JOIN</span> my_appraise a</span><br><span class="line">                        <span class="keyword">ON</span> a.orderid <span class="operator">=</span> o.id</span><br><span class="line">                           <span class="keyword">AND</span> is_reply <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">         <span class="keyword">ORDER</span>  <span class="keyword">BY</span> appraise_time <span class="keyword">DESC</span></span><br><span class="line">         LIMIT  <span class="number">0</span>, <span class="number">20</span>)</span><br><span class="line">        <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">        (<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">         <span class="keyword">FROM</span>   my_order o</span><br><span class="line">                <span class="keyword">INNER</span> <span class="keyword">JOIN</span> my_appraise a</span><br><span class="line">                        <span class="keyword">ON</span> a.orderid <span class="operator">=</span> o.id</span><br><span class="line">                           <span class="keyword">AND</span> is_reply <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">         <span class="keyword">ORDER</span>  <span class="keyword">BY</span> appraise_time <span class="keyword">DESC</span></span><br><span class="line">         LIMIT  <span class="number">0</span>, <span class="number">20</span>)) t</span><br><span class="line"><span class="keyword">ORDER</span>  <span class="keyword">BY</span>  is_reply <span class="keyword">ASC</span>,</span><br><span class="line">          appraisetime <span class="keyword">DESC</span></span><br><span class="line">LIMIT  <span class="number">20</span>;</span><br></pre></td></tr></table></figure>
<h2 id="EXISTS-Statement">EXISTS Statement</h2>
<p>When dealing with EXISTS clauses, MySQL still uses nested subqueries for execution. Take the following SQL statement as an example:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span>   my_neighbor n</span><br><span class="line">       <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> my_neighbor_apply sra</span><br><span class="line">              <span class="keyword">ON</span> n.id <span class="operator">=</span> sra.neighbor_id</span><br><span class="line">                 <span class="keyword">AND</span> sra.user_id <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span>  n.topic_status <span class="operator">&lt;</span> <span class="number">4</span></span><br><span class="line">       <span class="keyword">AND</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> <span class="number">1</span></span><br><span class="line">                  <span class="keyword">FROM</span>   message_info m</span><br><span class="line">                  <span class="keyword">WHERE</span>  n.id <span class="operator">=</span> m.neighbor_id</span><br><span class="line">                         <span class="keyword">AND</span> m.inuser <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line">       <span class="keyword">AND</span> n.topic_type <span class="operator">&lt;&gt;</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----+--------------------+-------+------+-----+------------------------------------------+---------+-------+---------+ -----+</span><br><span class="line">| <span class="built_in">id</span> | select_type        | table | <span class="built_in">type</span> | possible_keys | key     | key_len | ref      | rows    | Extra</span><br><span class="line">+----+--------------------+-------+------+ -----+------------------------------------------+---------+-------+---------+ -----+</span><br><span class="line">|  1 | PRIMARY            | n     | ALL  |  | NULL     | NULL    | NULL    | 1086041 | Using <span class="built_in">where</span>                   |</span><br><span class="line">|  1 | PRIMARY            | sra   | ref  |  | idx_user_id | 123     | const |       1 | Using <span class="built_in">where</span>          |</span><br><span class="line">|  2 | DEPENDENT SUBQUERY | m     | ref  |  | idx_message_info   | 122     | const |       1 | Using index condition; Using <span class="built_in">where</span> |</span><br><span class="line">+----+--------------------+-------+------+ -----+------------------------------------------+---------+-------+---------+ -----+</span><br></pre></td></tr></table></figure>
<p>By removing the EXISTS clause and changing it to a JOIN, we can avoid nested subqueries and reduce the execution time from 1.93 seconds to 1 millisecond.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span>   my_neighbor n</span><br><span class="line">       <span class="keyword">INNER</span> <span class="keyword">JOIN</span> message_info m</span><br><span class="line">               <span class="keyword">ON</span> n.id <span class="operator">=</span> m.neighbor_id</span><br><span class="line">                  <span class="keyword">AND</span> m.inuser <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">       <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> my_neighbor_apply sra</span><br><span class="line">              <span class="keyword">ON</span> n.id <span class="operator">=</span> sra.neighbor_id</span><br><span class="line">                 <span class="keyword">AND</span> sra.user_id <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span>  n.topic_status <span class="operator">&lt;</span> <span class="number">4</span></span><br><span class="line">       <span class="keyword">AND</span> n.topic_type <span class="operator">&lt;&gt;</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure>
<p>The new execution plan is as follows:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----+-------------+-------+--------+ -----+------------------------------------------+---------+ -----+------+ -----+</span><br><span class="line">| <span class="built_in">id</span> | select_type | table | <span class="built_in">type</span>   | possible_keys | key   | key_len | ref   | rows | Extra |</span><br><span class="line">+----+-------------+-------+--------+ -----+------------------------------------------+---------+ -----+------+ -----+</span><br><span class="line">|  1 | SIMPLE      | m     | ref    | | idx_message_info   | 122     | const |    1 | Using index condition |</span><br><span class="line">|  1 | SIMPLE      | n     | eq_ref | | PRIMARY   | 122     | ighbor_id |    1 | Using <span class="built_in">where</span>      |</span><br><span class="line">|  1 | SIMPLE      | sra   | ref    | | idx_user_id | 123     | const |    1 | Using <span class="built_in">where</span>           |</span><br><span class="line">+----+-------------+-------+--------+ -----+------------------------------------------+---------+ -----+------+ -----+</span><br></pre></td></tr></table></figure>
<h2 id="Condition-Pushdown">Condition Pushdown</h2>
<p>There are cases where external query conditions cannot be pushed down to complex views or subqueries:</p>
<ol>
<li>Aggregated subqueries</li>
<li>Subqueries with LIMIT</li>
<li>UNION or UNION ALL subqueries</li>
<li>Subqueries in output fields</li>
</ol>
<p>Consider the following statement, where the condition affects the aggregated subquery:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span>   (<span class="keyword">SELECT</span> target,</span><br><span class="line">               <span class="built_in">Count</span>(<span class="operator">*</span>)</span><br><span class="line">        <span class="keyword">FROM</span>   operation</span><br><span class="line">        <span class="keyword">GROUP</span>  <span class="keyword">BY</span> target) t</span><br><span class="line"><span class="keyword">WHERE</span>  target <span class="operator">=</span> <span class="string">&#x27;rm-xxxx&#x27;</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----+-------------+------------+-------+---------------+-------------+---------+-------+------+-------------+</span><br><span class="line">| <span class="built_in">id</span> | select_type | table      | <span class="built_in">type</span>  | possible_keys | key         | key_len | ref   | rows | Extra       |</span><br><span class="line">+----+-------------+------------+-------+---------------+-------------+---------+-------+------+-------------+</span><br><span class="line">|  1 | PRIMARY     | n          | ALL   | NULL          | NULL        | NULL    | NULL  | 1086041 | Using <span class="built_in">where</span> |</span><br><span class="line">|  1 | PRIMARY     | sra        | ref   | NULL          | idx_user_id | 123     | const |    1 | Using <span class="built_in">where</span> |</span><br><span class="line">|  2 | DEPENDENT SUBQUERY | m | ref   | NULL          | idx_message_info   | 122     | const |    1 | Using index condition; Using <span class="built_in">where</span> |</span><br><span class="line">+----+-------------+------------+-------+---------------+-------------+---------+-------+------+-------------+</span><br></pre></td></tr></table></figure>
<p>By removing the EXISTS clause and changing it to a JOIN, we can avoid nested subqueries and reduce the execution time from 1.93 seconds to 1 millisecond.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span>   my_neighbor n</span><br><span class="line">       <span class="keyword">INNER</span> <span class="keyword">JOIN</span> message_info m</span><br><span class="line">               <span class="keyword">ON</span> n.id <span class="operator">=</span> m.neighbor_id</span><br><span class="line">                  <span class="keyword">AND</span> m.inuser <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">       <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> my_neighbor_apply sra</span><br><span class="line">              <span class="keyword">ON</span> n.id <span class="operator">=</span> sra.neighbor_id</span><br><span class="line">                 <span class="keyword">AND</span> sra.user_id <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span>  n.topic_status <span class="operator">&lt;</span> <span class="number">4</span></span><br><span class="line">       <span class="keyword">AND</span> n.topic_type <span class="operator">&lt;&gt;</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure>
<p>The new execution plan is as follows:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----+-------------+-------+--------+ -----+------------------------------------------+---------+ -----+------+ -----+</span><br><span class="line">| <span class="built_in">id</span> | select_type | table | <span class="built_in">type</span>   | possible_keys | key   | key_len | ref   | rows | Extra |</span><br><span class="line">+----+-------------+-------+--------+ -----+------------------------------------------+---------+ -----+------+ -----+</span><br><span class="line">|  1 | SIMPLE      | m     | ref    | | idx_message_info   | 122     | const |    1 | Using index condition |</span><br><span class="line">|  1 | SIMPLE      | n     | eq_ref | | PRIMARY   | 122     | ighbor_id |    1 | Using <span class="built_in">where</span>      |</span><br><span class="line">|  1 | SIMPLE      | sra   | ref    | | idx_user_id | 123     | const |    1 | Using <span class="built_in">where</span>           |</span><br><span class="line">+----+-------------+-------+--------+ -----+------------------------------------------+---------+ -----+------+ -----+</span><br></pre></td></tr></table></figure>
<h2 id="Narrowing-the-Scope-in-Advance">Narrowing the Scope in Advance</h2>
<p>Let’s take a look at the following partially optimized example (main table in the left join acts as a primary query condition):</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>    a.<span class="operator">*</span>,</span><br><span class="line">          c.allocated</span><br><span class="line"><span class="keyword">FROM</span>      (</span><br><span class="line">              <span class="keyword">SELECT</span>   resourceid</span><br><span class="line">              <span class="keyword">FROM</span>     my_distribute d</span><br><span class="line">                   <span class="keyword">WHERE</span>    isdelete <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">                   <span class="keyword">AND</span>      cusmanagercode <span class="operator">=</span> <span class="string">&#x27;1234567&#x27;</span></span><br><span class="line">                   <span class="keyword">ORDER</span> <span class="keyword">BY</span> salecode limit <span class="number">20</span>) a</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">          (</span><br><span class="line">              <span class="keyword">SELECT</span>   resourcesid， <span class="built_in">sum</span>(ifnull(allocation, <span class="number">0</span>) <span class="operator">*</span> <span class="number">12345</span>) allocated</span><br><span class="line">              <span class="keyword">FROM</span>     my_resources</span><br><span class="line">                   <span class="keyword">GROUP</span> <span class="keyword">BY</span> resourcesid) c</span><br><span class="line"><span class="keyword">ON</span>        a.resourceid <span class="operator">=</span> c.resourcesid;</span><br></pre></td></tr></table></figure>
<p>Does this statement still have other issues? It is clear that subquery c is an aggregate query on the entire table, which can cause performance degradation when dealing with a large number of tables.</p>
<p>In fact, for subquery c, the left join result set only cares about the data that can be matched with the primary table’s <code>resourceid</code>. Therefore, we can rewrite the statement as follows, reducing the execution time from 2 seconds to 2 milliseconds:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>    a.<span class="operator">*</span>,</span><br><span class="line">          c.allocated</span><br><span class="line"><span class="keyword">FROM</span>      (</span><br><span class="line">                   <span class="keyword">SELECT</span>   resourceid</span><br><span class="line">                   <span class="keyword">FROM</span>     my_distribute d</span><br><span class="line">                   <span class="keyword">WHERE</span>    isdelete <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">                   <span class="keyword">AND</span>      cusmanagercode <span class="operator">=</span> <span class="string">&#x27;1234567&#x27;</span></span><br><span class="line">                   <span class="keyword">ORDER</span> <span class="keyword">BY</span> salecode limit <span class="number">20</span>) a</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">          (</span><br><span class="line">                   <span class="keyword">SELECT</span>   resourcesid， <span class="built_in">sum</span>(ifnull(allocation, <span class="number">0</span>) <span class="operator">*</span> <span class="number">12345</span>) allocated</span><br><span class="line">                   <span class="keyword">FROM</span>     my_resources r,</span><br><span class="line">                            (</span><br><span class="line">                                     <span class="keyword">SELECT</span>   resourceid</span><br><span class="line">                                     <span class="keyword">FROM</span>     my_distribute d</span><br><span class="line">                                     <span class="keyword">WHERE</span>    isdelete <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">                                     <span class="keyword">AND</span>      cusmanagercode <span class="operator">=</span> <span class="string">&#x27;1234567&#x27;</span></span><br><span class="line">                                     <span class="keyword">ORDER</span> <span class="keyword">BY</span> salecode limit <span class="number">20</span>) a</span><br><span class="line">                   <span class="keyword">WHERE</span>    r.resourcesid <span class="operator">=</span> a.resourcesid</span><br><span class="line">                   <span class="keyword">GROUP</span> <span class="keyword">BY</span> resourcesid) c</span><br><span class="line"><span class="keyword">ON</span>        a.resourceid <span class="operator">=</span> c.resourcesid;</span><br></pre></td></tr></table></figure>
<p>However, the subquery <code>a</code> appears multiple times in our SQL statement. This approach not only incurs additional costs but also makes the statement more complex. We can simplify it using the WITH statement:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WITH</span> a <span class="keyword">AS</span></span><br><span class="line">(</span><br><span class="line">         <span class="keyword">SELECT</span>   resourceid</span><br><span class="line">         <span class="keyword">FROM</span>     my_distribute d</span><br><span class="line">         <span class="keyword">WHERE</span>    isdelete <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">         <span class="keyword">AND</span>      cusmanagercode <span class="operator">=</span> <span class="string">&#x27;1234567&#x27;</span></span><br><span class="line">         <span class="keyword">ORDER</span> <span class="keyword">BY</span> salecode limit <span class="number">20</span>)</span><br><span class="line"><span class="keyword">SELECT</span>    a.<span class="operator">*</span>,</span><br><span class="line">          c.allocated</span><br><span class="line"><span class="keyword">FROM</span>      a</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">          (</span><br><span class="line">                   <span class="keyword">SELECT</span>   resourcesid， <span class="built_in">sum</span>(ifnull(allocation, <span class="number">0</span>) <span class="operator">*</span> <span class="number">12345</span>) allocated</span><br><span class="line">                   <span class="keyword">FROM</span>     my_resources r,</span><br><span class="line">                            a</span><br><span class="line">                   <span class="keyword">WHERE</span>    r.resourcesid <span class="operator">=</span> a.resourcesid</span><br><span class="line">                   <span class="keyword">GROUP</span> <span class="keyword">BY</span> resourcesid) c</span><br><span class="line"><span class="keyword">ON</span>        a.resourceid <span class="operator">=</span> c.resourcesid;</span><br></pre></td></tr></table></figure>
<h2 id="Conclusion">Conclusion</h2>
<p>The database compiler generates execution plans that determine how SQL statements are actually executed. However, compilers can only do their best to serve, and no database compiler is perfect. The scenarios mentioned above also exist in other databases. Understanding the characteristics of the database compiler allows us to work around its limitations and write high-performance SQL statements.</p>
<p>When designing data models and writing SQL statements, it is important to bring algorithmic thinking or awareness into the process. Developing the habit of using the WITH statement when writing complex SQL statements can simplify them and reduce the burden on the database.</p>
<p>Finally, here is the execution order of SQL statements:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span></span><br><span class="line"><span class="operator">&lt;</span>left_table<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ON</span></span><br><span class="line"><span class="operator">&lt;</span>join_condition<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&lt;</span>join_type<span class="operator">&gt;</span></span><br><span class="line"> <span class="keyword">JOIN</span></span><br><span class="line"><span class="operator">&lt;</span>right_table<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"><span class="operator">&lt;</span>where_condition<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line"><span class="operator">&lt;</span>group_by_list<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line"><span class="operator">&lt;</span>having_condition<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DISTINCT</span></span><br><span class="line"><span class="operator">&lt;</span>select_list<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line"><span class="operator">&lt;</span>order_by_condition<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line">LIMIT</span><br><span class="line"><span class="operator">&lt;</span>limit_number<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>db</tag>
      </tags>
  </entry>
  <entry>
    <title>Go - Ordering in Select Statements</title>
    <url>/2020/04/29/Go%20-%20Ordering%20in%20Select%20Statements/</url>
    <content><![CDATA[<p><a href="https://medium.com/a-journey-with-go/go-ordering-in-select-statements-fd0ff80fd8d6">原文链接</a></p>
<p><a href="https://medium.com/@blanchon.vincent?source=post_page-----fd0ff80fd8d6----------------------">Vincent Blanchon</a></p>
<hr>
<p><img src="https://blog-image-1253555052.cos.ap-guangzhou.myqcloud.com/20200429220520.png" alt=""></p>
<blockquote>
<p>本文基于 go 1.14</p>
</blockquote>
<p><code>select</code> 允许在一个goroutine中管理多个channel。但是，当所有channel同时就绪的时候，go需要在其中选择一个执行。go还需要处理没有channel就绪的情况，我们先从就绪的channel开始。</p>
<span id="more"></span>
<h1>Order</h1>
<p><code>select</code> 不会按照任何规则或者优先级选择到达的channel。go标准库在每次访问的时候，都会将他们顺序打乱，也就是说不能保证任何顺序。</p>
<p>看一个有三个就绪的channel的例子：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>, <span class="number">100</span>)</span><br><span class="line">	b := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>, <span class="number">100</span>)</span><br><span class="line">	c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>, <span class="number">100</span>)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		a &lt;- <span class="literal">true</span></span><br><span class="line">		b &lt;- <span class="literal">true</span></span><br><span class="line">		c &lt;- <span class="literal">true</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> &lt;-a:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;&lt; a&quot;</span>)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> &lt;-b:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;&lt; b&quot;</span>)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> &lt;-c:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;&lt; c&quot;</span>)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;&lt; default&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这三个channel都有三个完整的buffer（不会阻塞），下面是程序的输出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt; b&lt; a&lt; a&lt; b&lt; c&lt; c&lt; c&lt; a&lt; b&lt; b</span><br></pre></td></tr></table></figure>
<p>在 select 的每次迭代中，case 都会被打乱：<br>
![[Pasted image 20240517215906.png]]</p>
<p>由于go 不会删除重复的channel，所以可以使用多次添加case来影响结果，代码如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   a := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>, <span class="number">100</span>)</span><br><span class="line">   b := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>, <span class="number">100</span>)</span><br><span class="line">   c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>, <span class="number">100</span>)</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">      a &lt;- <span class="literal">true</span></span><br><span class="line">      b &lt;- <span class="literal">true</span></span><br><span class="line">      c &lt;- <span class="literal">true</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">      <span class="keyword">select</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> &lt;-a:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;&lt; a&quot;</span>)</span><br><span class="line">      <span class="keyword">case</span> &lt;-a:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;&lt; a&quot;</span>)</span><br><span class="line">      <span class="keyword">case</span> &lt;-a:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;&lt; a&quot;</span>)</span><br><span class="line">      <span class="keyword">case</span> &lt;-a:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;&lt; a&quot;</span>)</span><br><span class="line">      <span class="keyword">case</span> &lt;-a:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;&lt; a&quot;</span>)</span><br><span class="line">      <span class="keyword">case</span> &lt;-a:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;&lt; a&quot;</span>)</span><br><span class="line">      <span class="keyword">case</span> &lt;-a:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;&lt; a&quot;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> &lt;-b:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;&lt; b&quot;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> &lt;-c:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;&lt; c&quot;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;&lt; default&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出的结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt; c&lt; a&lt; b&lt; a&lt; b&lt; a&lt; a&lt; c&lt; a&lt; a</span><br></pre></td></tr></table></figure>
<p>当所有channel同时准备就绪时，有80％的机会选择通道a。下面来看一下channel未就绪的情况。</p>
<h1>Non-ready channels</h1>
<p><code>select</code> 运行时，如果没有一个case channel就绪，那么他就会运行<code>default:</code>,如果 <code>select</code>中没有写default，那么他就进入等待状态，如下面这个例子</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   a := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>, <span class="number">100</span>)</span><br><span class="line">   b := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>, <span class="number">100</span>)</span><br><span class="line">   <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">      time.Sleep(time.Minute)</span><br><span class="line">      <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">         a &lt;- <span class="literal">true</span></span><br><span class="line">         b &lt;- <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;()</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">      <span class="keyword">select</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> &lt;-a:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;&lt; a&quot;</span>)</span><br><span class="line">      <span class="keyword">case</span> &lt;-b:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;&lt; b&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面那个例子中，将在一分钟后打印结果。<code>select</code>阻塞在 channel上。这种情况下，处理<code>select</code>的函数将会订阅所有channel并且等待，下面是一个goroutine#7在select中等待的示例，其中另一个goroutine#4也在等待channel：</p>
<p><img src="https://blog-image-1253555052.cos.ap-guangzhou.myqcloud.com/20200429225528.png" alt=""></p>
<p>Goroutine(G7)订阅所有频道并在列表末尾等待。 如果channel发送了一条消息，channel将通知已在等待该消息的另一个Goroutine。一旦收到通知，<code>select </code>将取消订阅所有channel，并且返回到代码运行.</p>
<p>更多关于channel与等待队列的信息，请查看作者另外一篇文章<a href="https://medium.com/a-journey-with-go/go-buffered-and-unbuffered-channels-29a107c00268"><em>Go: Buffered and Unbuffered Channels</em></a><em>.</em></p>
<p>上面介绍的逻辑，都是针对于有两个或者以上的活动的channel，实际上如果只有一个活动的channel，go乐意简化select</p>
<h1>Simplification</h1>
<p>如果只有一个case 加上一个default，例子：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   t:= time.NewTicker(time.Second)</span><br><span class="line">   <span class="keyword">for</span>   &#123;</span><br><span class="line">      <span class="keyword">select</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> &lt;-t.C:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;1 second &quot;</span>)</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;default branch&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种情况下。Go会以非阻塞模式读取channel的操作替换select语句。如果channel在缓冲区中没有任何值，或者发送方准备发送消息，将会运行default。就像下面这张图</p>
<p><img src="https://blog-image-1253555052.cos.ap-guangzhou.myqcloud.com/20200429231908.png" alt=""></p>
<p>如果没有default，则 Go 通过阻塞channel操作重写 select 语句。</p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>底层</tag>
      </tags>
  </entry>
  <entry>
    <title>Decryption go: understand go language pointer</title>
    <url>/2024/04/23/Decryption%20go%EF%BC%9A%20understand%20go%20language%20pointer_%20english/</url>
    <content><![CDATA[<blockquote>
<p>This article is first published in the medium MPP plan. If you are a medium user, please follow me in <a href="https://medium.hxzhouh.com/">medium</a>. Thank you very much.</p>
</blockquote>
<p>Go language has three types of pointers. In the normal development process, we only encounter the ordinary pointer. However, in the low-level source code of Go language, there are a lot of operations involving three types of pointer conversion and manipulation. Let’s clarify these points first.</p>
<span id="more"></span>
<p>In the C language, pointers are crucial. Although pointers make operations highly flexible and efficient, there are many security risks associated with accessing memory through pointer operations, such as accessing memory out of bounds and compromising the atomicity of types in the type system. Here are some examples of incorrect usage:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Example 1</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">2</span>];</span><br><span class="line">*(arr+<span class="number">2</span>) = <span class="number">1</span>;		<span class="comment">// Accessing memory address out of bounds</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Example 2</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">4</span>;	</span><br><span class="line"><span class="type">int</span>* ap = &amp;a;	 <span class="comment">// Taking the starting address of variable a (4 bytes)</span></span><br><span class="line">*(<span class="type">short</span>*)ap = <span class="number">2</span>; <span class="comment">// Modifying the first 2 bytes of the 4-byte variable a directly through type casting, thus breaking the atomicity of the int variable</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The code in Example 2 may occur in certain scenarios, but it has portability issues on machines with different endianness</span></span><br></pre></td></tr></table></figure>
<p>The reason for these security risks in the C language is that it supports pointer operations and pointer type conversions. Therefore, in Go language, the most commonly used ordinary pointers, which have types, have eliminated pointer arithmetic and type conversion operations to ensure type safety. Here’s an example:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="type">int32</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> ap *<span class="type">int32</span> = &amp;a	<span class="comment">// Ordinary pointer with type</span></span><br><span class="line"></span><br><span class="line">ap++ 				<span class="comment">// Illegal, pointer arithmetic is not allowed</span></span><br><span class="line">p := (*<span class="type">int16</span>)(ap)	<span class="comment">// Illegal, *int32 cannot be directly converted to *int16</span></span><br></pre></td></tr></table></figure>
<p>This ensures that pointers always point to valid addresses with allocated memory and preserves type independence and atomicity.</p>
<p>In addition to ordinary pointers, Go language also retains two other types of pointers that allow bypassing the type system and achieving the same level of memory manipulation as in C language. The other two types of pointers are:</p>
<ul>
<li><code>unsafe.Pointer</code>.</li>
<li><code>uintptr</code>.<br>
To understand these two, we need to establish a concept: a pointer is essentially a number that stores a memory address. The addressing space is 32 bits for a 32-bit machine and 64 bits for a 64-bit machine, so the size of a pointer is equal to the number of bits in the machine.</li>
</ul>
<p><code>uintptr</code> is straightforward; it is simply a number that stores a memory address. It is equivalent to <code>uint32</code> on a 32-bit machine and <code>uint64</code> on a 64-bit machine. Since it is a number, it naturally supports arithmetic operations, which allows it to represent any memory location. However, the problem is that a data cannot be operated solely based on its memory address; you also need to know its size. In other words, we cannot manipulate data solely based on a <code>uintptr</code> pointer. On the other hand, an ordinary typed pointer not only provides the address but also informs the compiler about the size of the data pointed to. For example, <code>*int32</code> and <code>*int64</code> pointers tell the compiler that they operate on 4-byte and 8-byte data, respectively.</p>
<p>Now that we have explained ordinary pointers and <code>uintptr</code> pointers in Go language, what is this additional <code>unsafe.Pointer</code> compared to C language?</p>
<p><code>unsafe.Pointer</code> is a generic pointer that, like <code>uintptr</code>, only keeps the memory address without concerning itself with the type. However, the difference between <code>unsafe.Pointer</code> and <code>uintptr</code> is that the former refers to an object that will be referenced by the garbage collector (GC), so it will not be collected as garbage by the GC. In contrast, the latter only represents the memory address as a number, which means that if a data address is saved by <code>uintptr</code>, it will be mercilessly collected by the garbage collector.</p>
<p>Summary of the three types of pointers in Go language:</p>
<ul>
<li>Ordinary pointer: Does not support pointer arithmetic, saves the address and type information, and the data it points to will not be garbage collected by the GC.</li>
<li><code>unsafe.Pointer</code>: Does not support pointer arithmetic, saves the address but not the type information, and the data it points to will not be garbage collected by the GC.</li>
<li><code>uintptr</code>: Supports address arithmetic, saves the address but not the type information, and the data it points to will be garbage collected by the GC.</li>
</ul>
<p>In practical usage, <code>uintptr</code> cannot be directly converted to an ordinary pointer, and both must be first converted to <code>unsafe.Pointer</code> as an intermediate step before further conversion.</p>
<p>Here’s a simple example:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Foo <span class="keyword">struct</span>&#123;</span><br><span class="line">    a <span class="type">int32</span></span><br><span class="line">    b <span class="type">int32</span></span><br><span class="line">&#125;</span><br><span class="line">foo := &amp;Foo&#123;&#125;</span><br><span class="line">bp := <span class="type">uintptr</span>(unsafe.Pointer(foo)) + <span class="number">4</span>	<span class="comment">// Add 4 to the address of foo to locate foo.b</span></span><br><span class="line">*(*<span class="type">int32</span>)(unsafe.Pointer(bp)) = <span class="number">1</span>		<span class="comment">// Convert to *int32 ordinary pointer and modify the value</span></span><br><span class="line">fmt.Println(foo.b)	<span class="comment">// foo.b = 1</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go Program pattern 04: Map-Reduce</title>
    <url>/2024/04/23/Go%20Program%20pattern%2004%EF%BC%9AMap-Reduce/</url>
    <content><![CDATA[<p>Map-Reduce is a programming paradigm used for processing large-scale datasets. It helps simplify the process of parallel computation and improves computational efficiency.</p>
<span id="more"></span>
<blockquote>
<p>This article is first published in the medium MPP plan. If you are a medium user, please follow me in <a href="https://medium.hxzhouh.com/">medium</a>. Thank you very much.</p>
</blockquote>
<p>First, let’s understand the concepts of Map and Reduce.</p>
<ul>
<li>Map: In the Map phase, the input dataset is divided into a series of key-value pairs, and the same operation is applied to each key-value pair. This operation can be a function or a code block used to process each key-value pair and generate intermediate results.</li>
<li>Reduce: In the Reduce phase, the intermediate results generated in the Map phase are combined and processed to obtain the final output result. In the Reduce phase, we can aggregate, summarize, or perform other operations on intermediate results with the same key.</li>
</ul>
<p>The core idea of the Map-Reduce programming paradigm is “divide and conquer.” It allows us to break down complex computational tasks into multiple independent subtasks, process these subtasks in parallel, and then merge the results to obtain the final result.</p>
<h1>Basic Example</h1>
<p>Here is a simple example demonstrating the workflow of Map-Reduce:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MapFunction</span><span class="params">(arr []<span class="type">string</span>, fn <span class="keyword">func</span>(<span class="type">string</span>)</span></span> <span class="type">string</span>) &lt;-<span class="keyword">chan</span> <span class="type">string</span> &#123;</span><br><span class="line">	ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">for</span> _, v := <span class="keyword">range</span> arr &#123;</span><br><span class="line">			ch &lt;- fn(v)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">close</span>(ch)</span><br><span class="line">	&#125;()</span><br><span class="line">	<span class="keyword">return</span> ch</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReduceFunction</span><span class="params">(ch &lt;-<span class="keyword">chan</span> <span class="type">string</span>, fn <span class="keyword">func</span>(<span class="type">string</span>, <span class="type">string</span>)</span></span> <span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">var</span> res <span class="type">string</span></span><br><span class="line">	<span class="keyword">for</span> v := <span class="keyword">range</span> ch &#123;</span><br><span class="line">		res = fn(res, v)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// generate 10 random strings</span></span><br><span class="line">	arr := []<span class="type">string</span>&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>, <span class="string">&quot;g&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;i&quot;</span>&#125;</span><br><span class="line">	<span class="comment">// map</span></span><br><span class="line">	ch := MapFunction(arr, <span class="function"><span class="keyword">func</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> strings.ToUpper(s)</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="comment">// reduce</span></span><br><span class="line">	res := ReduceFunction(ch, <span class="function"><span class="keyword">func</span><span class="params">(s1, s2 <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> s1 + s2</span><br><span class="line">	&#125;)</span><br><span class="line">	fmt.Println(res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://go.dev/play/p/ovHjy4xoXBm">go.dev</a></p>
<p>In this example, we define a <code>MapFunction</code> that takes a string array and converts each element to uppercase using a custom function <code>fn</code>, returning a channel. The <code>ReduceFunction</code> takes a channel and a custom function <code>fn</code> to concatenate the results and print them out.</p>
<p>The following image provides a metaphor that vividly illustrates the business semantics of Map-Reduce, which is very useful in data processing.</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/01/2ffc57f0bf0517c3367cd693084e368c.png" alt="Pasted image 20240129172925"></p>
<p>You may understand that Map/Reduce is just a control logic, and the real business logic is defined by the data and the function passed to them. Yes, this is a classic programming pattern of separating “business logic” from “control logic.” Now let’s take a look at a code example with meaningful business logic to reinforce the understanding of separating “control logic” and “business logic.”</p>
<h1>Business Example</h1>
<p><strong>Employee Information</strong><br>
First, we have an employee object and some data:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Employee <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name     <span class="type">string</span></span><br><span class="line">    Age      <span class="type">int</span></span><br><span class="line">    Vacation <span class="type">int</span></span><br><span class="line">    Salary   <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list = []Employee&#123;</span><br><span class="line">    &#123;<span class="string">&quot;Hao&quot;</span>, <span class="number">44</span>, <span class="number">0</span>, <span class="number">8000</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Bob&quot;</span>, <span class="number">34</span>, <span class="number">10</span>, <span class="number">5000</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Alice&quot;</span>, <span class="number">23</span>, <span class="number">5</span>, <span class="number">9000</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Jack&quot;</span>, <span class="number">26</span>, <span class="number">0</span>, <span class="number">4000</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Tom&quot;</span>, <span class="number">48</span>, <span class="number">9</span>, <span class="number">7500</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Marry&quot;</span>, <span class="number">29</span>, <span class="number">0</span>, <span class="number">6000</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Mike&quot;</span>, <span class="number">32</span>, <span class="number">8</span>, <span class="number">4000</span>&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Related-Reduce-Filter-Functions">Related Reduce/Filter Functions</h5>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">EmployeeCountIf</span><span class="params">(list []Employee, fn <span class="keyword">func</span>(e *Employee)</span></span> <span class="type">bool</span>) <span class="type">int</span> &#123;</span><br><span class="line">    count := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, _ := <span class="keyword">range</span> list &#123;</span><br><span class="line">        <span class="keyword">if</span> fn(&amp;list[i]) &#123;</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">EmployeeFilterIn</span><span class="params">(list []Employee, fn <span class="keyword">func</span>(e *Employee)</span></span> <span class="type">bool</span>) []Employee &#123;</span><br><span class="line">    <span class="keyword">var</span> newList []Employee</span><br><span class="line">    <span class="keyword">for</span> i, _ := <span class="keyword">range</span> list &#123;</span><br><span class="line">        <span class="keyword">if</span> fn(&amp;list[i]) &#123;</span><br><span class="line">            newList = <span class="built_in">append</span>(newList, list[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newList</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">EmployeeSumIf</span><span class="params">(list []Employee, fn <span class="keyword">func</span>(e *Employee)</span></span> <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, _ := <span class="keyword">range</span> list &#123;</span><br><span class="line">        sum += fn(&amp;list[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Here’s a brief explanation:</p>
<ul>
<li><code>EmployeeCountIf</code> and <code>EmployeeSumIf</code> are used to count the number of employees or calculate the total based on a certain condition. They represent the semantics of Filter + Reduce.</li>
<li><code>EmployeeFilterIn</code> filters the employees based on a certain condition. It represents the semantics of Filter.</li>
</ul>
<p>Now we can have the following code:<br>
<strong>1) Count the number of employees over 40 years old:</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">old := EmployeeCountIf(list, <span class="function"><span class="keyword">func</span><span class="params">(e *Employee)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> e.Age &gt; <span class="number">40</span></span><br><span class="line">&#125;)</span><br><span class="line">fmt.Printf(<span class="string">&quot;Old people: %d\n&quot;</span>, old)</span><br><span class="line"><span class="comment">//Old people: 2</span></span><br></pre></td></tr></table></figure>
<p><strong>2) Count the number of employees with a salary greater than 6000:</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">highPay := EmployeeCountIf(list, <span class="function"><span class="keyword">func</span><span class="params">(e *Employee)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> e.Salary &gt;= <span class="number">6000</span></span><br><span class="line">&#125;)</span><br><span class="line">fmt.Printf(<span class="string">&quot;High Salary people: %d\n&quot;</span>, highPay)</span><br><span class="line"><span class="comment">//High Salary people: 4</span></span><br></pre></td></tr></table></figure>
<p><strong>3) List employees who have not taken any vacation:</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">noVacation := EmployeeFilterIn(list, <span class="function"><span class="keyword">func</span><span class="params">(e *Employee)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> e.Vacation == <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line">fmt.Printf(<span class="string">&quot;People with no vacation: %v\n&quot;</span>, noVacation)</span><br></pre></td></tr></table></figure>
<p>The Map-Reduce programming paradigm divides the computational task into Map and Reduce phases. Although writing single-machine code may not be faster than a simple for loop and may appear complex, in the era of cloud-native computing, we can leverage parallel computation and shared data access to improve computational efficiency. It is a powerful tool suitable for handling large-scale data and parallel computing scenarios, such as the original Google PageRank algorithm. The main purpose of learning it is to understand its mindset.</p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
  </entry>
  <entry>
    <title>Go program pattern 01: Functional Options Pattern</title>
    <url>/2024/04/23/Go%20program%20pattern%2001%EF%BC%9A%20Functional%20Options%20Pattern/</url>
    <content><![CDATA[<p>Go is not a fully object-oriented language, and some object-oriented patterns are not well-suited for it. However, over the years, Go has developed its own set of patterns. Today, I would like to introduce a common pattern: the Functional Options Pattern.</p>
<span id="more"></span>
<blockquote>
<p>This article is first published in the medium MPP plan. If you are a medium user, please follow me in <a href="https://medium.hxzhouh.com/">medium</a>. Thank you very much.</p>
</blockquote>
<h2 id="What-is-the-Functional-Options-Pattern">What is the Functional Options Pattern?</h2>
<p>Go does not have constructors like other languages. Instead, it typically uses a <code>New</code> function to act as a constructor. However, when a structure has many fields that need to be initialized, there are multiple ways to do so. One preferred way is to use the Functional Options Pattern.</p>
<p>The Functional Options Pattern is a pattern for constructing structs in Go. It involves designing a set of expressive and flexible APIs to help configure and initialize the struct.</p>
<p>The <a href="https://github.com/uber-go/guide/blob/master/style.md#functional-options">Go Language Specification</a> by Uber mentions this pattern:</p>
<blockquote>
<p>Functional options are a pattern in which you declare an opaque <code>Option</code> type that records information in some internal structure. You accept these variable numbers of options and operate on the complete information recorded by the options on the internal structure.</p>
<p>Use this pattern for optional parameters in constructors and other public APIs where you expect these parameters to be extended, especially when there are already three or more parameters on these functions.</p>
</blockquote>
<h2 id="An-Example">An Example</h2>
<p>To better understand this pattern, let’s walk through an example.<br>
Let’s define a <code>Server</code> struct:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line">    host <span class="type">string</span></span><br><span class="line">    port <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(host <span class="type">string</span>, port <span class="type">int</span>)</span></span> *Server &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Server&#123;</span><br><span class="line">        host,</span><br><span class="line">        port,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> Start() <span class="type">error</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>How do we use it?</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    svr := New(<span class="string">&quot;localhost&quot;</span>, <span class="number">1234</span>)</span><br><span class="line">    <span class="keyword">if</span> err := svr.Start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>But what if we want to extend the configuration options for the <code>Server</code>? There are generally three approaches:</p>
<ul>
<li>Declare a new constructor function for each different configuration option.</li>
<li>Define a new <code>Config</code> struct to store the configuration information.</li>
<li>Use the Functional Options Pattern.</li>
</ul>
<h3 id="Approach-1-Declare-a-new-constructor-function-for-each-different-configuration-option">Approach 1: Declare a new constructor function for each different configuration option</h3>
<p>This approach involves defining dedicated constructor functions for different options. Let’s say we added two fields to the <code>Server</code> struct:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line">    host    <span class="type">string</span></span><br><span class="line">    port    <span class="type">int</span></span><br><span class="line">    timeout time.Duration</span><br><span class="line">    maxConn <span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Typically, <code>host</code> and <code>port</code> are required fields, while <code>timeout</code> and <code>maxConn</code> are optional. We can keep the original constructor function and assign default values to these two fields:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(host <span class="type">string</span>, port <span class="type">int</span>)</span></span> *Server &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Server&#123;</span><br><span class="line">        host,</span><br><span class="line">        port,</span><br><span class="line">        time.Minute,</span><br><span class="line">        <span class="number">100</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Then, we can provide two additional constructor functions for <code>timeout</code> and <code>maxConn</code>:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewWithTimeout</span><span class="params">(host <span class="type">string</span>, port <span class="type">int</span>, timeout time.Duration)</span></span> *Server &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Server&#123;</span><br><span class="line">        host,</span><br><span class="line">        port,</span><br><span class="line">        timeout,</span><br><span class="line">        <span class="number">100</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewWithTimeoutAndMaxConn</span><span class="params">(host <span class="type">string</span>, port <span class="type">int</span>, timeout time.Duration, maxConn <span class="type">int</span>)</span></span> *Server &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Server&#123;</span><br><span class="line">        host,</span><br><span class="line">        port,</span><br><span class="line">        timeout,</span><br><span class="line">        maxConn,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This approach works well for configurations that are unlikely to change frequently. Otherwise, you would need to create new constructor functions every time you need to add a new configuration. This approach is used in the Go standard library, such as the <code>Dial</code> and <code>DialTimeout</code> functions in the <code>net</code> package:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Dial</span><span class="params">(network, address <span class="type">string</span>)</span></span> (Conn, <span class="type">error</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DialTimeout</span><span class="params">(network, address <span class="type">string</span>, timeout time.Duration)</span></span> (Conn, <span class="type">error</span>)</span><br></pre></td></tr></table></figure>
<h3 id="Approach-2-Use-a-dedicated-configuration-struct">Approach 2: Use a dedicated configuration struct</h3>
<p>This approach is also common, especially when there are many configuration options. Typically, you create a <code>Config</code> struct that contains all the configuration options for the <code>Server</code>. This approach allows for easy extension without breaking the API of the <code>Server</code>, even when adding more configuration options in the future.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line">    cfg Config</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">    Host    <span class="type">string</span></span><br><span class="line">    Port    <span class="type">int</span></span><br><span class="line">    Timeout time.Duration</span><br><span class="line">    MaxConn <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(cfg Config)</span></span> *Server &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Server&#123;</span><br><span class="line">        cfg,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>When using this approach, you need to construct a <code>Config</code> instance first, which brings us back to the original problem of configuring the <code>Server</code>. If you modify the fields in <code>Config</code>, you may need to define a constructor function for <code>Config</code> if the fields are changed to private.</p>
<h3 id="Approach-3-Use-the-Functional-Options-Pattern">Approach 3: Use the Functional Options Pattern</h3>
<p>A better solution is to use the Functional Options Pattern.</p>
<p>In this pattern, we define an <code>Option</code> function type:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Option <span class="function"><span class="keyword">func</span><span class="params">(*Server)</span></span></span><br></pre></td></tr></table></figure>
<p>The <code>Option</code> type is a function type that takes a <code>*Server</code> parameter. Then, the constructor function for <code>Server</code> accepts a variable number of <code>Option</code> types as parameters:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(options ...Option)</span></span> *Server &#123;</span><br><span class="line">    svr := &amp;Server&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> _, f := <span class="keyword">range</span> options &#123;</span><br><span class="line">        f(svr)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> svr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>How do the options work? We need to define a series of related functions that return <code>Option</code>:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithHost</span><span class="params">(host <span class="type">string</span>)</span></span> Option &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(s *Server)</span></span> &#123;</span><br><span class="line">        s.host = host</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithPort</span><span class="params">(port <span class="type">int</span>)</span></span> Option &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(s *Server)</span></span> &#123;</span><br><span class="line">        s.port = port</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithTimeout</span><span class="params">(timeout time.Duration)</span></span> Option &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(s *Server)</span></span> &#123;</span><br><span class="line">        s.timeout = timeout</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithMaxConn</span><span class="params">(maxConn <span class="type">int</span>)</span></span> Option &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(s *Server)</span></span> &#123;</span><br><span class="line">        s.maxConn = maxConn</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>To use this pattern, the client code would look like this:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;server&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    svr := New(</span><br><span class="line">        WithHost(<span class="string">&quot;localhost&quot;</span>),</span><br><span class="line">        WithPort(<span class="number">8080</span>),</span><br><span class="line">        WithTimeout(time.Minute),</span><br><span class="line">        WithMaxConn(<span class="number">120</span>),</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">if</span> err := svr.Start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Adding new options in the future only requires adding corresponding <code>WithXXX</code> functions.</p>
<p>This pattern is widely used in third-party libraries, such as <code>github.com/gocolly/colly</code>:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Collector <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCollector</span><span class="params">(options ...CollectorOption)</span></span> *Collector</span><br><span class="line"></span><br><span class="line"><span class="comment">// Defines a series of CollectorOptions</span></span><br><span class="line"><span class="keyword">type</span> CollectorOption <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AllowURLRevisit</span><span class="params">()</span></span> CollectorOption</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AllowedDomains</span><span class="params">(domains ...<span class="type">string</span>)</span></span> CollectorOption</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>However, when Uber’s Go Programming Style Guide mentions this pattern, it suggests defining an <code>Option</code> interface instead of an <code>Option</code> function type. This <code>Option</code> interface has an unexported method, and the options are recorded in an unexported <code>options</code> struct.</p>
<p>Can you understand Uber’s example?</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> options <span class="keyword">struct</span> &#123;</span><br><span class="line">    cache  <span class="type">bool</span></span><br><span class="line">    logger *zap.Logger</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Option <span class="keyword">interface</span> &#123;</span><br><span class="line">    apply(*options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> cacheOption <span class="type">bool</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c cacheOption)</span></span> apply(opts *options) &#123;</span><br><span class="line">    opts.cache = <span class="type">bool</span>(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithCache</span><span class="params">(c <span class="type">bool</span>)</span></span> Option &#123;</span><br><span class="line">    <span class="keyword">return</span> cacheOption(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> loggerOption <span class="keyword">struct</span> &#123;</span><br><span class="line">    Log *zap.Logger</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l loggerOption)</span></span> apply(opts *options) &#123;</span><br><span class="line">    opts.logger = l.Log</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithLogger</span><span class="params">(log *zap.Logger)</span></span> Option &#123;</span><br><span class="line">    <span class="keyword">return</span> loggerOption&#123;Log: log&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Open creates a connection.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Open</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    addr <span class="type">string</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    opts ...Option,</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> (*Connection, <span class="type">error</span>) &#123;</span><br><span class="line">    options := options&#123;</span><br><span class="line">        cache:  defaultCache,</span><br><span class="line">        logger: zap.NewNop(),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, o := <span class="keyword">range</span> opts &#123;</span><br><span class="line">        o.apply(&amp;options)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Summary">Summary</h2>
<p>In real-world projects, when dealing with a large number of options or options from different sources (e.g., from files or environment variables), consider using the Functional Options Pattern.</p>
<p>Note that in actual work, we should not rigidly apply the pattern as described above. For example, in Uber’s example, the <code>Open</code> function does not only accept a variable number of <code>Option</code> parameters because the <code>addr</code> parameter is required. Therefore, the Functional Options Pattern is more suitable for cases with many configurations and optional parameters.</p>
<p>References:</p>
<ul>
<li><a href="https://golang.cafe/blog/golang-functional-options-pattern.html">https://golang.cafe/blog/golang-functional-options-pattern.html</a></li>
<li><a href="https://github.com/uber-go/guide/blob/master/style.md#functional-options">https://github.com/uber-go/guide/blob/master/style.md#functional-options</a></li>
</ul>
<p>If you found my article enjoyable, feel free to follow me and give it a 👏. Your support would be greatly appreciated.</p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go defer：makes the function simpler and more robust.</title>
    <url>/2024/04/18/Go%20defer%EF%BC%9Amakes%20the%20function%20simpler%20and%20more%20robust./</url>
    <content><![CDATA[<blockquote>
<p>This article is first published in the medium MPP plan. If you are a medium user, please follow me in <a href="https://medium.hxzhouh.com/">medium</a>. Thank you very much.</p>
</blockquote>
<p>In the previous article, we used <code>defer</code> to recover from panics. In the practical work of a gopher, <code>defer</code> acts like a loyal and reliable teammate, silently helping us with the clean-up work behind the scenes. For example:</p>
<span id="more"></span> 
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">wg.Add(goroutines)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; goroutines; i++ &#123;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">       <span class="keyword">defer</span> wg.Done()</span><br><span class="line">       <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; count/goroutines; j++ &#123;</span><br><span class="line">          atomic.AddInt64(&amp;sum, <span class="number">1</span>)</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br></pre></td></tr></table></figure>
<p><code>defer</code> is used to release locks or any other resources.</p>
<blockquote>
<p>In Go, <code>defer</code> can only be used inside functions and methods.<br>
The <code>defer</code> keyword must be followed by a function or method, which are referred to as deferred functions.</p>
</blockquote>
<p><code>defer</code> registers these functions into a stack data structure specific to the goroutine in which it is executed. The deferred functions are then scheduled to be executed in a last-in, first-out (LIFO) order before the function containing the <code>defer</code> statement exits.</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/02/7ca8d7abc4864e3b4c698edd9144ecf6.png" alt="Pasted image 20240229205228"></p>
<p>Regardless of whether the function reaches the end of its body and returns, explicitly calls <code>return</code> in an error handling branch, or encounters a panic, the functions stored in the deferred function stack will be scheduled for execution. Thus, deferred functions provide a convenient way to perform clean-up tasks for a function in any scenario.</p>
<h1>Several Use Cases for <code>defer</code></h1>
<ul>
<li>Capturing panics: Since deferred functions are always executed in any scenario, we can handle exceptions within <code>defer</code> (although it is not recommended to use <code>panic</code> for general errors unless necessary).</li>
<li>Resource release: <code>defer</code> allows for graceful resource release, such as file descriptors or locks.</li>
<li>Delayed execution: <code>defer</code> can be used to record the execution time of a function, for example:</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(s time.Time)</span></span> &#123;</span><br><span class="line">    fmt.Println(time.Now().Sub(s))</span><br><span class="line">&#125;(time.Now())</span><br></pre></td></tr></table></figure>
<h1>Performance Overhead of <code>defer</code></h1>
<p><code>defer</code> makes resource release (like file descriptors or locks) more elegant and less error-prone. However, in performance-sensitive programs, Gophers must be aware of and consider the performance burden introduced by <code>defer</code>.</p>
<p>In the following benchmark test, we can observe the performance difference between a version with <code>defer</code> and a version without <code>defer</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hxzhouh  atomic  ➜ ( main  1)  ♥ 20:16  go test -bench=BenchmarkFooWithDefer </span><br><span class="line">10000000</span><br><span class="line">goos: darwin</span><br><span class="line">goarch: arm64</span><br><span class="line">pkg: github.com/hxzhouh/go-example/atomic</span><br><span class="line">BenchmarkFooWithDefer-10        189423524                6.353 ns/op</span><br><span class="line">PASS</span><br><span class="line">ok      github.com/hxzhouh/go-example/atomic    3.631s</span><br><span class="line">hxzhouh  atomic  ➜ ( main  1)  ♥ 21:05  go test -bench=BenchmarkFooWithoutDefer </span><br><span class="line">BenchmarkFooWithoutDefer-10     273232389                4.397 ns/op</span><br><span class="line">PASS</span><br><span class="line">ok      github.com/hxzhouh/go-example/atomic    2.875s</span><br></pre></td></tr></table></figure>
<p>In this test, the non-deferred version is approximately 7 times faster than the version with <code>defer</code> in Go 1.12. After optimization in versions 1.13 and 1.14, the performance of <code>defer</code> has significantly improved. On my computer, the non-deferred version still has a performance advantage of about 50%.</p>
<h1>Conclusion</h1>
<p>In most cases, our programs are not highly sensitive to performance. I recommend using <code>defer</code> whenever possible. However, it is important to understand how <code>defer</code> works, as well as a few things to avoid.</p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go program pattern 02: Implementing Class Inheritance and Method Overriding through Composition</title>
    <url>/2024/04/23/Go%20program%20pattern%2002%EF%BC%9A%20Implementing%20Class%20Inheritance%20and%20Method%20Overriding%20through%20Composition/</url>
    <content><![CDATA[<p>In the previous tutorial, I have already introduced that Go language, unlike object-oriented programming languages such as Java and PHP, does not support keywords like <code>class</code> to define classes. Instead, it uses the <code>type</code> keyword combined with basic types or structures to define the type system. Additionally, it does not support explicitly defining inheritance relationships between types using the <code>extends</code> keyword.</p>
<span id="more"></span>
<blockquote>
<p>This article is first published in the medium MPP plan. If you are a medium user, please follow me in <a href="https://medium.hxzhouh.com/">medium</a>. Thank you very much.</p>
</blockquote>
<p>Strictly speaking, Go language is not an object-oriented programming language, at least not the best choice for object-oriented programming (Java is the most established one). However, we can simulate object-oriented programming based on some features provided by Go.</p>
<p>To implement object-oriented programming, we must implement the three major features of object-oriented programming: encapsulation, inheritance, and polymorphism.</p>
<h2 id="Inheritance">Inheritance</h2>
<p>Next is <strong>inheritance</strong>. Although Go does not directly provide syntax for inheritance, we can indirectly achieve similar functionality through <strong>composition</strong>. Composition means embedding one type into another type to build a new type structure.</p>
<p>In traditional object-oriented programming, explicitly defining inheritance relationships has two drawbacks: one is that it leads to increasingly complex class hierarchies, and the other is that it affects the extensibility of classes. Many software design patterns advocate using composition instead of inheritance to improve class extensibility.</p>
<p>Let’s take an example. Suppose we want to create a UI component library. We have a <code>Widget</code> structure type with two properties, <code>x</code> and <code>y</code>, representing the length and width of the component.<br>
If we want to define a class representing <code>Label</code>, we can do it like this:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Label <span class="keyword">struct</span> &#123;</span><br><span class="line">    Widget</span><br><span class="line">    text <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Here, <code>Label</code> inherits all the properties of <code>Widget</code> and adds a new property <code>text</code>. Similarly, we can define the <code>Button</code> and <code>ListBox</code> classes:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Button <span class="keyword">struct</span> &#123;</span><br><span class="line">    Label</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> ListBox <span class="keyword">struct</span> &#123;</span><br><span class="line">    Widget</span><br><span class="line">    text  []<span class="type">string</span></span><br><span class="line">    index <span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Polymorphism">Polymorphism</h2>
<p>First, we define two interfaces, <code>Painter</code> for painting and <code>Clicker</code> for clicking:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Painter <span class="keyword">interface</span> &#123;</span><br><span class="line">    Paint()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Clicker <span class="keyword">interface</span> &#123;</span><br><span class="line">    Click()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Then, the components implement these interfaces:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(label Label)</span></span> Paint() &#123;</span><br><span class="line">    <span class="comment">// display label</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%p:Label.Paint(%q)\n&quot;</span>, &amp;label, label.text)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(button Button)</span></span> Paint() &#123;</span><br><span class="line">    <span class="comment">// display button</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;Button.Paint(%q)\n&quot;</span>, button.text)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(button Button)</span></span> Click() &#123;</span><br><span class="line">    <span class="comment">// click button</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;Button.Click(%q)\n&quot;</span>, button.text)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(listBox ListBox)</span></span> Paint() &#123;</span><br><span class="line">    <span class="comment">// display listBox</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;ListBox.Paint(%q)\n&quot;</span>, listBox.text)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Label</code> implements <code>Painter</code>, and <code>Button</code> and <code>ListBox</code> implement both <code>Painter</code> and <code>Clicker</code>.</p>
<p>At the application level, we can use these components like this:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">label := Label&#123;Widget&#123;<span class="number">10</span>, <span class="number">10</span>&#125;, <span class="string">&quot;State:&quot;</span>&#125;</span><br><span class="line">button1 := Button&#123;Label&#123;Widget&#123;<span class="number">10</span>, <span class="number">70</span>&#125;, <span class="string">&quot;OK&quot;</span>&#125;&#125;</span><br><span class="line">button2 := NewButton(<span class="number">50</span>, <span class="number">70</span>, <span class="string">&quot;Cancel&quot;</span>)</span><br><span class="line">listBox := ListBox&#123;Widget&#123;<span class="number">10</span>, <span class="number">40</span>&#125;,</span><br><span class="line">    []<span class="type">string</span>&#123;<span class="string">&quot;AL&quot;</span>, <span class="string">&quot;AK&quot;</span>, <span class="string">&quot;AZ&quot;</span>, <span class="string">&quot;AR&quot;</span>&#125;, <span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">for</span> _, painter := <span class="keyword">range</span> []Painter&#123;label, listBox, button1, button2&#125; &#123;</span><br><span class="line">    painter.Paint()</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;=========================================&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> _, clicker := <span class="keyword">range</span> []Clicker&#123;listBox, button1, button2&#125; &#123;</span><br><span class="line">    clicker.Click()</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;=========================================&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> _, widget := <span class="keyword">range</span> []<span class="keyword">interface</span>&#123;&#125;&#123;label, listBox, button1, button2&#125; &#123;</span><br><span class="line">    widget.(Painter).Paint()</span><br><span class="line">    <span class="keyword">if</span> clicker, ok := widget.(Clicker); ok &#123;</span><br><span class="line">        clicker.Click()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Go language is different from object-oriented programming languages like Java and PHP in that it does not provide keywords specifically for referencing parent class instances (such as <code>super</code>, <code>parent</code>, etc.). In Go language, the design philosophy is simplicity, without any unnecessary keywords. All calls are straightforward.</p>
<h2 id="Summary">Summary</h2>
<p>Let’s summarize briefly. In Go language, the concept of classes in traditional object-oriented programming is intentionally weakened, which is in line with Go’s philosophy of simplicity. The “classes” defined based on structures are just ordinary data types, similar to built-in data types. Built-in data types can also be transformed into “classes” that can contain custom member methods using the <code>type</code> keyword.</p>
<p>All methods associated with a data type collectively form the method set of that type. Like other object-oriented programming languages, methods within the same method set cannot have the same name. Additionally, if they belong to a structure type, their names cannot overlap with any field names in that type.</p>
<h2 id="References">References</h2>
<ul>
<li><a href="https://stackoverflow.com/questions/37011799/how-to-pass-a-child-struct-into-a-function-accepting-parent-struct">How to pass a ‘child’ struct into a function accepting ‘parent’ struct?</a></li>
<li><a href="https://stackoverflow.com/questions/61585699/check-if-a-struct-has-struct-embedding-at-run-time">Check if a struct has struct embedding at run time</a></li>
<li><a href="https://coolshell.cn/articles/21214.html">GO编程模式：委托和反转控制</a></li>
</ul>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go program pattern 05: Decorations</title>
    <url>/2024/04/23/Go%20program%20pattern%2005%20Decorations/</url>
    <content><![CDATA[<p>Go is a statically typed compiled language designed to be concise and efficient. While Go is not a purely object-oriented language, we can still use design patterns to improve code readability and maintainability. Today, I will introduce a common design pattern: the Decorator pattern.</p>
<span id="more"></span> 
<blockquote>
<p>This article is first published in the medium MPP plan. If you are a medium user, please follow me in <a href="https://medium.hxzhouh.com/">medium</a>. Thank you very much.</p>
</blockquote>
<h2 id="What-is-the-Decorator-Pattern">What is the Decorator Pattern?</h2>
<p>The Decorator pattern is a design pattern that allows us to dynamically add behavior to an object at runtime without altering its implementation. This is achieved by creating a wrapper object or decorator that contains the original object and provides an enhanced interface to add new behavior.</p>
<p>In Go, we can use functions as decorators because Go supports higher-order functions, which means functions can be passed as parameters and returned as values.</p>
<h2 id="An-Example">An Example</h2>
<p>To better understand the Decorator pattern, let’s see how we can implement it in Go through an example.</p>
<p>First, we define a function type <code>Foo</code> and a decorator type <code>FooDecorator</code>:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Foo <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">string</span>)</span></span> <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> FooDecorator <span class="function"><span class="keyword">func</span><span class="params">(Foo)</span></span> Foo</span><br></pre></td></tr></table></figure>
<p>Then, we can create a decorator that takes a function of type <code>Foo</code> and returns a new function of type <code>Foo</code> which adds some behavior before and after calling the original function:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithLog</span><span class="params">(decorated Foo)</span></span> Foo &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Before calling the decorated function&quot;</span>)</span><br><span class="line">        result := decorated(s)</span><br><span class="line">        fmt.Println(<span class="string">&quot;After calling the decorated function&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Now, we can create a <code>Foo</code> function and enhance it using the decorator:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    foo := <span class="function"><span class="keyword">func</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Foo function called&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    foo = WithLog(foo)</span><br><span class="line"></span><br><span class="line">    foo(<span class="string">&quot;Hello, world!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In this example, we create a <code>Foo</code> function and use the <code>WithLog</code> decorator to enhance it. When we call the enhanced function, it first prints a message, then calls the original <code>Foo</code> function, and finally prints another message.</p>
<p>This is the Decorator pattern in Go. By using decorators, we can dynamically add new behavior without modifying the original function.</p>
<h2 id="An-HTTP-related-Example">An HTTP-related Example</h2>
<p>Next, let’s look at an example related to handling HTTP requests. First, we’ll start with a simple HTTP server code:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithServerHeader</span><span class="params">(h http.HandlerFunc)</span></span> http.HandlerFunc &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        log.Println(<span class="string">&quot;---&gt;WithServerHeader()&quot;</span>)</span><br><span class="line">        w.Header().Set(<span class="string">&quot;Server&quot;</span>, <span class="string">&quot;HelloServer v0.0.1&quot;</span>)</span><br><span class="line">        h(w, r)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    log.Printf(<span class="string">&quot;Received Request %s from %s\n&quot;</span>, r.URL.Path, r.RemoteAddr)</span><br><span class="line">    fmt.Fprintf(w, <span class="string">&quot;Hello, World! &quot;</span>+r.URL.Path)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/v1/hello&quot;</span>, WithServerHeader(hello))</span><br><span class="line">    err := http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(<span class="string">&quot;ListenAndServe: &quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In this code, we use the Decorator pattern. The <code>WithServerHeader()</code> function acts as a decorator that takes an <code>http.HandlerFunc</code> and returns a modified version. This example is relatively simple, as we only add a response header using <code>WithServerHeader()</code>. However, we can create many more functions like this, such as writing authentication cookies, checking authentication cookies, and logging.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithServerHeader</span><span class="params">(h http.HandlerFunc)</span></span> http.HandlerFunc &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        log.Println(<span class="string">&quot;---&gt;WithServerHeader()&quot;</span>)</span><br><span class="line">        w.Header().Set(<span class="string">&quot;Server&quot;</span>, <span class="string">&quot;HelloServer v0.0.1&quot;</span>)</span><br><span class="line">        h(w, r)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithAuthCookie</span><span class="params">(h http.HandlerFunc)</span></span> http.HandlerFunc &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        log.Println(<span class="string">&quot;---&gt;WithAuthCookie()&quot;</span>)</span><br><span class="line">        cookie := &amp;http.Cookie&#123;Name: <span class="string">&quot;Auth&quot;</span>, Value: <span class="string">&quot;Pass&quot;</span>, Path: <span class="string">&quot;/&quot;</span>&#125;</span><br><span class="line">        http.SetCookie(w, cookie)</span><br><span class="line">        h(w, r)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithBasicAuth</span><span class="params">(h http.HandlerFunc)</span></span> http.HandlerFunc &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        log.Println(<span class="string">&quot;---&gt;WithBasicAuth()&quot;</span>)</span><br><span class="line">        cookie, err := r.Cookie(<span class="string">&quot;Auth&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> || cookie.Value != <span class="string">&quot;Pass&quot;</span> &#123;</span><br><span class="line">            w.WriteHeader(http.StatusForbidden)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        h(w, r)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithDebugLog</span><span class="params">(h http.HandlerFunc)</span></span> http.HandlerFunc &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        log.Println(<span class="string">&quot;---&gt;WithDebugLog&quot;</span>)</span><br><span class="line">        r.ParseForm()</span><br><span class="line">        log.Println(r.Form)</span><br><span class="line">        log.Println(<span class="string">&quot;path&quot;</span>, r.URL.Path)</span><br><span class="line">        log.Println(<span class="string">&quot;scheme&quot;</span>, r.URL.Scheme)</span><br><span class="line">        log.Println(r.Form[<span class="string">&quot;url_long&quot;</span>])</span><br><span class="line">        <span class="keyword">for</span> k, v := <span class="keyword">range</span> r.Form &#123;</span><br><span class="line">            log.Println(<span class="string">&quot;key:&quot;</span>, k)</span><br><span class="line">            log.Println(<span class="string">&quot;val:&quot;</span>, strings.Join(v, <span class="string">&quot;&quot;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        h(w, r)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    log.Printf(<span class="string">&quot;Received Request %s from %s\n&quot;</span>, r.URL.Path, r.RemoteAddr)</span><br><span class="line">    fmt.Fprintf(w, <span class="string">&quot;Hello, World! &quot;</span>+r.URL.Path)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/v1/hello&quot;</span>, WithServerHeader(WithAuthCookie(hello)))</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/v2/hello&quot;</span>, WithServerHeader(WithBasicAuth(hello)))</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/v3/hello&quot;</span>, WithServerHeader(WithBasicAuth(WithDebugLog(hello))))</span><br><span class="line">    err := http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(<span class="string">&quot;ListenAndServe: &quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Pipeline-of-Multiple-Decorators">Pipeline of Multiple Decorators</h2>
<p>When using multiple decorators, the code can become less visually appealing as we need to nest functions layer by layer. However, we can refactor the code to make it cleaner. To do this, we first write a utility function that iterates through and calls each decorator:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> HttpHandlerDecorator <span class="function"><span class="keyword">func</span><span class="params">(http.HandlerFunc)</span></span> http.HandlerFunc</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Handler</span><span class="params">(h http.HandlerFunc, decors ...HttpHandlerDecorator)</span></span> http.HandlerFunc &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> decors &#123;</span><br><span class="line">        d := decors[<span class="built_in">len</span>(decors)<span class="number">-1</span>-i] <span class="comment">// iterate in reverse</span></span><br><span class="line">        h = d(h)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Then, we can use it like this:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">http.HandleFunc(<span class="string">&quot;/v4/hello&quot;</span>, Handler(hello,</span><br><span class="line">                WithServerHeader, WithBasicAuth, WithDebugLog))</span><br></pre></td></tr></table></figure>
<h1>Conclusion</h1>
<p>In this article, I demonstrated the Decorator pattern using two examples. However, since Go does not support annotations as a syntactic sugar, using decorators can be a bit cumbersome. Nevertheless, the concept is still important, and we can apply this way of thinking to write higher-quality code in our daily development.</p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>A Deep Dive into CNCF’s Cloud-Native AI Whitepaper</title>
    <url>/2024/04/17/A%20Deep%20Dive%20into%20CNCF%E2%80%99s%20Cloud-Native%20AI%20Whitepaper/</url>
    <content><![CDATA[<p><img src="https://images.hxzhouh.com/blog-images/2024/04/3c8f677dae51c4d491a982224b6a3e0d.png" alt="cncf"></p>
<blockquote>
<p>During KubeCon EU 2024, CNCF launched its first Cloud-Native AI Whitepaper. This article provides an in-depth analysis of the content of this whitepaper.</p>
</blockquote>
<p>In March 2024, during KubeCon EU, the Cloud-Native Computing Foundation (CNCF) released its first detailed whitepaper on Cloud-Native Artificial Intelligence (CNAI) <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. This report extensively explores the current state, challenges, and future development directions of integrating cloud-native technologies with artificial intelligence. This article will delve into the core content of this whitepaper.</p>
<span id="more"></span>
<h2 id="What-is-Cloud-Native-AI">What is Cloud-Native AI?</h2>
<p>Cloud-Native AI refers to building and deploying artificial intelligence applications and workloads using cloud-native technology principles. This includes leveraging microservices, containerization, declarative APIs, and continuous integration/continuous deployment (CI/CD) among other cloud-native technologies to enhance AI applications’ scalability, reusability, and operability.</p>
<p>The following diagram illustrates the architecture of Cloud-Native AI, redrawn based on the whitepaper.<br>
<img src="https://images.hxzhouh.com/blog-images/2024/04/40eb5be3bd0139d72f816cef9d25a51f.png" alt="Pasted image 20240418101533"></p>
<h2 id="Relationship-between-Cloud-Native-AI-and-Cloud-Native-Technologies">Relationship between Cloud-Native AI and Cloud-Native Technologies</h2>
<p>Cloud-native technologies provide a flexible, scalable platform that makes the development and operation of AI applications more efficient. Through containerization and microservices architecture, developers can iterate and deploy AI models quickly while ensuring high availability and scalability of the system. Kuuch as resource scheduling, automatic scaling, and service discovery.</p>
<p>The whitepaper provides two examples to illustrate the relationship between Cloud-Native AI and cloud-native technologies, namely running AI on cloud-native infrastructure:</p>
<ul>
<li>Hugging Face Collaborates with Microsoft to launch Hugging Face Model Catalog on Azure<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></li>
<li>OpenAI Scaling Kubernetes to 7,500 nodes<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></li>
</ul>
<h2 id="Challenges-of-Cloud-Native-AI">Challenges of Cloud-Native AI</h2>
<p>Despite providing a solid foundation for AI applications, there are still challenges when integrating AI workloads with cloud-native platforms. These challenges include data preparation complexity, model training resource requirements, and maintaining model security and isolation in multi-tenant environments. Additionally, resource management and scheduling in cloud-native environments are crucial for large-scale AI applications and need further optimization to support efficient model training and inference.</p>
<h2 id="Development-Path-of-Cloud-Native-AI">Development Path of Cloud-Native AI</h2>
<p>The whitepaper proposes several development paths for Cloud-Native AI, including improving resource scheduling algorithms to better support AI workloads, developing new service mesh technologies to enhance the performance and security of AI applications, and promoting innovation and standardization of Cloud-Native AI technology through open-source projects and community collaboration.</p>
<h2 id="Cloud-Native-AI-Technology-Landscape">Cloud-Native AI Technology Landscape</h2>
<p>Cloud-Native AI involves various technologies, ranging from containers and microservices to service mesh and serverless computing. Kubernetes plays a central role in deploying and managing AI applications, while service mesh technologies such as Istio and Envoy provide robust traffic management and security features. Additionally, monitoring tools like Prometheus and Grafana are crucial for maintaining the performance and reliability of AI applications.</p>
<p>Below is the Cloud-Native AI landscape diagram provided in the whitepaper.</p>
<ul>
<li>Kubernetes</li>
<li>Volcano</li>
<li>Armada</li>
<li>Kuberay</li>
<li>Nvidia NeMo</li>
<li>Yunikorn</li>
<li>Kueue</li>
<li>Flame</li>
</ul>
<h2 id="Distributed-Training">Distributed Training</h2>
<ul>
<li>Kubeflow Training Operator</li>
<li>Pytorch DDP</li>
<li>TensorFlow Distributed</li>
<li>Open MPI</li>
<li>DeepSpeed</li>
<li>Megatron</li>
<li>Horovod</li>
<li>Apla</li>
<li>…</li>
</ul>
<h2 id="ML-Serving">ML Serving</h2>
<ul>
<li>Kserve</li>
<li>Seldon</li>
<li>VLLM</li>
<li>TGT</li>
<li>Skypilot</li>
<li>…</li>
</ul>
<h2 id="CI-CD-—-Delivery">CI/CD — Delivery</h2>
<ul>
<li>Kubeflow Pipelines</li>
<li>Mlflow</li>
<li>TFX</li>
<li>BentoML</li>
<li>MLRun</li>
<li>…</li>
</ul>
<h2 id="Data-Science">Data Science</h2>
<ul>
<li>Jupyter</li>
<li>Kubeflow Notebooks</li>
<li>PyTorch</li>
<li>TensorFlow</li>
<li>Apache Zeppelin</li>
</ul>
<h2 id="Workload-Observability">Workload Observability</h2>
<ul>
<li>Prometheus</li>
<li>Influxdb</li>
<li>Grafana</li>
<li>Weights and Biases (wandb)</li>
<li>OpenTelemetry</li>
<li>…</li>
</ul>
<h2 id="AutoML">AutoML</h2>
<ul>
<li>Hyperopt</li>
<li>Optuna</li>
<li>Kubeflow Katib</li>
<li>NNI</li>
<li>…</li>
</ul>
<h2 id="Governance-Policy">Governance &amp; Policy</h2>
<ul>
<li>Kyverno</li>
<li>Kyverno-JSON</li>
<li>OPA/Gatekeeper</li>
<li>StackRox Minder</li>
<li>…</li>
</ul>
<h2 id="Data-Architecture">Data Architecture</h2>
<ul>
<li>ClickHouse</li>
<li>Apache Pinot</li>
<li>Apache Druid</li>
<li>Cassandra</li>
<li>ScyllaDB</li>
<li>Hadoop HDFS</li>
<li>Apache HBase</li>
<li>Presto</li>
<li>Trino</li>
<li>Apache Spark</li>
<li>Apache Flink</li>
<li>Kafka</li>
<li>Pulsar</li>
<li>Fluid</li>
<li>Memcached</li>
<li>Redis</li>
<li>Alluxio</li>
<li>Apache Superset</li>
<li>…</li>
</ul>
<h2 id="Vector-Databases">Vector Databases</h2>
<ul>
<li>Chroma</li>
<li>Weaviate</li>
<li>Quadrant</li>
<li>Pinecone</li>
<li>Extensions</li>
<li>Redis</li>
<li>Postgres SQL</li>
<li>ElasticSearch</li>
<li>…</li>
</ul>
<h2 id="Model-LLM-Observability">Model/LLM Observability</h2>
<ul>
<li>• Trulens</li>
<li>Langfuse</li>
<li>Deepchecks</li>
<li>OpenLLMetry</li>
<li>…</li>
</ul>
<h2 id="Conclusion">Conclusion</h2>
<p>Finally, the following key points are summarized:</p>
<ul>
<li><strong>Role of Open Source Community</strong>: The whitepaper indicates the role of the open-source community in advancing Cloud-Native AI, including accelerating innovation and reducing costs through open-source projects and extensive collaboration.</li>
<li><strong>Importance of Cloud-Native Technologies</strong>: Cloud-Native AI, built according to cloud-native principles, emphasizes the importance of repeatability and scalability. Cloud-native technologies provide an efficient development and operation environment for AI applications, especially in resource scheduling and service scalability.</li>
<li><strong>Existing Challenges</strong>: Despite bringing many advantages, Cloud-Native AI still faces challenges in data preparation, model training resource requirements, and model security and isolation.</li>
<li><strong>Future Development Directions</strong>: The whitepaper proposes development paths including optimizing resource scheduling algorithms to support AI workloads, developing new service mesh technologies to enhance performance and security, and promoting technology innovation and standardization through open-source projects and community collaboration.</li>
<li><strong>Key Technological Components</strong>: Key technologies involved in Cloud-Native AI include containers, microservices, service mesh, and serverless computing, among others. Kubernetes plays a central role in deploying and managing AI applications, while service mesh technologies like Istio and Envoy provide necessary traffic management and security.</li>
</ul>
<p>For more details, please download the Cloud-Native AI whitepaper <sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>.</p>
<h2 id="Reference-Links">Reference Links</h2>
<div id="footnotes"><hr><div id="footnotelist"><ol><li id="fn:1"><a href="https://www.cncf.io/reports/cloud-native-artificial-intelligence-whitepaper/">Whitepaper:</a><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><a href="https://huggingface.co/blog/hugging-face-endpoints-on-azure">Hugging Face Collaborates with Microsoft to launch Hugging Face Model Catalog on Azure</a><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><a href="https://openai.com/research/scaling-kubernetes-to-7500-nodes"> OpenAI Scaling Kubernetes to 7,500 nodes:</a><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><a href="https://www.cncf.io/reports/cloud-native-artificial-intelligence-whitepaper/">Cloud-Native AI Whitepaper: </a><a href="#fnref:4" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
      <categories>
        <category>Information</category>
      </categories>
      <tags>
        <tag>CNCF</tag>
      </tags>
  </entry>
  <entry>
    <title>How was my blog built</title>
    <url>/2024/04/18/How%20was%20my%20blog%20built/</url>
    <content><![CDATA[<p>Blogging, is the last and most important link in my knowledge circulatory system, which takes care of my output, as well as my personal brand. In this post, I describe how my <a href="https://hxzhouh.com">blog</a>, was built.</p>
<span id="more"></span>
<h1>Overview</h1>
<p>My blog is structured with hexo+github+Cloudflare pages. In other words, everything is free except for the domain name which requires a fee.</p>
<h1>Blog setup</h1>
<p>There are a lot of articles on the web about setting up a blog using this architecture, so I won’t go into it again, but here are a few links that I’ve referenced.</p>
<ul>
<li><a href="https://developers.cloudflare.com/pages/framework-guides/deploy-a-hexo-site/"> cloudflare: Deploy a Hexo site</a></li>
</ul>
<h2 id="Themes">Themes</h2>
<p>The theme I’m using is the community’s <a href="https://github.com/next-theme/hexo-theme-next">next-theme</a>, which is in <a href="https://github.com/theme-next/hexo-theme-"> theme-next </a> next/tree/master) (no longer maintained). I liked the simplicity of it and the documentation, so I used it. Some of the configuration is also based on <a href="https://github.com/next-theme/hexo-theme-next">next-theme</a>.</p>
<h2 id="Plugins-used">Plugins used</h2>
<h3 id="footnote">footnote</h3>
<p>The plugin I use is <a href="https://github.com/LouisBarranqueiro/hexo-footnotes">hexo-footnotes</a><br>
Installation method</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add hexo-footnotes</span><br></pre></td></tr></table></figure>
<p>Then edit hexo<code> _config.yaml</code> to add the content</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">plugins. </span><br><span class="line">- hexo-footnotes</span><br></pre></td></tr></table></figure>
<p>Then recompile, push and you’re done!<br>
For specific results, you can refer to my article: [A Deep Dive into CNCF’s Cloud-Native AI Whitepaper](<a href="https://hxzhouh.com/2024/04/17/A%20Deep%20Dive%20into%25">https://hxzhouh.com/2024/04/17/A Deep Dive into%</a> 20CNCF%E2%80%99s%20Cloud-Native%20AI%20Whitepaper/)</p>
<h3 id="search">search</h3>
<p>hexo’s local search function has not been working well, so I chose <strong>Algolia Search</strong>, a free account with 10,000 calls per month, which is enough for a small blog.<br>
Refer to the documentation:</p>
<ul>
<li>[Algolia Search](<a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/ALGOLIA-SEARCH.md">https://github.com/theme-next/hexo-theme-next/blob/master/docs/ALGOLIA-SEARCH.md</a><br>
Result.<br>
<img src="https://images.hxzhouh.com/blog-images/2024/04/d15c1f05b91186987fc24de39c1e0350.png" alt="Pasted image 20240418144846"></li>
</ul>
<h3 id="word-count">word count</h3>
<p>Use <a href="https://github.com/next-theme/hexo-word-counter">hexo-word-counter</a> to count the number of words in an article and the expected reading time. Once configured, you can display the word count and reading time at the beginning of each article and at the bottom of the page</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-word-counter </span><br><span class="line">hexo clean &amp; hexo s </span><br></pre></td></tr></table></figure>
<p>This completes the word counting functionality.</p>
<h3 id="view-count">view count</h3>
<p>The next theme supports <a href="https://console.firebase.google.com/">firestore</a> , <a href="https://console.firebase.google.com/">firestore</a> is a cloud development service launched by Google, which is quite powerful. We use it to realize the view count function, this service is also free.<br>
After logging in <a href="https://console.firebase.google.com/">firestore</a>, select AddProject<br>
AddProject<img src="https://images.hxzhouh.com/blog-images/2024/04/b6b861b32cfbaaba51b9909435f79cf9.png" alt="Pasted image 20240418153129"><br>
Then select add app , select web -&gt; enter a name and register, wait a moment and the following will appear<br>
<img src="https://images.hxzhouh.com/blog-images/2024/04/4f0776d24dad651304022ea62a315d0b.png" alt="Pasted image 20240418153543">  Record the apiKey and appId:</p>
<p>Then create a firestore database<br>
<img src="https://images.hxzhouh.com/blog-images/2024/04/54d849cafe1b3eb72ac666610544d42d.png" alt="Pasted image 20240418153705"><br>
I’ve chosen test module as my schema, just enter a name and select a region. Wait a moment.<br>
Finally, configure the apiKey and appId above in next config.yaml: and appId and redeploy. Click on a random article, and you’ll see the views.<br>
<img src="https://images.hxzhouh.com/blog-images/2024/04/bbeb1967bffe7d171f6cdd6969130c82.png" alt="Pasted image 20240418154130"><br>
You can also see the data in the firestore database<br>
<img src="https://images.hxzhouh.com/blog-images/2024/04/55d5dce59a8456601898a54c97e93628.png" alt="Pasted image 20240418154116"><br>
Based on firestore, we can expand the content of the blog, which is also a benefit of cloud development. If I have more interesting ideas later, I will write another post about it.</p>
<p>The plugins I’m currently using are, well, these, and they’re all completely free.</p>
<h1>Content Management</h1>
<p>I’m currently using Obsidian to manage all my digital notes, and mine as well.<br>
I utilize the Obsidian <code>quickAdd</code> + <code>template</code> plugin to create a new blog post with one click.<br>
Images and other media files I am hosting again <code>Cloudflare R2.</code><br>
I used Obsidian’s Image auto upload Plugin + picList to upload images. The writing experience is not inferior to medium at all.</p>
<h1>Summary</h1>
<p>This is the end of my blogging system, if you are interested in having your own blog, why don’t you give it a try? It’s all free.</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>tools</tag>
        <tag>hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Go1.22 a new math  lib</title>
    <url>/2024/04/18/Go1.22%20a%20new%20math%20%20lib/</url>
    <content><![CDATA[<blockquote>
<p>This article is first published in the medium MPP plan. If you are a medium user, please follow me in <a href="https://medium.hxzhouh.com/">medium</a>. Thank you very much.</p>
</blockquote>
<h1>Go1.22 a new math lib</h1>
<p>The inaugural v2 version of the standard library in Go, hails from the esteemed <a href="https://github.com/golang/go/discussions/60751">math/rand/v2</a> repository. It is set to make its grand debut with the official release of Go1.22, poised to serve as a reliable and production-ready resource.</p>
<span id="more"></span> 
<p><img src="https://images.hxzhouh.com/blog-images/2024/02/bb79ed583d1402f7ca9b2ff886f939e5.jpeg" alt="640"></p>
<h2 id="Reasons">Reasons</h2>
<ol>
<li>The original <code>math/rand</code> library in the standard package had numerous deficiencies and areas for improvement. These included outdated generators, slow algorithms (performance), and unfortunate conflicts with <code>crypto/rand.Read</code>, among other issues.</li>
<li>There is a plan in place to upgrade the v2 versions of standard libraries. Starting with <code>math</code> allows for the accumulation of experience and resolving tooling ecosystem challenges (such as support from tools like gopls and goimports for v2 packages). Subsequent iterations can then address higher-risk packages, like <code>sync/v2</code> or <code>encoding/json/v2</code>.</li>
<li>Go1 requires compatibility guarantees, making it impractical to directly modify the original library. The issues with <code>math/rand</code> are also more prominent and evident.</li>
</ol>
<h2 id="change-list">change list</h2>
<ul>
<li>Removed <code>Rand.Read</code> and the top-level <code>Read</code> function.</li>
<li>Removed <code>Source.Seed</code>, <code>Rand.Seed</code>, and the top-level <code>Seed</code> function (meaning that top-level functions like <code>Int</code> will always use random seeding).</li>
<li>Removed <code>Source64</code>, as <code>Source</code> now provides the <code>Uint64</code> method, making the original methods unnecessary.</li>
<li>Utilized a more direct implementation for <code>Float32</code> and <code>Float64</code>. For example, in the case of <code>Float64</code>, the original implementation used <code>float64(r.Int63()) / (1&lt;&lt;63)</code>. However, this had a problem of occasionally rounding to <code>1.0</code>, while <code>Float64</code> should never round. The improvement involves changing it to <code>float64(r.Int63n(1&lt;&lt;53)) / (1&lt;&lt;53)</code>, which avoids the rounding issue.</li>
<li>Implemented <code>Rand.Perm</code> using <code>Rand.Shuffle</code>. This improves efficiency and ensures only one implementation.</li>
<li>Renamed <code>Int31</code>, <code>Int31n</code>, <code>Int63</code>, and <code>Int64n</code> to <code>Int32</code>, <code>Int32n</code>, <code>Int64</code>, and <code>Int64n</code>, respectively. These names were unnecessary and confusing.</li>
<li>Added <code>Uint32</code>, <code>Uint32n</code>, <code>Uint64</code>, <code>Uint64n</code>, <code>Uint</code>, and <code>Uintn</code> as top-level functions and methods on <code>Rand</code>.</li>
<li>Utilized Lemire’s algorithm in <code>Intn</code>, <code>Uintn</code>, <code>Int32n</code>, <code>Uint32n</code>, <code>Int64n</code>, and <code>Uint64n</code>, resulting in improved performance.</li>
<li>Introduced a new implementation of <code>Source</code> called PCG-DXSM, including related APIs like <code>NewPCG</code>.</li>
<li>Removed the Mitchell &amp; Reeds LFSR generator and <code>NewSource</code>.</li>
</ul>
<h2 id="example">example</h2>
<h3 id="Read-Seed">Read &amp; Seed</h3>
<p>The functions <code>Read</code> and <code>Seed</code> have been removed. It is recommended to use <code>crypto/rand</code>’s <code>Read</code> function instead.</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;crypto/rand&quot;</span></span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> b := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">3</span>)</span><br><span class="line"> _, err := rand.Read(b)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="built_in">panic</span>(err)</span><br><span class="line"> &#125;</span><br><span class="line"> fmt.Printf(<span class="string">&quot;hxzhouh: %v\n&quot;</span>, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>output：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hxzhouh: [48 71 122]</span><br></pre></td></tr></table></figure>
<p>For the <code>Seed</code> function, it is advised to call <code>New(NewSource(seed))</code> in order to reinitialize the random number generator.</p>
<h3 id="internal">internal</h3>
<p>The functions <code>N</code>, <code>IntN</code>, and <code>UintN</code> now utilize a novel implementation algorithm. Interested individuals are encouraged to allocate extra time to examine it in detail:<a href="https://lemire.me/blog/2016/06/27/a-fast-alternative-to-the-modulo-reduction/">A fast alternative to the modulo reduction</a></p>
<p>The functions <code>Intn</code>, <code>Int31</code>, <code>Int31n</code>, <code>Int63</code>, and <code>Int64n</code> have been renamed as follows: <code>IntN</code>, <code>Int32</code>, <code>Int32N</code>, <code>Int64</code>, and <code>Int64N</code>, respectively.</p>
<p>Additionally, new functions <code>Uint32</code>, <code>Uint32N</code>, <code>Uint64</code>, <code>Uint64N</code>, <code>Uint</code>, and <code>UintN</code> have been introduced to generate random unsigned integers. They have also been added as corresponding functions within the <code>Rand</code> structure.</p>
<p>The newly added function <code>N</code> generates random numbers of arbitrary integer types. This function is implemented using generics, and the following integer types are its type parameters:</p>
<ul>
<li><code>int</code></li>
<li><code>int8</code></li>
<li><code>int16</code></li>
<li><code>int32</code></li>
<li><code>int64</code></li>
</ul>
<h1>Summary:</h1>
<p>Today, we have shared and further described the new <code>math/rand/v2</code> library, highlighting key changes including performance optimization (algorithm rewrite), standardization, and additions of new random generators.</p>
<p>Given the substantial amount of information covered, we have selected and presented only the aspects that are essential for understanding and using the library. However, for those who are interested in delving deeper, it is recommended to refer to the full documentation of<a href="https://pkg.go.dev/math/rand/v2@master">https://pkg.go.dev/math/rand/v2@master</a></p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>If Google No Longer supports Golang</title>
    <url>/2024/05/07/If%20Google%20No%20Longer%20supports%20Golang/</url>
    <content><![CDATA[<p><img src="https://cdn-images-1.medium.com/max/800/0*5tD3S180Mg9n475o" alt=""></p>
<p>Last month’s hot topic in IT circles was Google laying off many developers from its Python core team and flutter/dart team, purportedly for a city-wide reorganization.<br>
<a href="https://news.ycombinator.com/item?id=40171125">https://news.ycombinator.com/item?id=40171125</a></p>
<p>Reportedly, those laid off were mostly core members responsible for important Python maintenance.<br>
As a gopher, I pondered: will Google abandon Go? And if so, what would become of Go?</p>
<h1>What does Google offer to Go?</h1>
<p>Based on our past understanding clarified by @Lance Taylor and descriptions from various sources, we can estimate what Go has likely received from Google.</p>
<ol>
<li><strong>Job Positions</strong>: Details regarding job positions of members of the Go core team, including compensation, benefits, and other remuneration.</li>
<li><strong>Software and Hardware Resources</strong>: Information on Go-related resources such as intellectual property, servers, domain names, and module management mirrors required by the community.</li>
<li><strong>Offline Activities</strong>: Possibility of reduced or scaled-down Go conferences worldwide in terms of funding and endorsement.</li>
<li><strong>Internal Resources of Big Corporations</strong>: Gradual loss of exposure to advanced projects and opportunities for Go’s adoption due to the absence of resources within Google.</li>
<li><strong>Promotion and Feedback Channels</strong>: Slower discovery and response to significant issues and features in Go as Google’s internal demands historically take precedence.</li>
</ol>
<h1>Potential Scenarios</h1>
<p>What might happen if Google dissolves the Go core team and ceases all infrastructure support?</p>
<ul>
<li>Dissolution of the Go core team, leading members may retire or seek employment elsewhere.</li>
<li>If Google decides to cease all investment in Go, maintenance of Go could become more complex as it relies heavily on infrastructure. In such a scenario, Go might transition from Google to an external foundation, resulting in noticeable maintenance fluctuations.</li>
<li>If Google chooses to continue investing in Go through other internal teams, the worst-case scenario could involve Google flexing its ownership of intellectual property, possibly leading to Go being rebranded.</li>
<li>CNCF might take over Google’s mantle, organizing the future development of Go. Among CNCF projects, the Go language enjoys the widest adoption.</li>
</ul>
<h1>Probability of Occurrence</h1>
<p>Currently, Go belongs to Google Cloud. Considering Go’s current trend focusing on customer success, the likelihood of Google Cloud shutting down Go is low. But who knows? I consulted <code>gemini</code> on this question.</p>
<p><img src="https://cdn-images-1.medium.com/max/800/0*4EEwSKbJ6DxddogE.png" alt="">generated by Gemini</p>
<h1>Conclusion</h1>
<p>Drawing from the example of Rust, which transitioned from Mozilla’s core to an independent foundation, Go could potentially thrive even more. A nonprofit organization will probably form around Go (or it may directly join CNCF), with enough support from major companies, at least for a period.</p>
<h1>References</h1>
<ul>
<li><a href="https://ajmani.net/2024/02/23/go-2019-2022-becoming-a-cloud-team/">https://ajmani.net/2024/02/23/go-2019-2022-becoming-a-cloud-team/</a></li>
<li><a href="https://www.reddit.com/r/golang/comments/1cft7mc/if_google_decided_to_part_with_the_core_go_team/">https://www.reddit.com/r/golang/comments/1cft7mc/if_google_decided_to_part_with_the_core_go_team/</a></li>
</ul>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go program pattern 03: Inversion of Control</title>
    <url>/2024/04/23/Go%20program%20pattern%2003%EF%BC%9AInversion%20of%20Control/</url>
    <content><![CDATA[<p>In the previous article, I briefly introduced the composite pattern in Go, which was explained in a simple manner. We understood that Go can achieve polymorphism in object-oriented programming through composition.</p>
<span id="more"></span>
<blockquote>
<p>This article is first published in the medium MPP plan. If you are a medium user, please follow me in <a href="https://medium.hxzhouh.com/">medium</a>. Thank you very much.</p>
</blockquote>
<p>In this article, let’s learn about Inversion of Control (IoC). <a href="https://en.wikipedia.org/wiki/Inversion_of_control" title="IoC - Inversion of Control">Inversion of Control</a> is a software design method that involves separating control logic from business logic. Instead of writing control logic within the business logic, which creates a dependency of control logic on business logic, IoC reverses this relationship and makes the business logic dependent on the control logic.</p>
<h2 id="Inversion-of-Control">Inversion of Control</h2>
<p>Let’s consider an example where we want to implement a functionality to record the existence of numbers. We can easily implement the following code:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> IntSet <span class="keyword">struct</span> &#123;  </span><br><span class="line">    data <span class="keyword">map</span>[<span class="type">int</span>]<span class="keyword">struct</span>&#123;&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewIntSet</span><span class="params">()</span></span> IntSet &#123;  </span><br><span class="line">    <span class="keyword">return</span> IntSet&#123;<span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="keyword">struct</span>&#123;&#125;)&#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(set *IntSet)</span></span> Add(x <span class="type">int</span>) &#123;  </span><br><span class="line">    set.data[x] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(set *IntSet)</span></span> Delete(x <span class="type">int</span>) &#123;  </span><br><span class="line">    <span class="built_in">delete</span>(set.data, x)  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(set *IntSet)</span></span> Contains(x <span class="type">int</span>) <span class="type">bool</span> &#123;  </span><br><span class="line">    _, ok := set.data[x]  </span><br><span class="line">    <span class="keyword">return</span> ok  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The above code uses a map to store numbers and provides functionalities for adding, deleting, and checking the existence of numbers. Everything seems perfect.</p>
<p>Now, suppose we want to add an undo feature to this functionality. How can we do that? With a little thought, we can write clear code by wrapping <code>IntSet</code> into <code>UndoableIntSet</code>. Here’s the code:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> UndoableIntSet <span class="keyword">struct</span> &#123; <span class="comment">// Poor style</span></span><br><span class="line">    IntSet    <span class="comment">// Embedding (delegation)</span></span><br><span class="line">    functions []<span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewUndoableIntSet</span><span class="params">()</span></span> UndoableIntSet &#123;</span><br><span class="line">    <span class="keyword">return</span> UndoableIntSet&#123;NewIntSet(), <span class="literal">nil</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(set *UndoableIntSet)</span></span> Add(x <span class="type">int</span>) &#123; <span class="comment">// Override</span></span><br><span class="line">    <span class="keyword">if</span> !set.Contains(x) &#123;</span><br><span class="line">        set.data[x] = <span class="literal">true</span></span><br><span class="line">        set.functions = <span class="built_in">append</span>(set.functions, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; set.Delete(x) &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        set.functions = <span class="built_in">append</span>(set.functions, <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(set *UndoableIntSet)</span></span> Delete(x <span class="type">int</span>) &#123; <span class="comment">// Override</span></span><br><span class="line">    <span class="keyword">if</span> set.Contains(x) &#123;</span><br><span class="line">        <span class="built_in">delete</span>(set.data, x)</span><br><span class="line">        set.functions = <span class="built_in">append</span>(set.functions, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; set.Add(x) &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        set.functions = <span class="built_in">append</span>(set.functions, <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(set *UndoableIntSet)</span></span> Undo() <span class="type">error</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(set.functions) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> errors.New(<span class="string">&quot;No functions to undo&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// invert the order of calls</span></span><br><span class="line">    index := <span class="built_in">len</span>(set.functions) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> function := set.functions[index]; function != <span class="literal">nil</span> &#123;</span><br><span class="line">        function()</span><br><span class="line">    &#125;</span><br><span class="line">    set.functions = set.functions[:index]</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This approach is a good choice for extending existing code with new functionalities. It allows for a balance between reusing the existing code and adding new features. However, the main issue with this approach is that the Undo operation is actually a form of control logic, not business logic. The Undo feature cannot be reused because it contains a lot of business logic related to <code>IntSet</code>.</p>
<h2 id="Dependency-Inversion">Dependency Inversion</h2>
<p>Let’s explore another implementation approach where we extract the undo feature and make <code>IntSet</code> depend on it:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Undo []<span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(undo *Undo)</span></span> Add(u <span class="function"><span class="keyword">func</span><span class="params">()</span></span>) &#123;  </span><br><span class="line">    *undo = <span class="built_in">append</span>(*undo, u)  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(undo *Undo)</span></span> Undo() &#123;  </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(*undo) == <span class="number">0</span> &#123;  </span><br><span class="line">       <span class="keyword">return</span>  </span><br><span class="line">    &#125;  </span><br><span class="line">    index := <span class="built_in">len</span>(*undo) - <span class="number">1</span>  </span><br><span class="line">    (*undo)[index]()  </span><br><span class="line">    *undo = (*undo)[:index]  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Next, we embed <code>Undo</code> in <code>IntSet</code>:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> IntSet <span class="keyword">struct</span> &#123;  </span><br><span class="line">    data <span class="keyword">map</span>[<span class="type">int</span>]<span class="keyword">struct</span>&#123;&#125;  </span><br><span class="line">    undo Undo  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewIntSet</span><span class="params">()</span></span> IntSet &#123;  </span><br><span class="line">    <span class="keyword">return</span> IntSet&#123;<span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="keyword">struct</span>&#123;&#125;), <span class="built_in">make</span>(Undo, <span class="number">0</span>)&#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(set *IntSet)</span></span> Undo() &#123;  </span><br><span class="line">    set.undo.Undo()  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(set *IntSet)</span></span> Add(x <span class="type">int</span>) &#123;  </span><br><span class="line">    <span class="keyword">if</span> set.Contains(x) &#123;  </span><br><span class="line">       <span class="keyword">return</span>  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">       set.undo.Add(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;  </span><br><span class="line">          set.Delete(x)  </span><br><span class="line">       &#125;)  </span><br><span class="line">       set.data[x] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(set *IntSet)</span></span> Delete(x <span class="type">int</span>) &#123;  </span><br><span class="line">    <span class="keyword">if</span> !set.Contains(x) &#123;  </span><br><span class="line">       <span class="keyword">return</span>  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">       set.undo.Add(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;  </span><br><span class="line">          set.Add(x)  </span><br><span class="line">       &#125;)  </span><br><span class="line">       <span class="built_in">delete</span>(set.data, x)  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(set *IntSet)</span></span> Contains(x <span class="type">int</span>) <span class="type">bool</span> &#123;  </span><br><span class="line">    _, ok := set.data[x]  </span><br><span class="line">    <span class="keyword">return</span> ok  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In our application, we can use it as follows:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    set := NewIntSet()  </span><br><span class="line">    set.Add(<span class="number">1</span>)  </span><br><span class="line">    set.Add(<span class="number">2</span>)  </span><br><span class="line">    fmt.Println(set.Contains(<span class="number">2</span>))  </span><br><span class="line">    set.Undo()  </span><br><span class="line">    fmt.Println(set.Contains(<span class="number">2</span>))  </span><br><span class="line">    set.Delete(<span class="number">1</span>)  </span><br><span class="line">    fmt.Println(set.Contains(<span class="number">1</span>))  </span><br><span class="line">    set.Undo()  </span><br><span class="line">    fmt.Println(set.Contains(<span class="number">1</span>))  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Output:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/Users/hxzhouh/Library/Caches/JetBrains/GoLand2023.3/tmp/GoLand/___go_build_github_com_hxzhouh_go_example_pattern_ioc</span><br><span class="line">true</span><br><span class="line">false</span><br><span class="line">false</span><br><span class="line">true</span><br></pre></td></tr></table></figure>
<p>This is Inversion of Control, where the control logic <code>Undo</code> no longer depends on the business logic <code>IntSet</code>, but rather the business logic <code>IntSet</code> depends on <code>Undo</code>. Now, the Undo feature can be easily used by other business logics.</p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Learn How to Handle Time In Golang</title>
    <url>/2024/04/19/Learn%20How%20to%20Handle%20Time%20In%20Golang/</url>
    <content><![CDATA[<p><img src="https://images.hxzhouh.com/blog-images/2024/04/407a476e9b0e72dfefa2c636f2fd71ce.png" alt="99e178071ff04a758df4210c2e330fc8.png~tplv-6bxrjdptv7-image"><br>
Handling time is a common task for programmers. In Go, the standard library <code>time</code> provides the necessary capabilities.</p>
<p>This article will introduce some important functions and methods in the <code>time</code> package, hoping to help those who often need to deal with time-related issues in Go.</p>
<span id="more"></span>
<h2 id="Handle-Time-Zones">Handle Time Zones</h2>
<p>In programming, we often encounter the issue of an <strong>eight-hour time difference</strong>. This is caused by differences in time zones. To better handle them, we need to understand several time definition standards.</p>
<p>GMT (Greenwich Mean Time) is based on the Earth’s rotation and revolution to calculate time. It defines noon as the time when the sun passes through the Royal Greenwich Observatory in the suburbs of London, UK. GMT was the former world standard time.</p>
<p>UTC (Coordinated Universal Time) is more precise than GMT, calculated based on atomic clocks. In situations where precision to the second is not required, UTC can be considered equivalent to GMT. UTC is the current world standard time.</p>
<p>From the Prime Meridian at Greenwich, going east is positive, going west is negative. The globe is divided into 24 standard time zones, with neighboring time zones differing by one hour.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(time.Now())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In mainland China, the standard time used is in the GMT+8 time zone, known as China Standard Time (CST).</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">go</span> run main.<span class="keyword">go</span></span><br><span class="line"><span class="number">2022</span><span class="number">-07</span><span class="number">-17</span> <span class="number">16</span>:<span class="number">37</span>:<span class="number">31.186043</span> +<span class="number">0800</span> CST m=+<span class="number">0.000066647</span></span><br></pre></td></tr></table></figure>
<p>This is the result under the default time zone, and <code>+0800 CST</code> is indicated in the <code>time.Now()</code> printout.</p>
<p>Suppose we are in the Los Angeles time zone in the United States, what result do we get?</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">TZ=<span class="string">&quot;America/Los_Angeles&quot;</span> go run main.go</span></span><br><span class="line">2022-07-17 01:39:12.391505 -0700 PDT m=+0.000069514</span><br></pre></td></tr></table></figure>
<p>As seen, the result at this time is <code>-0700 PDT</code>, which is Pacific Daylight Time. Due to the time zone difference, the results of the two executions differ by 15 hours.</p>
<p>Note that when using Docker containers, the system’s default time zone is UTC time (0 time zone), which is eight hours behind Beijing time as we need, leading to the classic scenario of the <strong>eight-hour time difference</strong> problem.</p>
<p>Strategies for dealing with time zone issues can be found in detail in the loading logic of the <code>initLocal()</code> function in <code>src/time/zoneinfo_unix.go</code>. For example, you can solve it by specifying the environment variable <code>TZ</code> or modifying the <code>/etc/localtime</code> file.</p>
<p>Because time zone issues are very important, they are discussed in the first part of the article. Let’s now move on to the usage of the <code>time</code> package.</p>
<h2 id="Time-Instant-time-Time">Time Instant <code>time.Time</code></h2>
<p>The core object in the <code>time</code> package is the <code>time.Time</code> struct. Its definition, used to represent a specific moment in time, is as follows:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Time <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// wall and ext encode the wall time seconds,</span></span><br><span class="line">    <span class="comment">// wall time nanoseconds, and optional monotonic</span></span><br><span class="line">    <span class="comment">// clock reading in nanoseconds.</span></span><br><span class="line">    wall <span class="type">uint64</span></span><br><span class="line">    ext  <span class="type">int64</span></span><br><span class="line">    loc  *Location</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In computer time handling, two types of clocks are mainly involved:</p>
<ul>
<li>Wall clock, also known as clock time, used to represent specific dates and times.</li>
<li>Monotonic clocks, which always guarantee that time moves forward without the issue of wall clock rollback, making them suitable for measuring durations.</li>
</ul>
<p>The <code>wall</code> and <code>ext</code> fields are used to record wall clock and monotonic clock times, with nanosecond precision. The bits of these fields are associated with specific information such as years, months, days, hours, minutes, and seconds.</p>
<p>The <code>loc</code> field records the time zone location. When <code>loc</code> is <code>nil</code>, it defaults to UTC time.</p>
<p>Because <code>time.Time</code> is used to represent time instants with nanosecond precision, it is typically stored and passed as a value in programs, rather than a pointer.</p>
<p>That is, in time variables or struct fields, we should use <code>time.Time</code> rather than <code>*time.Time</code>.</p>
<h5 id="Getting-time-Time">Getting <code>time.Time</code></h5>
<p>We can get the current local time using the <code>Now</code> function:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Now</span><span class="params">()</span></span> Time &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>Or, using the <code>Date</code> function, we can get a specified time based on the year, month, day, and other parameters, along with the time zone:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Date</span><span class="params">(year <span class="type">int</span>, month Month, day, hour, min, sec, nsec <span class="type">int</span>, loc *Location)</span></span> Time &#123;&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Converting-Timestamps">Converting Timestamps</h5>
<p>In the computer world, UTC time 0 on January 1, 1970, is considered Unix time 0. To convert a time instant into a Unix timestamp, we calculate the number of seconds, microseconds, etc., elapsed from Unix time 0 to the specified instant.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span></span> Unix() <span class="type">int64</span>       <span class="comment">// Seconds since Unix time 0</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span></span> UnixMicro() <span class="type">int64</span>  <span class="comment">// Microseconds since Unix time 0</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span></span> UnixMilli() <span class="type">int64</span>  <span class="comment">// Milliseconds since Unix time 0</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span></span> UnixNano() <span class="type">int64</span>   <span class="comment">// Nanoseconds since Unix time 0</span></span><br></pre></td></tr></table></figure>
<h5 id="Getting-Basic-Fields">Getting Basic Fields</h5>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">t := time.Now()</span><br><span class="line">fmt.Println(t.Date())        <span class="comment">// 2022 July 17</span></span><br><span class="line">fmt.Println(t.Year())        <span class="comment">// 2022</span></span><br><span class="line">fmt.Println(t.Month())       <span class="comment">// July</span></span><br><span class="line">fmt.Println(t.ISOWeek())     <span class="comment">// 2022 28</span></span><br><span class="line">fmt.Println(t.Clock())       <span class="comment">// 22 21 56</span></span><br><span class="line">fmt.Println(t.Day())         <span class="comment">// 17</span></span><br><span class="line">fmt.Println(t.Weekday())     <span class="comment">// Sunday</span></span><br><span class="line">fmt.Println(t.Hour())        <span class="comment">// 22</span></span><br><span class="line">fmt.Println(t.Minute())      <span class="comment">// 21</span></span><br><span class="line">fmt.Println(t.Second())      <span class="comment">// 56</span></span><br><span class="line">fmt.Println(t.Nanosecond())  <span class="comment">// 494313000</span></span><br><span class="line">fmt.Println(t.YearDay())     <span class="comment">// 198</span></span><br></pre></td></tr></table></figure>
<h2 id="Duration-time-Duration">Duration <code>time.Duration</code></h2>
<p><code>time.Duration</code> represents the time elapsed between two <code>time.Time</code> instants. It uses an <code>int64</code> to represent the count of nanoseconds, allowing for approximately 290 years of representation.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A Duration represents the elapsed time between two instants</span></span><br><span class="line"><span class="comment">// as an int64 nanosecond count. The representation limits the</span></span><br><span class="line"><span class="comment">// largest representable duration to approximately 290 years.</span></span><br><span class="line"><span class="keyword">type</span> Duration <span class="type">int64</span></span><br></pre></td></tr></table></figure>
<p>In Go, <code>time.Duration</code> is simply a number in nanoseconds. If a duration is equal to 1000000000, it represents 1 second, or 1000 milliseconds, or 1000000 microseconds, or 1000000000 nanoseconds.</p>
<p>For example, the duration between two time instants separated by 1 hour can be calculated as:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>*<span class="number">1000</span>*<span class="number">1000</span></span><br></pre></td></tr></table></figure>
<p>The <code>time</code> package defines constant values for these durations:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Nanosecond  Duration = <span class="number">1</span></span><br><span class="line">    Microsecond          = <span class="number">1000</span> * Nanosecond</span><br><span class="line">    Millisecond         </span><br><span class="line"></span><br><span class="line"> = <span class="number">1000</span> * Microsecond</span><br><span class="line">    Second               = <span class="number">1000</span> * Millisecond</span><br><span class="line">    Minute               = <span class="number">60</span> * Second</span><br><span class="line">    Hour                 = <span class="number">60</span> * Minute</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>Additionally, <code>time.Duration</code> provides methods to get values at various time granularities:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Duration)</span></span> Nanoseconds() <span class="type">int64</span>   <span class="comment">// Nanoseconds</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Duration)</span></span> Microseconds() <span class="type">int64</span>  <span class="comment">// Microseconds</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Duration)</span></span> Milliseconds() <span class="type">int64</span>  <span class="comment">// Milliseconds</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Duration)</span></span> Seconds() <span class="type">float64</span>     <span class="comment">// Seconds</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Duration)</span></span> Minutes() <span class="type">float64</span>     <span class="comment">// Minutes</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Duration)</span></span> Hours() <span class="type">float64</span>       <span class="comment">// Hours</span></span><br></pre></td></tr></table></figure>
<h2 id="Time-Calculation">Time Calculation</h2>
<p>After learning about time instants and durations, let’s see how to perform time calculations.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span></span> Add(d Duration) Time &#123;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Add</code> adds or subtracts (positive <code>d</code> means addition, negative <code>d</code> means subtraction) a <code>time.Duration</code> to a <code>time.Time</code>. We can add or subtract durations of specific nanosecond levels to a specific instant in time.</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span></span> Sub(u Time) Duration &#123;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Sub</code> returns the duration between two time instants.</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span></span> AddDate(years <span class="type">int</span>, months <span class="type">int</span>, days <span class="type">int</span>) Time &#123;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>AddDate</code> adds or subtracts values based on the year, month, and day dimensions to a <code>time.Time</code>.</li>
</ul>
<p>Of course, calculating based on the current time instant <code>time.Now()</code> is the most common requirement. Therefore, the <code>time</code> package also provides the following convenient time calculation functions:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Since</span><span class="params">(t Time)</span></span> Duration &#123;&#125;</span><br></pre></td></tr></table></figure>
<p><code>Since</code> is a shortcut for <code>time.Now().Sub(t)</code>.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Until</span><span class="params">(t Time)</span></span> Duration &#123;&#125;</span><br></pre></td></tr></table></figure>
<p><code>Until</code> is a shortcut for <code>t.Sub(time.Now())</code>.</p>
<h5 id="Usage-Example">Usage Example</h5>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">t := time.Now()</span><br><span class="line">fmt.Println(t)                              <span class="comment">// 2022-07-17 22:41:06.001567 +0800 CST m=+0.000057466</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Adding 1 hour to the time</span></span><br><span class="line">fmt.Println(t.Add(time.Hour * <span class="number">1</span>))           <span class="comment">// 2022-07-17 23:41:06.001567 +0800 CST m=+3600.000057466</span></span><br><span class="line"><span class="comment">// Adding 15 minutes</span></span><br><span class="line">fmt.Println(t.Add(time.Minute * <span class="number">15</span>))        <span class="comment">// 2022-07-17 22:56:06.001567 +0800 CST m=+900.000057466</span></span><br><span class="line"><span class="comment">// Adding 10 seconds</span></span><br><span class="line">fmt.Println(t.Add(time.Second * <span class="number">10</span>))        <span class="comment">// 2022-07-17 22:41:16.001567 +0800 CST m=+10.000057466</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Subtracting 1 hour</span></span><br><span class="line">fmt.Println(t.Add(-time.Hour * <span class="number">1</span>))          <span class="comment">// 2022-07-17 21:41:06.001567 +0800 CST m=-3599.999942534</span></span><br><span class="line"><span class="comment">// Subtracting 15 minutes</span></span><br><span class="line">fmt.Println(t.Add(-time.Minute * <span class="number">15</span>))       <span class="comment">// 2022-07-17 22:26:06.001567 +0800 CST m=-899.999942534</span></span><br><span class="line"><span class="comment">// Subtracting 10 seconds</span></span><br><span class="line">fmt.Println(t.Add(-time.Second * <span class="number">10</span>))       <span class="comment">// 2022-07-17 22:40:56.001567 +0800 CST m=-9.999942534</span></span><br><span class="line"></span><br><span class="line">time.Sleep(time.Second * <span class="number">5</span>)</span><br><span class="line">t2 := time.Now()</span><br><span class="line"><span class="comment">// Calculating the duration from t to t2</span></span><br><span class="line">fmt.Println(t2.Sub(t))                      <span class="comment">// 5.004318874s</span></span><br><span class="line"><span class="comment">// Time after 1 year</span></span><br><span class="line">t3 := t2.AddDate(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="comment">// Calculating the duration from t to the current time</span></span><br><span class="line">fmt.Println(time.Since(t))                   <span class="comment">// 5.004442316s</span></span><br><span class="line"><span class="comment">// Calculating the duration from now to next year</span></span><br><span class="line">fmt.Println(time.Until(t3))                  <span class="comment">// 8759h59m59.999864s</span></span><br></pre></td></tr></table></figure>
<h2 id="Formatting-Time">Formatting Time</h2>
<p>In other languages, a universal time template is typically used to format time. For example, in Python, <code>%Y</code> represents year, <code>%m</code> represents month, <code>%d</code> represents day, and so on.</p>
<p>However, Go is different. It uses a <strong>fixed time</strong> (it’s important to note that using other times is not allowed) as the layout template, and this fixed time is the birth time of the Go language.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">Mon Jan <span class="number">2</span> <span class="number">15</span>:<span class="number">04</span>:<span class="number">05</span> MST <span class="number">2006</span></span><br></pre></td></tr></table></figure>
<p>Formatting time involves two conversion functions:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Parse</span><span class="params">(layout, value <span class="type">string</span>)</span></span> (Time, <span class="type">error</span>) &#123;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Parse</code> converts a time string to a <code>time.Time</code> object based on the layout it can correspond to.</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span></span> Format(layout <span class="type">string</span>) <span class="type">string</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Format</code> converts a <code>time.Time</code> object to a time string based on the given layout.</li>
</ul>
<h5 id="Example">Example</h5>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">const (</span><br><span class="line">    layoutISO = &quot;2006-01-02&quot;</span><br><span class="line">    layoutUS  = &quot;January 2, 2006&quot;</span><br><span class="line">)</span><br><span class="line">date := &quot;2012-08-09&quot;</span><br><span class="line">t, _ := time.Parse(layoutISO, date)</span><br><span class="line">fmt.Println(t)                              // 2012-08-09 00:00:00 +0000 UTC</span><br><span class="line">fmt.Println(t.Format(layoutUS))             // August 9, 2012</span><br></pre></td></tr></table></figure>
<p>In the <code>time</code> package, Go provides some predefined layout template constants that can be directly used.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">const (</span><br><span class="line">    Layout      = &quot;01/02 03:04:05PM &#x27;06 -0700&quot;  // The reference time, in numerical order.</span><br><span class="line">    ANSIC       = &quot;Mon Jan _2 15:04:05 2006&quot;</span><br><span class="line">    UnixDate    = &quot;Mon Jan _2 15:04:05 MST 2006&quot;</span><br><span class="line">    RubyDate    = &quot;Mon Jan 02 15:04:05 -0700 2006&quot;</span><br><span class="line">    RFC822      = &quot;02 Jan 06 15:04 MST&quot;</span><br><span class="line">    RFC822Z     = &quot;02 Jan 06 15:04 -0700&quot;       // RFC822 with numeric zone</span><br><span class="line">    RFC850      = &quot;Monday, 02-Jan-06 15:04:05 MST&quot;</span><br><span class="line">    RFC1123     = &quot;Mon, 02 Jan 2006 15:04:05 MST&quot;</span><br><span class="line">    RFC1123Z    = &quot;Mon, 02 Jan 2006 15:04:05 -0700&quot; // RFC1123 with numeric zone</span><br><span class="line">    RFC3339     = &quot;2006-01-02T15:04:05Z07:00&quot;</span><br><span class="line">    RFC3339Nano = &quot;2006-01-02T15:04:05.999999999Z07:00&quot;</span><br><span class="line">    Kitchen     = &quot;3:04PM&quot;</span><br><span class="line">    // Handy time stamps.</span><br><span class="line">    Stamp       = &quot;Jan _2 15:04:05&quot;</span><br><span class="line">    StampMilli  = &quot;Jan _2 15:04:05.000&quot;</span><br><span class="line">    StampMicro  = &quot;Jan _2 15:04:05.000000&quot;</span><br><span class="line">    StampNano  </span><br><span class="line"></span><br><span class="line"> = &quot;Jan _2 15:04:05.000000000&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>Here’s a table of optional layout parameters:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Year            06/2006</span><br><span class="line">Month           01/1/Jan/January</span><br><span class="line">Day             02/2/_2</span><br><span class="line">Weekday         Mon/Monday</span><br><span class="line">Hour            03/3/15</span><br><span class="line">Minute          04/4</span><br><span class="line">Second          05/5</span><br><span class="line">Milliseconds    .000/.999</span><br><span class="line">Microseconds    .000000/.999999</span><br><span class="line">Nanoseconds     .000000000/.999999999</span><br><span class="line">am/pm           PM/pm</span><br><span class="line">Timezone        MST</span><br><span class="line">Timezone offset -0700/-07/-07:00/Z0700/Z07:00</span><br></pre></td></tr></table></figure>
<h2 id="Timezone-Conversion">Timezone Conversion</h2>
<p>At the beginning of the article, we discussed timezone issues. If in your code, you need to get the result of the same <code>time.Time</code> in different time zones, you can use its <code>In</code> method.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span></span> In(loc *Location) Time &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>It’s straightforward to use. Let’s see an example code:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">now := time.Now()</span><br><span class="line">fmt.Println(now)                               <span class="comment">// 2022-07-18 21:19:59.9636 +0800 CST m=+0.000069242</span></span><br><span class="line"></span><br><span class="line">loc, _ := time.LoadLocation(<span class="string">&quot;UTC&quot;</span>)</span><br><span class="line">fmt.Println(now.In(loc))                        <span class="comment">// 2022-07-18 13:19:59.9636 +0000 UTC</span></span><br><span class="line"></span><br><span class="line">loc, _ = time.LoadLocation(<span class="string">&quot;Europe/Berlin&quot;</span>)</span><br><span class="line">fmt.Println(now.In(loc))                        <span class="comment">// 2022-07-18 15:19:59.9636 +0200 CEST</span></span><br><span class="line"></span><br><span class="line">loc, _ = time.LoadLocation(<span class="string">&quot;America/New_York&quot;</span>)</span><br><span class="line">fmt.Println(now.In(loc))                        <span class="comment">// 2022-07-18 09:19:59.9636 -0400 EDT</span></span><br><span class="line"></span><br><span class="line">loc, _ = time.LoadLocation(<span class="string">&quot;Asia/Dubai&quot;</span>)</span><br><span class="line">fmt.Println(now.In(loc))                        <span class="comment">// 2022-07-18 17:19:59.9636 +0400 +04</span></span><br></pre></td></tr></table></figure>
<h2 id="Conclusion">Conclusion</h2>
<p>In general, the functions and methods provided by the <code>time</code> package for time processing meet our usage needs.</p>
<p>Interestingly, Go’s time formatting conversion must adopt Go’s birth time. It’s quite self-centered.</p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Performance analysis of goroutine switching</title>
    <url>/2024/03/20/Performance%20analysis%20of%20goroutine%20switching/</url>
    <content><![CDATA[<p><img src="https://images.hxzhouh.com/blog-images/2024/03/057d94f39fc9a6838acdbc94b915f654.png" alt="Pasted image 20240320201037"></p>
<blockquote>
<p>Note: Non-members can read the full story in this <a href="https://medium.hxzhouh.com/d91a49604cae?source=friends_link&amp;sk=f3140285d590037631e7f7354ee9f629">link</a>.</p>
</blockquote>
<h1>Introduction</h1>
<p>In the previous article, we verified the context switch overhead of Linux processes and threads experimentally, which was approximately between 3-5 microseconds. This overhead is not significant, but for massively concurrent internet servers and typical computer programs, the characteristics are as follows:</p>
<ul>
<li>High concurrency: Thousands to tens of thousands of user requests need to be processed per second.</li>
<li>Short cycles: The processing time per user should be as short as possible, often in the millisecond range.</li>
<li>High network I/O: Often requires network I/O from other machines, such as Redis, MySQL, etc.</li>
<li>Low computation: General CPU-intensive operations are not frequent.</li>
</ul>
<span id="more"></span>
<p>Even with a context switch overhead of 3-5 microseconds, it can still appear somewhat performance-degrading if the context switch volume is particularly high. For example, the Apache web server, which was the software product under this model, suffered from this. (In fact, when Linux operating system was designed, its goal was to be a general-purpose operating system rather than specifically designed for high-concurrency server-side applications.)</p>
<p>To avoid frequent context switches, there is another asynchronous non-blocking development model. That is to use a process or thread to handle a large number of user requests and then improve performance through IO multiplexing (processes or threads do not block, saving the overhead of context switches). Nginx and Node.js are typical representatives of this model. Frankly speaking, in terms of program execution efficiency, this model is the most machine-friendly, with the highest efficiency (better than the coroutine development model mentioned below). Therefore, Nginx has replaced Apache as the preferred web server. However, the problem with this programming model lies in its unfriendliness to development, which is overly mechanized and deviates from the original intention of abstracting the concept of processes. Normal linear thinking of humans is disrupted, and application layer developers are forced to write code with non-human-like thinking, making code debugging extremely difficult.</p>
<p>So, some smart heads continued to brainstorm at the application layer and designed “threads” that do not require process/thread context switching, called coroutines. Using coroutines to handle high-concurrency application scenarios can not only meet the original intention of processes but also allow developers to use normal linear thinking to handle their business, while also eliminating the expensive overhead of process/thread context switches. Therefore, it can be said that coroutines are a good patch for the process model in the scenario of processing massive requests on Linux.</p>
<p>With the background introduced, what I want to say is that although coroutine encapsulation is lightweight, it still incurs some additional costs. So, let’s take a look at how small these additional costs are.</p>
<h2 id="Coroutine-Overhead-Test">Coroutine Overhead Test</h2>
<blockquote>
<p>This article is based on go 1.22.1.</p>
</blockquote>
<ul>
<li><strong>1. Coroutine Context Switch CPU Overhead</strong><br>
The test process involves continuously yielding the CPU between coroutines. The core code is as follows.</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">&quot;fmt&quot;</span>  </span><br><span class="line">    <span class="string">&quot;runtime&quot;</span>    </span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cal</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++ &#123;  </span><br><span class="line">       runtime.Gosched()  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    runtime.GOMAXPROCS(<span class="number">1</span>)  </span><br><span class="line">    currentTime := time.Now()  </span><br><span class="line">    fmt.Println(currentTime)  </span><br><span class="line">    <span class="keyword">go</span> cal()  </span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++ &#123;  </span><br><span class="line">       runtime.Gosched()  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    fmt.Println(time.Now().Sub(currentTime) / <span class="number">2000000</span>)  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Compilation and execution</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  trace git:(main) ✗ go run main.go              </span><br><span class="line">2024-03-20 19:52:24.772579 +0800 CST m=+0.000114834</span><br><span class="line">54ns</span><br><span class="line">➜  trace git:(main) ✗ </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>The average overhead of each coroutine switch is 54ns, which is approximately 1/70 of the context switch overhead measured in the previous article, about 3.5 microseconds, and is approximately 70 times lower than the overhead caused by system calls.</p>
<p><strong>Coroutine Memory Overhead</strong><br>
In terms of space, when coroutines are initialized and created, a stack of 2KB is allocated for them. The stack of threads is much larger than this number, which can be checked through the <code>ulimit</code> command, usually in several megabytes. On my Mac, it’s 8MB. If a coroutine is created for each user to handle, 2GB of memory is sufficient for handling 1 million concurrent user requests, while the thread model would require 8TB.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  trace git:(main) ✗ ulimit -a   </span><br><span class="line">-t: cpu time (seconds)              unlimited</span><br><span class="line">-f: file size (blocks)              unlimited</span><br><span class="line">-d: data seg size (kbytes)          unlimited</span><br><span class="line">-s: stack size (kbytes)             8176</span><br><span class="line">-c: core file size (blocks)         0</span><br><span class="line">-v: address space (kbytes)          unlimited</span><br><span class="line">-l: locked-in-memory size (kbytes)  unlimited</span><br><span class="line">-u: processes                       2666</span><br><span class="line">-n: file descriptors                12544</span><br></pre></td></tr></table></figure>
<h1>Conclusion</h1>
<p>Since coroutines complete context switches in user space, the switch time is only slightly over 50ns, which is 70 times higher than process switches. The stack memory required by a single coroutine is also quite small, only requiring 2KB. Therefore, coroutines have shined in high-concurrency scenarios in backend internet applications in recent years.</p>
<p>Whether in terms of space or time performance, they are much better than processes (threads). Then why doesn’t Linus implement them in the operating system? For the sake of better real-time performance, the operating system may preempt the CPU of processes with higher priorities. However, coroutines cannot achieve this and still rely on the coroutines currently using the CPU to release it actively, which is not consistent with the implementation purpose of the operating system. Therefore, the efficiency of coroutines comes at the cost of sacrificing preemption.</p>
<p>Coroutines ultimately execute attached to operating system threads.</p>
<p>A question we need to consider is:<br>
Does using coroutines mean threads no longer switch? The frequency of thread switches basically depends on the number of threads. When using coroutines, you need to specify tasks for each thread. For the same workload, the number of threads required by coroutines should always be higher than that of automatically allocated thread pools.<br>
Therefore:<br>
Using threads = thread switch overhead (low)<br>
Using coroutines = thread switch overhead (high) + coroutine switch overhead</p>
<p>Then CPU overhead:<br>
Instruction cycles of threads = interrupt detection + instruction execution (including fetch, decode, and execute)<br>
Instruction cycles of coroutines = interrupt detection + instruction execution + interrupt detection + coroutine signal detection</p>
<p>So, I have the following conclusion:<br>
In terms of performance, IO multiplexing + thread pool completely outperforms coroutines; but in terms of convenience, coroutines are still easier to use.</p>
<p>Because calling coroutines in Go is so convenient, some Go programmers use the <code>go</code> keyword casually. It should be noted that before switching to a coroutine, the coroutine must be created first. Once created, plus the scheduling overhead, it increases to 400ns, which is almost equivalent to the time consumed by a system call. Although coroutines are efficient, they should not be used casually,</p>
<p>If you like my articles, consider to :</p>
<ol>
<li>Drop me a follow -&gt; <a href="https://medium.hxzhouh.com/">huizhou92</a></li>
<li>Leave a clap👏 (50 👏👏👏👏would be the best) and a comment if you want to interact with me.</li>
<li>Receive an email every time I post on Medium -&gt; <a href="https://medium.hxzhouh.com/subscribe">Click here</a>!</li>
<li>If you find my article helpful to you, please buy me a cup of <a href="https://www.buymeacoffee.com/hxzhouh">coffee</a></li>
</ol>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust Lesson 1： A Gopher&#39;s View on Rust</title>
    <url>/2024/04/26/Rust%20Lesson%201%20A%20Gopher&#39;s%20View%20on%20Rust/</url>
    <content><![CDATA[<blockquote>
<p>source ：<a href="https://tonybai.com/2024/04/22/gopher-rust-first-lesson-all-about-rust">https://tonybai.com/2024/04/22/gopher-rust-first-lesson-all-about-rust</a></p>
</blockquote>
<p>To talk about which backend programming language has been the hottest in the past two years,If <a href="https://www.rust-lang.org/">Rust</a> claims to be second , and no one dares to say first . <a href="https://survey.stackoverflow.co/2023/#section-admired-and-desired-programming-scripting-and-markup-languages">Rust has topped the Stack Overflow’s most admired programming languages for 8 consecutive years</a>, and it has even been referred to as the “perfect programming language” by Jack Dorsey, the co-founder of Twitter:</p>
<h1>1. Why should I learn Rust?</h1>
<p>Learning Rust isn’t about riding the hype train; it’s about practical development needs. In certain situations, Go’s performance isn’t particularly good due to issues like STW. From benchmarks, Rust’s performance is three times better than Go’s: <a href="https://goodmanwen.github.io/Programming-Language-Benchmarks-Visualization/">The Computer Language Benchmarks Game Visualization</a> In our own business, after rewriting a gateway service in Rust, performance improved by about 70%. This is a significant improvement for our business scenario. Moreover, Rust’s widespread use in the Linux kernel validates its reliability, making Rust worth trying.</p>
<p>However, the rise of Rust in certain domains has indeed sparked some dissatisfaction and controversy in other programming language communities. Particularly, the proposition from some in the Rust community to “Rewrite Everything in Rust” has made many programming language communities, especially the C++ community, quite uneasy. The Go community, on the other hand, is relatively more open and friendly. The mainstream view is that Go and Rust can complement each other, with each language playing its role in its respective areas of strength. Through cooperation rather than confrontation, developers can be provided with better choices. For more details, you can refer to an article co-authored by Steve Francia, former product manager of the Go team and author of Hugo, <a href="https://thenewstack.io/rust-vs-go-why-theyre-better-together/">Rust vs. Go: Why They’re Better Together</a>.</p>
<p>In other words, Go is still my primary language, but considering the requirements of my work, I need to systematically learn Rust. To avoid the “from learning to giving up” scenario, I plan to learn Rust while outputting. On one hand, this can motivate me to learn, and on the other hand, I hope to interact with readers promptly and correct any misunderstandings in learning.</p>
<p>I’ve always believed that when you start learning a new language, you must understand its history and current status. This way, you can build an overall understanding of the language and anticipate its future direction. Moreover, it can establish a sense of “security” in learning, believing that it can bring you enough value and returns, thus enabling you to learn more confidently.</p>
<p>In this article, I’ll first explore the history of Rust’s development and its current state, as well as its unique design philosophy. I’ll also make a simple comparison with Go, hoping to provide myself and the readers with a preliminary understanding of Rust.</p>
<h1>2. Rust’s History and Current Status</h1>
<h2 id="2-1-The-Birth-and-Evolution-of-Rust">2.1 The Birth and Evolution of Rust</h2>
<p>Rust was born in 2006, a year earlier than the “conspiracy” of the three Google giants to create the Go language. However, compared to the three founders of Go: Ken Thompson, Turing Award winner, co-inventor of C syntax, and father of Unix; Rob Pike, leader of the Plan 9 operating system and original designer of UTF-8 encoding; and Robert Griesemer, one of the designers of the HotSpot virtual machine for Java and the JavaScript V8 engine for the Chrome browser, the identity and status of Rust’s father, Graydon Hoare, were not so “prominent”. At that time, he was just a Canadian developer under 30 years old working at Mozilla Research:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/04/f0511d1952c37285e033a815d94fdafe.png" alt="Pasted image 20240424162718"></p>
<p>The birth of a new generation programming language often comes with a story, such as the founders of Go frequently encountering long compile times in C++ projects at Google. Whenever they started compiling a C++ project, they had to wait for a long time, during which they could drink several cups of coffee. This deeply impressed them and made them realize the need to design a new language with faster compilation speed, thus Go was born. Similar to the “drink coffee, wait for C++ project to compile” scenario, the birth of Rust also has a story:</p>
<p>In 2006, 29-year-old Hoare returned home to Vancouver one day, only to find that the elevator was broken, and the elevator software crashed! He had to climb the stairs back to his 21st-floor apartment. As he climbed the stairs, he felt very annoyed. He thought, “We programmers actually can’t create an elevator that can work properly without crashing!” Hoare knew that many such crashes were caused by issues with memory usage in programs. The software inside devices like elevators is usually written in C++ or C, languages known for allowing programmers to write code that runs very fast and is quite compact. The problem is that these languages also make it easy to inadvertently introduce memory errors, which can lead to crashes. Hoare decided to do something about it. So he opened his laptop and started designing a new programming language, one that he hoped could write small and fast code without memory errors, and he named it <strong>Rust</strong>.</p>
<p>This story is obviously unverifiable. But what can be confirmed is that for several years starting from 2006, the personal language project Rust created by Hoare was not actually used to improve elevator systems, but was sponsored by Mozilla and used in the continuous development of Mozilla’s browser engine Servo. Mozilla officially announced the project in 2010, and Hoare also introduced the Rust language for the first time in a <a href="http://venge.net/graydon/talks/intro-talk-2.pdf">speech in 2010</a>:<br>
<img src="https://images.hxzhouh.com/blog-images/2024/04/d3e4b587df3b6506555016e0e5d81e82.png" alt="Pasted image 20240424162832"><br>
The first line of Rust code was also open-sourced in 2010:<br>
<img src="https://images.hxzhouh.com/blog-images/2024/04/268bb398052726a456879a821561db54.png" alt="Pasted image 20240424162852"><br>
In addition, the initial Rust compiler was implemented in OCaml, and in 2011, the Rust team re-implemented the compiler in Rust based on LLVM and achieved bootstrapping. That same year, Rust also got its own logo, <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=680521">inspired by a bicycle gear</a>:<br>
<img src="https://images.hxzhouh.com/blog-images/2024/04/455a441a093721eb30097e64719b718b.png" alt="Pasted image 20240424162917"><br>
In 2012, <a href="https://www.infoq.com/news/2012/08/Interview-Rust/">Graydon Hoare was interviewed by InfoQ</a> and talked about leading the Rust team in developing Rust, a systems programming language at Mozilla, including Rust’s features, advantages and differences compared to C/C++/Java/Go, and Rust 1.0 release plans.</p>
<p>However, in the following year, in 2013, <a href="https://wikitia.com/wiki/Graydon_Hoare">Graydon Hoare resigned as leader of the Rust team due to exhaustion</a>, leaving his own Rust team and distancing himself from Rust development. Hoare’s departure was a significant loss for the Rust team and the language itself, but the Rust community and team took proactive measures to ensure the continued development and evolution of Rust.</p>
<p>In November 2014, <a href="https://blog.rust-lang.org/2014/11/20/Cargo.html">Rust officially announced cargo and crates.io</a>. Cargo is Rust’s project build manager, while <a href="http://crates.io">crates.io</a> is the central package repository for Rust code maintained by the Rust team. With cargo, developers can easily build and publish packages to <a href="http://crates.io">crates.io</a> or pull dependencies of Rust code from <a href="http://crates.io">crates.io</a>.</p>
<p>On May 15, 2015, Rust reached a milestone moment: <a href="https://blog.rust-lang.org/2015/05/15/Rust-1.0.html">Rust 1.0 was officially released!</a>, which was 3 years later than <a href="https://go.dev/blog/go1">the release of Go 1.0</a>. However, as the official blog stated, “the release of version 1.0 marks the end of the chaos. This version is the formal beginning of our stability commitment, providing a solid foundation for building applications and libraries. From now on, major changes are essentially out of scope (some minor warnings apply, such as compiler errors).”</p>
<p>After the release of Rust 1.0, the release cycle and rhythm of Rust were determined, with <a href="https://blog.rust-lang.org/2014/10/30/Stability.html">a stable version released every 6 weeks</a>. Following this rhythm, Rust 1.1 Beta was released simultaneously with Rust 1.0. After six weeks of testing, Rust 1.1 Beta became Rust 1.1 stable, and Rust 1.2 Beta was released, and so on. Of course, Rust also has a nightly build version, which contains the latest but unstable features. Compared to the Go community and developers who can only “get high” twice a year, Rust developers and the community are more fortunate to “get high” every six weeks!</p>
<p>Rust’s evolution is <a href="https://github.com/rust-lang/rfcs">driven by RFCs (Request For Comments)</a>, and this measure was <a href="https://github.com/rust-lang/rfcs/blob/master/text/0002-rfc-process.md">established based on RFCs before the release of Rust 1.0</a>. This is similar to the Go Proposal process, but it feels more standardized and rigorous, which of course is related to the composition and rules of governance structures of the two languages.</p>
<p>However, the</p>
<p>evolution and development of Rust is not as smooth and perfect as one might expect. For example, at the <a href="https://blog.rust-lang.org/2018/12/06/Rust-1.31-and-Rust-2018.html">Rust 2018 edition launch event</a>, <a href="https://github.com/alexcrichton">Alex Crichton</a>, one of the core members of the Rust team, mentioned in the keynote speech that in the evolution of the Rust language, some past design decisions may not have been optimal, which sometimes hinders the language’s progress. One example is the error handling mechanism. However, Rust’s development team has proven that they are good at introspection and adjustment. For example, the aforementioned error handling mechanism was greatly improved with the introduction of the “Try” trait in Rust 1.26, and with the release of Rust 1.31, the Rust 2018 edition resolved many issues with Rust’s design.</p>
<h2 id="2-2-Rust’s-Current-Status">2.2 Rust’s Current Status</h2>
<p>In the past decade, Rust has gradually developed from a personal project of Graydon Hoare to a popular systems programming language with a large and active community. According to <a href="https://octoverse.github.com/projects#languages">GitHub’s 2020 Octoverse report</a>, Rust was the fastest-growing programming language in the GitHub open-source community, with 235% more contributors than in 2019, making it the most loved language in the Stack Overflow Developer Survey for five consecutive years from 2016 to 2020.</p>
<p>However, it should be pointed out that Rust is still not widely used in large-scale commercial projects, especially compared to C/C++/Java/Go. The main reason is that Rust’s ecosystem and maturity are still not comparable to those languages. For example, the Alibaba e-commerce team mentioned in 2017 that they have 100,000+ Java developers and have invested heavily in Java and the JVM ecosystem. They also mentioned that in recent years, Alibaba has considered using Rust to solve some distributed computing problems, but has not yet considered using Rust in large-scale commercial projects due to concerns about the immaturity of Rust’s ecosystem.</p>
<p>However, Rust is gradually being adopted and applied in some fields and areas where C/C++ is traditionally dominant, such as systems programming, game development, and blockchain systems. For example, in the blockchain field, in addition to the Solana project I mentioned earlier, the Parity project, which is known for the development of the Polkadot blockchain framework, is also developed in Rust. In addition, in the blockchain field, some small and medium-sized blockchain projects also use Rust to develop blockchain systems. For example, the <a href="https://github.com/rust-bitcoin/rust-bitcoin">Bitcoin Light client library BTC-Rust</a> implemented by the Bitcoin-NG team is developed in Rust.</p>
<h1>3. The Design Philosophy of Rust</h1>
<p><strong>The design philosophy of a programming language is like the values of a person—it dictates its behavior.</strong> If you don’t agree with someone’s values, it’s hard to maintain a continuous relationship, as they say, “different paths do not converge.” Similarly, if you don’t agree with the design philosophy of a programming language, you’ll likely encounter the problems mentioned earlier in your subsequent language learning, which may dampen your motivation to continue learning. Therefore, before diving into Rust syntax and coding, let’s first understand Rust’s design philosophy. After understanding these, you’ll have a deeper understanding of why you’re learning Rust.</p>
<h2 id="3-1-Core-Values-of-Rust">3.1 Core Values of Rust</h2>
<p>In June 2019, Rust core team member Stephen Klabnik delivered a speech titled <a href="https://www.infoq.com/presentations/rust-tradeoffs/">How Rust Views Tradeoffs</a> at QCon London, where he outlined his personal understanding of Rust’s core values, <strong>which are the points Rust’s team refuses to compromise on when making design decisions</strong>, including memory safety, execution speed, and productivity:<br>
<img src="https://images.hxzhouh.com/blog-images/2024/04/2827e93a0c773f5a5a96d57843c30fdd.png" alt="Pasted image 20240424163821"></p>
<p>According to Stephen Klabnik, these three core values are ordered, with memory safety being paramount, followed by high performance, and finally productivity. When conflicts arise among them, decisions are made according to the highest value!</p>
<p>This is consistent with the official description of Rust:<br>
<img src="https://images.hxzhouh.com/blog-images/2024/04/32d3930c49c4fcb209a74b0b347bf3ac.png" alt="Pasted image 20240424163834"></p>
<p>The “Reliable” corresponds to memory safety, while “efficient” has two meanings: runtime efficiency and high productivity during development.</p>
<p>These three values are the design goals of the Rust language and the essence of its characteristics and advantages. After losing Graydon Hoare, the father of the language, these values became the fundamental basis for the Rust core team to determine the direction of language evolution.</p>
<ol>
<li><strong>Memory Safety</strong><br>
Memory safety is <strong>the most important value</strong> for Rust. It means that Rust programs won’t suffer from memory leaks, buffer overflows, dangling pointers, and other memory-related errors at runtime (without using unsafe code). These errors not only lead to program crashes but can also result in security vulnerabilities. Rust ensures memory safety by features like ownership, lifetimes, and borrowing, which are thoroughly checked at compile time.</li>
</ol>
<p>Rust’s memory safety mechanism not only enhances program stability and reliability but also reduces development and maintenance complexity. With Rust’s ability to detect memory errors at compile time, developers don’t have to spend a lot of time and effort searching for and fixing these errors.</p>
<ol>
<li><strong>High Performance</strong></li>
</ol>
<p>High performance is the second core value of Rust, closely following memory safety. One of Rust’s design goals is to be a high-performance systems programming language. Through features like zero-cost abstractions, move semantics, and generic programming, Rust enables programs to achieve performance comparable to traditional systems programming languages like C and C++ at runtime.</p>
<p>Rust’s high-performance mechanism not only improves program execution speed but also reduces hardware costs. Because Rust can better utilize hardware resources, Rust programs typically outperform programs in other languages with the same hardware conditions and resource overhead.</p>
<ol>
<li><strong>Productivity</strong></li>
</ol>
<p>Productivity is the third core value of Rust. One of Rust’s design goals is to be a language that enhances developer productivity. With features like the Cargo package manager, smart editor support, rich library ecosystem, and detailed system documentation, Rust makes it easier for developers to write, debug, and maintain Rust programs.</p>
<h2 id="3-2-Secondary-Values-of-Rust">3.2 Secondary Values of Rust</h2>
<p>Stephen Klabnik also summarized three secondary values of Rust:<br>
<img src="https://images.hxzhouh.com/blog-images/2024/04/b906bd07490a8c0f1b5c509a0f8974a5.png" alt="Pasted image 20240424163847"></p>
<p>We see that Rust’s secondary values include ergonomics, compile times, and correctness. These values are also design goals of the Rust language, but unlike the primary core values mentioned above, they are subject to compromise.</p>
<p><strong>Ergonomics</strong> refers to the ease of use of the Rust language, which is an important design goal of Rust. Rust aims to make it easier for developers to write Rust programs through simple syntax and a rich library ecosystem.</p>
<p><strong>Compile Times</strong> refer to the compilation time of the Rust compiler. Rust’s compiler is slow, which is a problem that the Rust team is actively working to optimize. However, the Rust team is more concerned about the final execution speed of the binary than making the compiler faster, hence why compile time is a secondary value.</p>
<p><strong>Correctness</strong> refers to the correctness of Rust programs. Rust really cares about whether your program is correct and aims to ensure the correctness of Rust programs as much as possible through a powerful type system and static checks. However, Rust is not willing to rely entirely on types and proof assistants to prove the correctness of your code.</p>
<h2 id="3-3-Comparison-with-Go’s-Values">3.3 Comparison with Go’s Values</h2>
<p>Let’s compare Go’s official introduction to Go’s implicit values (design philosophy):<br>
<img src="https://images.hxzhouh.com/blog-images/2024/04/4d25094f8a0cfe86a13b2da3056cb192.png" alt="Pasted image 20240424163901"></p>
<p>In the official description of Go, there are three keywords: Simple, Secure, and Scalable.</p>
<p><strong>Simple</strong> is the primary design principle of Go. The designers of Go hope that Go can be simple and easy to use, enabling developers to learn and use Go more quickly to rapidly develop production capabilities. Go has a simple and understandable syntax, and it removes many complex features found in other programming languages, such as type hierarchies and inheritance, making Go more concise, easy to learn, read, use, and maintain.</p>
<p><strong>Secure</strong> is about making Go more secure and reliable, avoiding common security vulnerabilities found in many other programming languages. Go achieves this by automatically managing memory through garbage collection, avoiding common memory leaks and buffer overflow issues found in many other programming languages. Additionally, Go provides lightweight goroutines and channels, making it easier for developers to implement concurrent programming. With data race detection tools, Go also prevents common data race issues in concurrent programming. Furthermore, Go provides a simple and easy-to-use explicit error handling mechanism, ensuring no error handling is missed by developers.</p>
<p><strong>Scalable</strong> is reflected in Go’s engineering orientation, built-in concurrency, and a philosophy that emphasizes composition. The designers of Go hope that Go can better support scalability, enabling Go programs to better adapt to different organizational scales, workloads, and hardware environments. Go achieves this through simple syntax, module-based reproducible build management, extremely fast compilation speed, high-quality standard library, practical toolchain, powerful built-in concurrency mechanism, and interface-oriented programming, making Go programs more scalable and productive.</p>
<h1>4 Conclusion</h1>
<p>In summary, Rust prioritizes safety, low-level control, and optimal performance, while Go emphasizes simplicity, security, scalability, and engineering efficiency. There are differences in their positioning and design philosophies, but they also share some common characteristics, such as modern toolchains and active communities.</p>
<p>In this article, we’ve learned about the birth, current development, and unique design philosophy of Rust. By comparing it with Go, we can see some differences in their backgrounds, goals, and design philosophies.</p>
<p>As software systems become increasingly complex, the demand for security, performance, and concurrency is also rising. As a new language focused on low-level systems programming and performance optimization, Rust is attracting more and more developers’ attention. I believe that through comprehensive and systematic learning of Rust later on, we will all gain a deeper understanding and mastery of Rust.</p>
<p>If you find Rust’s values align with yours and you agree with Rust’s future development, stay tuned for the next article, where we’ll start hands-on learning Rust!</p>
<h1>5 References</h1>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Rust_(programming_language)">Rust Wikipedia</a></li>
<li><a href="https://www.technologyreview.com/2023/02/14/1067869/rust-worlds-fastest-growing-programming-language/">How Rust went from a side project to the world’s most-loved programming language</a></li>
<li><a href="https://rustmagazine.org/issue-1/2022-review-the-adoption-of-rust-in-business/">2022 Review | The adoption of Rust in Business</a></li>
<li><a href="https://www.infoq.com/presentations/rust-tradeoffs/">How Rust Views Tradeoffs</a></li>
<li><a href="https://rustacean.net/">Unofficial Rust mascot Ferris</a></li>
</ul>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac: Slowing Down Your Disk Speed by 60x</title>
    <url>/2024/04/27/Slowing%20Down%20Your%20Disk%20Speed%20by%2060x/</url>
    <content><![CDATA[<p>Sometimes in the development process, we need to simulate slow disk conditions to verify if our code can still function on low-performance machines. Typically, we would use <code>cgroup</code> or Docker for this purpose, but it can be cumbersome on a MacBook. However, there’s a built-in tool on macOS that can help us achieve this: <code>dmc</code>.</p>
<span id="more"></span>
<blockquote>
<p>This piece was originally published in the Medium MPP plan. If you’re a Medium user, feel free to follow me on <a href="https://medium.hxzhouh.com/">Medium</a>. Thanks!</p>
</blockquote>
<h2 id="Using-dmc">Using <code>dmc</code></h2>
<p>macOS comes with <code>dmc</code>, which we can explore using <code>dmc -h</code>.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  /tmp dmc -h</span><br><span class="line">usage: dmc &lt;commands...&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">commands:</span></span><br><span class="line">  start &lt;mount&gt; (profile_name|profile_index [-boot])</span><br><span class="line">  stop &lt;mount&gt;</span><br><span class="line">  status &lt;mount&gt; [-json]</span><br><span class="line">  show profile_name|profile_index</span><br><span class="line">  list</span><br><span class="line">  select &lt;mount&gt; (profile_name|profile_index)</span><br><span class="line">  configure &lt;mount&gt; &lt;type&gt; &lt;access_time&gt; &lt;read_throughput&gt; &lt;write_throughput&gt; [&lt;ioqueue_depth&gt; &lt;maxreadcnt&gt; &lt;maxwritecnt&gt; &lt;segreadcnt&gt; &lt;segwritecnt&gt;]</span><br><span class="line">  help | -h</span><br></pre></td></tr></table></figure>
<p>It offers various disk profiles to choose from:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  /tmp dmc list</span><br><span class="line">  0: Faulty 5400 HDD</span><br><span class="line">  1: 5400 HDD</span><br><span class="line">  2: 7200 HDD</span><br><span class="line">  3: Slow SSD</span><br><span class="line">  4: SATA II SSD</span><br><span class="line">  5: SATA III SSD</span><br><span class="line">  6: PCIe 2 SSD</span><br><span class="line">  7: PCIe 3 SSD</span><br></pre></td></tr></table></figure>
<p>Each profile corresponds to different speed modes, such as:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  /tmp dmc show 0</span><br><span class="line">Profile: Faulty 5400 HDD</span><br><span class="line"> Type: HDD</span><br><span class="line"> Access time: 52222 us</span><br><span class="line"> Read throughput: 50 MB/s</span><br><span class="line"> Write throughput: 50 MB/s</span><br><span class="line"> I/O Queue Depth: 16</span><br><span class="line"> Max Read Bytes: 16777216</span><br><span class="line"> Max Write Bytes: 16777216</span><br><span class="line"> Max Read Segments: 128</span><br><span class="line"> Max Write Segments: 128</span><br><span class="line">➜  /tmp dmc show 7</span><br><span class="line">Profile: PCIe 3 SSD</span><br><span class="line"> Type: SSD</span><br><span class="line"> Access time: 3 us</span><br><span class="line"> Read throughput: 3072 MB/s</span><br><span class="line"> Write throughput: 2560 MB/s</span><br><span class="line"> I/O Queue Depth: 256</span><br><span class="line"> Max Read Bytes: 67108864</span><br><span class="line"> Max Write Bytes: 67108864</span><br><span class="line"> Max Read Segments: 256</span><br><span class="line"> Max Write Segments: 256</span><br></pre></td></tr></table></figure>
<p>Using it is straightforward. Suppose our disk is mounted on <code>/tmp/data</code>, and we want to set it to level 0. We simply execute:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo dmc start /tmp/data 0</span><br></pre></td></tr></table></figure>
<p>Then, to verify the status:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  /tmp dmc status /tmp/data</span><br><span class="line">Disk Mount Conditioner: ON</span><br><span class="line">Profile: Custom</span><br><span class="line"> Type: HDD</span><br><span class="line"> Access time: 52222 us</span><br><span class="line"> Read throughput: 50 MB/s</span><br><span class="line"> Write throughput: 50 MB/s</span><br><span class="line"> I/O Queue Depth: 16</span><br><span class="line"> Max Read Bytes: 1048576</span><br><span class="line"> Max Write Bytes: 1048576</span><br><span class="line"> Max Read Segments: 128</span><br><span class="line"> Max Write Segments: 128</span><br></pre></td></tr></table></figure>
<h2 id="Verification">Verification</h2>
<p>We can validate using the <code>fio</code> tool:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  /tmp fio --filename=./data/test1 -direct=1 --rw=write --ioengine=posixaio --bs=1m --iodepth=32 --size=1G --numjobs=1 --runtime=60 --time_base=1 --group_reporting --name=test-seq-read --log_avg_msec=1000 </span><br></pre></td></tr></table></figure>
<p>Writing a 1GB file sequentially yields a speed of only 95.4MB/s, with IOPS at 91:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Run status group 0 (all jobs):</span><br><span class="line">  WRITE: bw=91.0MiB/s (95.4MB/s), 91.0MiB/s-91.0MiB/s (95.4MB/s-95.4MB/s), io=5468MiB (5734MB), run=60073-60073msec</span><br></pre></td></tr></table></figure>
<p>Now, with <code>dmc</code> turned off and the same command:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/tmp sudo dmc stop /tmp/data</span><br><span class="line">/tmp fio --filename=./data/test1 -direct=1 --rw=write --ioengine=posixaio --bs=1m --iodepth=32 --size=1G --numjobs=1 --runtime=60 --time_base=1 --group_reporting --name=test-seq-read --log_avg_msec=1000 </span><br></pre></td></tr></table></figure>
<p>The test results in 3211MB/s and IOPS of 3061, which represents the true speed of the disk:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">WRITE: bw=3062MiB/s (3211MB/s), 3062MiB/s-3062MiB/s (3211MB/s-3211MB/s), io=179GiB (193GB), run=60006-60006msec</span><br></pre></td></tr></table></figure>
<p>In conclusion, <code>dmc</code> is quite handy in testing scenarios. I hadn’t known about this software before; if you find it useful, give it a try.</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Smart Go compiler: Slimming</title>
    <url>/2024/05/11/Smart%20Go%20compiler%20Slimming/</url>
    <content><![CDATA[<h1>Smart Go compiler:  Slimming</h1>
<h3 id="1-Experiment-Which-Functions-are-Included-in-the-Final-Executable">1. Experiment: Which Functions are Included in the Final Executable?</h3>
<blockquote>
<p>This article is first published in the medium MPP plan. If you are a medium user, please follow me in <a href="https://medium.hxzhouh.com/">medium</a>. Thank you very much.</p>
</blockquote>
<p>Let’s conduct an experiment to determine which functions are included in the final executable! We’ll create a demo1 with the following directory structure and code snippets:</p>
<span id="more"></span>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dead-code-elimination/demo1</span></span><br><span class="line">$ tree -F .</span><br><span class="line">.</span><br><span class="line">├── <span class="keyword">go</span>.mod</span><br><span class="line">├── main.<span class="keyword">go</span></span><br><span class="line">└── pkga/</span><br><span class="line">    └── pkga.<span class="keyword">go</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// main.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;demo/pkga&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    result := pkga.Foo()</span><br><span class="line">    fmt.Println(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pkga/pkga.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> pkga</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Foo</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello from Foo!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Bar</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;This is Bar.&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The example is very simple! The main function calls the exported function Foo from the pkga package, which also contains the Bar function (although it is not called by any other function). Now let’s compile this module and examine the functions from the pkga package included in the compiled executable file! (This article uses Go version 1.22.0)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go build</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go tool nm demo | grep demo</span></span><br></pre></td></tr></table></figure>
<p>Surprisingly, we didn’t find any symbol information related to pkga in the output of the executable file. This might be due to Go’s optimization. Let’s disable the optimization of the Go compiler and try again:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go build -gcflags <span class="string">&#x27;-l -N&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go tool nm demo | grep demo</span></span><br><span class="line"> 108ca80 T demo/pkga.Foo</span><br></pre></td></tr></table></figure>
<p>After disabling inlining optimization, we can see that pkga.Foo appears in the final executable file demo, but the unused Bar function is not included.</p>
<p>Now let’s look at an example with indirect dependencies:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dead-code-elimination/demo2</span></span><br><span class="line">$ tree .</span><br><span class="line">.</span><br><span class="line">├── <span class="keyword">go</span>.mod</span><br><span class="line">├── main.<span class="keyword">go</span></span><br><span class="line">├── pkga</span><br><span class="line">│   └── pkga.<span class="keyword">go</span></span><br><span class="line">└── pkgb</span><br><span class="line">    └── pkgb.<span class="keyword">go</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// pkga/pkga.go</span></span><br><span class="line"><span class="keyword">package</span> pkga</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;demo/pkgb&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Foo</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    pkgb.Zoo()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello from Foo!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Bar</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;This is Bar.&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In this example, we call a new function Zoo from the pkgb package within the pkga.Foo function. Let’s compile this new example and see which functions are included in the final executable:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go build -gcflags=<span class="string">&#x27;-l -N&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go tool nm demo | grep demo</span></span><br><span class="line"> 1093b40 T demo/pkga.Foo</span><br><span class="line"> 1093aa0 T demo/pkgb.Zoo</span><br></pre></td></tr></table></figure>
<p>We can observe that only the functions reachable through the program execution path are included in the final executable!</p>
<p>In more complex examples, we can use the <code>go build -ldflags='-dumpdep'</code> command to view the call dependency relationship (using demo2 as an example):</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">go</span> build -ldflags=<span class="string">&#x27;-dumpdep&#x27;</span> -gcflags=<span class="string">&#x27;-l -N&#x27;</span> &gt; deps.txt <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"></span><br><span class="line">$ grep demo deps.txt</span><br><span class="line"># demo</span><br><span class="line">main.main -&gt; demo/pkga.Foo</span><br><span class="line">demo/pkga.Foo -&gt; demo/pkgb.Zoo</span><br><span class="line">demo/pkga.Foo -&gt; <span class="keyword">go</span>:<span class="type">string</span>.<span class="string">&quot;Hello from Foo!&quot;</span></span><br><span class="line">demo/pkgb.Zoo -&gt; math/rand.Int31n</span><br><span class="line">demo/pkgb.Zoo -&gt; demo/pkgb..stmp_0</span><br><span class="line">demo/pkgb..stmp_0 -&gt; <span class="keyword">go</span>:<span class="type">string</span>.<span class="string">&quot;Zoo in pkgb&quot;</span></span><br></pre></td></tr></table></figure>
<p>From this, we can conclude that Go ensures that only the code that is actually used enters the final executable file, even if some code (such as pkga.Bar) and the code that is actually used (such as pkga.Foo) are in the same package. This mechanism also ensures that the final executable file size remains within a manageable range.</p>
<p>Next, let’s explore this mechanism in Go.</p>
<h3 id="2-Dead-Code-Elimination">2. Dead Code Elimination</h3>
<p>Let’s review the build process of <code>go build</code>. The following steps outline the <code>go build</code> command:</p>
<ol>
<li>Read go.mod and go.sum: If the current directory contains a go.mod file, <code>go build</code> reads it to determine the project’s dependencies. It also verifies the integrity of the dependencies based on checksums in the go.sum file.</li>
<li>Calculate the package dependency graph: <code>go build</code> analyzes the import statements in the packages being built and their dependencies to construct a dependency graph. This graph represents the relationships between packages, enabling the compiler to determine the build order of packages.</li>
<li>Determine the packages to build: Based on the build cache and the dependency graph, <code>go build</code> determines which packages need to be built. It checks the build cache to see if the compiled packages are up to date. If any package or its dependencies have changed since the last build, <code>go build</code> will rebuild those packages.</li>
<li>Invoke the compiler (go tool compile): For each package that needs to be built, <code>go build</code> invokes the Go compiler (go tool compile). The compiler converts the Go source code into machine code specific to the target platform and generates object files (.o files).</li>
<li>Invoke the linker (go tool link): After compiling all the necessary packages, <code>go build</code> invokes the Go linker (go tool link). The linker merges the object files generated by the compiler into an executable binary file or a package archive file. It resolves symbols and references between packages, performs necessary relocations, and generates the final output.</li>
</ol>
<p>The entire build process can be represented by the following diagram:</p>
<p><img src="https://tonybai.com/wp-content/uploads/dead-code-elimination-and-executable-file-slimming-in-go-2.png" alt="Build Process"></p>
<p>During the build process, <code>go build</code> performs various optimizations, such as dead code elimination and inlining, to improve the performance and reduce the size of the generated binary files. Dead code elimination is an important mechanism that ensures the controllable size of the final executable file in Go.</p>
<p>The implementation of the dead code detection algorithm can be found in the <code>$GOROOT/src/cmd/link/internal/ld/deadcode.go</code> file. The algorithm operates by traversing the graph and follows these steps:</p>
<ol>
<li>Start from the entry point of the system and mark all symbols reachable through relocations. Relocation represents the dependency relationship between two symbols.</li>
<li>By traversing the relocation relationships, the algorithm marks all symbols that can be accessed from the entry point. For example, if the function pkga.Foo is called in the main function main.main, there will be a relocation entry for this function in main.main.</li>
<li>After marking is complete, the algorithm marks all unmarked symbols as unreachable and dead code. These unmarked symbols represent the code that cannot be accessed by the entry point or any other reachable symbols.</li>
</ol>
<p>However, there is a special syntax element to note, which is types with methods. Whether the methods of a type are included in the final executable depends on different scenarios. In deadcode.go, the function implementation for marking reachable symbols distinguishes three cases of method invocation for reachable types:</p>
<ol>
<li>Direct invocation</li>
<li>Invocation through reachable interface types</li>
<li>Invocation through reflection: reflect.Value.Method (or MethodByName) or reflect.Type.Method (or MethodByName)</li>
</ol>
<p>In the first case, the invoked method is marked as reachable. In the second case, all reachable interface types are decomposed into method signatures. Each encountered method is compared with the interface method signatures, and if there is a match, it is marked as reachable. This method is conservative but simple and correct.</p>
<p>In the third case, the algorithm handles methods by looking for functions marked as REFLECTMETHOD by the compiler. The presence of REFLECTMETHOD on a function F means that F uses reflection for method lookup, but the compiler cannot determine the method name during static analysis. Therefore, all functions that call reflect.Value.Method or reflect.Type.Method are marked as REFLECTMETHOD. Functions that call reflect.Value.MethodByName or reflect.Type.MethodByName with non-constant arguments are also considered REFLECTMETHOD. If a REFLECTMETHOD is found, static analysis is abandoned, and all exported methods of reachable types are marked as reachable.</p>
<p>Here is an example from the reference material:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dead-code-elimination/demo3/main.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> X <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="keyword">type</span> Y <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*X)</span></span> One()   &#123; fmt.Println(<span class="string">&quot;hello 1&quot;</span>) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*X)</span></span> Two()   &#123; fmt.Println(<span class="string">&quot;hello 2&quot;</span>) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*X)</span></span> Three() &#123; fmt.Println(<span class="string">&quot;hello 3&quot;</span>) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*Y)</span></span> Four()  &#123; fmt.Println(<span class="string">&quot;hello 4&quot;</span>) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*Y)</span></span> Five()  &#123; fmt.Println(<span class="string">&quot;hello 5&quot;</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name <span class="type">string</span></span><br><span class="line">    fmt.Scanf(<span class="string">&quot;%s&quot;</span>, &amp;name)</span><br><span class="line">    reflect.ValueOf(&amp;X&#123;&#125;).MethodByName(name).Call(<span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">var</span> y Y</span><br><span class="line">    y.Five()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In this example, type *X has three methods, and type *Y has two methods. In the main function, we call the methods of an X instance through reflection and directly call a method of a Y instance. Let’s see which methods of X and Y are included in the final executable:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go build -gcflags=<span class="string">&#x27;-l -N&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go tool nm ./demo | grep main</span></span><br><span class="line"> 11d59c0 D go:main.inittasks</span><br><span class="line"> 10d4500 T main.(*X).One</span><br><span class="line"> 10d4640 T main.(*X).Three</span><br><span class="line"> 10d45a0 T main.(*X).Two</span><br><span class="line"> 10d46e0 T main.(*Y).Five</span><br><span class="line"> 10d4780 T main.main</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure>
<p>We can observe that only the directly called method Five of the reachable type Y is included in the final executable, while all methods of the reachable type X through reflection are present! This aligns with the third case mentioned earlier.</p>
<h3 id="3-Summary">3. Summary</h3>
<p>This article introduced the dead code elimination and executable file size reduction mechanisms in the Go language. Through experiments, we verified that only the functions called on the program execution path are included in the final executable, and unused functions are eliminated.</p>
<p>The article explained the Go build process, including package dependency graph calculation, compilation, and linking steps, and highlighted dead code elimination as an important optimization strategy. The specific dead code elimination algorithm is implemented through graph traversal, where reachable symbols are marked and unmarked symbols are considered unused. The article also mentioned the handling of type methods.</p>
<p>With this dead code elimination mechanism, Go controls the size of the final executable file, achieving executable file size reduction.</p>
<p>The source code mentioned in this article can be downloaded <a href="https://github.com/bigwhite/experiments/tree/master/dead-code-elimination">here</a>.</p>
<h3 id="4-References">4. References</h3>
<ul>
<li><a href="https://golab.io/talks/getting-the-most-out-of-dead-code-elimination">Getting the most out of Dead Code elimination</a></li>
<li><a href="https://github.com/golang/go/issues/6853">all: binaries too big and growing</a></li>
<li><a href="https://github.com/aarzilli/whydeadcode">aarzilli/whydeadcode</a></li>
</ul>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>The Magical Algorithms Written by Two Old Men, Dominating the World!</title>
    <url>/2024/04/25/The%20Magical%20Algorithms%20Written%20by%20Two%20Old%20Men,%20Dominating%20the%20World/</url>
    <content><![CDATA[<p>As an ordinary person, when you browse the web, you may not realize that the web pages sent to you by the server are actually compressed.</p>
<p>If you like a programmer, press F12 in the browser, you’ll find something like this:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/04/3dc37c7d0ce9c1a32f87d44adbd5ef8e.png" alt="Image"></p>
<span id="more"></span>
<p>It means: In order to save bandwidth and provide speed, I (the server) compressed the content using gzip, and you (the browser) need to decompress it to view it!</p>
<p>In HTTP compression, besides gzip, there are also algorithms like compress, deflate, br, etc., which can be dazzling.</p>
<p>However, all these compression algorithms have an ancestor: <strong>LZ algorithm</strong>.</p>
<p>LZ comes from the names of two people: Abraham <strong>L</strong>empel and Jacob <strong>Z</strong>iv.</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/04/f99c3cfdce323ee7f49a9fc7cbf2ffc9.png" alt="Image"></p>
<p>Both of them passed away in 2023, living a long life, with Lempel living to be 86 years old and Ziv living to be 91 years old.</p>
<h1><strong>Origin</strong></h1>
<p>Data compression can be divided into two types: lossy compression, such as MP3, JPEG, where some unimportant data is deleted during compression, and lossless compression, where binary bits magically disappear, making files significantly smaller, facilitating storage and transmission.</p>
<p>In 1948, after Claude Shannon founded information theory, everyone has been working on one thing: how to find the optimal coding to compress a piece of information.</p>
<p>Shannon and Fano were the first to propose the <strong>Shannon-Fano coding</strong>.<br>
<img src="https://images.hxzhouh.com/blog-images/2024/04/d34b40c3bd6dba146e405c6328ffe57a.png" alt="Pasted image 20240425184027"></p>
<p>It constructs a binary tree from top to bottom by grouping symbols.<br>
<img src="https://images.hxzhouh.com/blog-images/2024/04/5fa4f771858988a54a24f909877cec3a.png" alt="Pasted image 20240425183959"></p>
<p>However, this method is not the optimal solution and the encoding is not a prefix code, making it prone to ambiguity.</p>
<p>Later, while teaching information theory at MIT, Fano challenged his students: either take the final exam or improve existing data compression algorithms.</p>
<p>A graduate student named Huffman didn’t like exams, so he chose the latter path.</p>
<p>Huffman didn’t know that even the famous Shannon struggled with this problem. He researched for several months, developed various methods, but none worked.</p>
<p>Just as he was about to give up and throw his notes into the trash, a wonderful and elegant algorithm crossed his mind: build a binary tree from bottom to top based on the frequency of characters, which is the famous Huffman algorithm.</p>
<p>Huffman’s algorithm is called “optimal coding” and achieves two goals:</p>
<p>(1) No character encoding is a prefix of another character encoding.</p>
<p>(2) The total length of the information encoding is minimized.</p>
<p>Although the Huffman algorithm is excellent, it has a huge limitation: <strong>it requires obtaining the probability of each character appearing first</strong>, and then compression encoding can be done, which is often impossible in many cases.</p>
<p>In the 1970s, with the emergence of the Internet, this problem became more prominent.</p>
<p>Is it possible to compress data while reading it?</p>
<h1><strong>Breakthrough</strong></h1>
<p>Ziv and Lempel from the Technion-Israel Institute of Technology jointly challenged this problem.</p>
<p>The two were a good team, with Ziv being good at statistics and information theory, while Lempel excelled in Boolean algebra and computer science.</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/04/1324380a2e44a3dac2eba5ee62ab490e.png" alt="Pasted image 20240425184054"></p>
<p>In 1977, they both came to Bell Labs for academic sabbaticals.</p>
<p>Academic sabbatical, also known as “intellectual leave,” gives you a long period of</p>
<p>leave (like six months) after working for a few years, during which you can do whatever you want, and it’s paid.</p>
<p>The sabbaticals of the big shots are interesting. For example, Ken Thompson, the inventor of Unix, returned to his alma mater, Berkeley, during his sabbatical and spread Unix there, inspiring Bill Joy and others to develop BSD.</p>
<p>Ziv and Lempel were similar. They went to Bell Labs in the United States for academic sabbaticals and co-authored a paper during their “sabbatical”: “A Universal Algorithm for Sequential Data Compression,” proposing an algorithm based on a “sliding window,” which does not directly consider character frequencies but instead finds repeated data blocks (such as strings, byte sequences, etc.) and references the positions where these data blocks appeared previously.<br>
<img src="https://images.hxzhouh.com/blog-images/2024/04/6e5efd3753463265af8a4e84c007e4ca.png" alt="Pasted image 20240425184125"><br>
This algorithm is LZ77, which is applicable to any type of data, requires no preprocessing (statistical character appearance probabilities), and achieves extremely high compression ratios with just one pass.</p>
<p>The following year, they continued their efforts and improved LZ77 to become LZ78, which could perfectly reconstruct data from compressed data and was more efficient than previous algorithms.</p>
<h1><strong>Chaos</strong></h1>
<p>An invaluable treasure like the LZ algorithm remained in the theoretical realm for several years without widespread use.</p>
<p>It wasn’t until 1984, when Terry Welch of DEC created the <strong>LZW algorithm</strong> based on LZ, which was used in Unix’s <strong>compress</strong> program.</p>
<p>With the widespread dissemination of Unix, the LZ algorithm began to enter the fast lane of rapid development.</p>
<p>However, it also entered an era of chaotic competition.</p>
<p>In 1985, Thom Henderson, while downloading files from BBS, found it tedious to download one by one, as dial-up internet was too slow. So he wrote a software called <strong>ARC</strong>, which could compress multiple files into one, making it much more convenient.</p>
<p>In 1986, Phillip Katz discovered ARC, liked it, but felt that the compression speed was too slow. So he rolled up his sleeves, rewrote the key compression and decompression parts in assembly language, and created <strong>PKARC</strong>, which he started selling.<br>
<img src="https://images.hxzhouh.com/blog-images/2024/04/da855761fb63597eb7de689e7a5db345.png" alt="Pasted image 20240425184142"><br>
<img src="https://images.hxzhouh.com/blog-images/2024/04/5dea706890fb605ba66eebaae69a27ad.png" alt="Pasted image 20240425184148"><br>
When Thom Henderson saw his business being snatched away, he sued Phillip Katz, and the reasons were sufficient: the comments and spelling errors in your PKARC are the same as my ARC, you’re plagiarizing! Also, while my ARC is open source, the protocol specifies that you can only view it, not modify it!</p>
<p>In the end, ARC won the lawsuit, and Phillip Katz paid tens of thousands of dollars in damages.</p>
<p>Genius Phillip Katz was naturally not satisfied. He studied the LZ77 algorithm and the Huffman algorithm, combined them, and created a new compression algorithm (<strong>deflate</strong>) and a new file format (<strong>zip</strong>), as well as the new software <strong>PKZIP</strong>.<br>
<img src="https://images.hxzhouh.com/blog-images/2024/04/9f2582c7f818ccae3a8c3944585fda8a.png" alt="Pasted image 20240425184157"><br>
PKZIP quickly outperformed ARC in both compression ratio and decompression speed, and quickly dominated the DOS era.</p>
<p>Since the ZIP format was open, the open-source info-zip group also released the open-source, free <strong>unzip</strong> and <strong>zip</strong>, implementing the deflate algorithm.</p>
<p>Later, Jean-loup Gailly and Mark Adler developed the famous <strong>gzip</strong> (file format + utility) based on deflate, replacing compress on Unix.<br>
<img src="https://images.hxzhouh.com/blog-images/2024/04/de55eace3bd613ed7147e1313877cc8b.png" alt="Pasted image 20240425184253"></p>
<p>gzip is the HTTP compression format seen at the beginning of the article.</p>
<p>In 1991, Nico Mak felt dissatisfied with the command line of PKZIP, so he developed a front-end for Windows 3.1 based on PKZIP (later replaced by the open-source info-zip), allowing people to compress files using a graphical interface. This is the famous WinZip.<br>
<img src="https://images.hxzhouh.com/blog-images/2024/04/05c9824cdc3df564ea258ac5afdc3994.png" alt="Pasted image 20240425184442"><br>
<img src="https://images.hxzhouh.com/blog-images/2024/04/155a024cec52f0c9b8e2c5bd10400acf.png" alt="Pasted image 20240425184447"><br>
Despite WinZip’s success, it was still “parasitic” on the Windows platform.</p>
<p>Users find that WinZip has an exquisite interface and is user-friendly. There is no need to remember those annoying parameters and compression can be completed with a few clicks of the mouse.<br>
WinZip quickly took over all PCs and became one of the most popular shareware programs in the 1990s.<br>
Windows intervened and simply integrated Zip functionality into the operating system, ending everything.</p>
<h1><strong>Conclusion</strong></h1>
<p>From LZ77 to LZW, compress, Deflate, gzip… Lossless compression algorithms have been continuously patched and gradually formed into a huge family. However, no matter how they change, their principles and ideas are not much different from the original LZ algorithm.</p>
<p>These algorithms help us compress images, compress text, compress content transmitted over the Internet, and have become an indispensable part of our daily lives.</p>
<p>It’s no exaggeration to say that the LZ algorithm and its descendants have dominated the world.</p>
]]></content>
      <categories>
        <category>compute</category>
      </categories>
      <tags>
        <tag>history</tag>
        <tag>compute</tag>
      </tags>
  </entry>
  <entry>
    <title>How to Set Up ChatGPT-4 Service Using GitHub Copilot</title>
    <url>/2024/01/12/How-to-Set-Up-ChatGPT-4-Service-Using-GitHub-Copilot-329237bac187/</url>
    <content><![CDATA[<p><img src="https://cdn-images-1.medium.com/max/800/1*jfXCQTbth8PaLKaE5KgNzg.png" alt=""></p>
<blockquote>
<p>This article has expired, please do not use it</p>
</blockquote>
<p>GitHub Copilot is a AI assistant developed by GitHub to help developers write code. It is a Visual Studio Code plugin based on OpenAI Codex, providing features such as code suggestions, auto-completion, auto-fixing, and auto-refactoring. Currently, GitHub Copilot also supports chat functionality, powered by GPT-4. However, it is only available within the context of VS Code. In this article, I will explain how to set up a chat service using GitHub Copilot, allowing you to use it anywhere.</p>
<span id="more"></span>
<h1>Open-Source Components</h1>
<ul>
<li><a href="https://github.com/ChatGPTNextWeb/ChatGPT-Next-Web">ChatGPT-Next-Web</a>: A well-designed, cross-platform ChatGPT web UI with support for GPT3, GPT4, and Gemini Pro.</li>
<li><a href="https://github.com/aaamoon/copilot-gpt4-service">copilot-gpt4-service</a></li>
<li>An AWS EC2 server is needed to run the copilot-gpt4-service, but you can choose any cloud service provider you prefer or run it locally.</li>
<li>Vercel: A free static website hosting service to deploy the ChatGPT-Next-Web service.</li>
<li>Cloudflare: A free CDN service used for domain name resolution.</li>
</ul>
<h1>Obtaining the GitHub Copilot Token</h1>
<p>Please refer to this document, <a href="https://github.com/aaamoon/copilot-gpt4-service/blob/master/README_CN.md#%E8%8E%B7%E5%8F%96-copilot-token">GitHub Copilot Token</a>. On a Mac, you can use the following command to obtain the token:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/aaamoon/copilot-gpt4-service/master/shells/get_copilot_token.sh)&quot;</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn-images-1.medium.com/max/800/0*CKQlLPEw2yVoNGNp.png" alt=""></p>
<p>As shown in the screenshot, you need to copy the token to the clipboard for later use.</p>
<h1>Running the copilot-gpt4-service</h1>
<ol>
<li>The copilot-gpt4-service supports Docker deployment, and the official project provides a <a href="https://github.com/aaamoon/copilot-gpt4-service/blob/master/docker-compose.yml">docker-compose</a> file. You only need to modify the environment variables.</li>
</ol>
<p><img src="https://cdn-images-1.medium.com/max/800/0*K537j_O1-TsDgmJl.png" alt=""></p>
<ol>
<li>Add a server block in NGINX:</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">     listen 443 ssl;</span><br><span class="line">     listen [::]:443 ssl;</span><br><span class="line">     server_name chat.example.com;</span><br><span class="line"> ​</span><br><span class="line">     ssl_certificate /etc/nginx/cert/public.pem;</span><br><span class="line">     ssl_certificate_key /etc/nginx/cert/private.key;</span><br><span class="line"> ​</span><br><span class="line">     location / &#123;</span><br><span class="line">         proxy_pass http://127.0.0.1:8086/;  # Replace with the copilot-gpt4-service address</span><br><span class="line">         rewrite ^/(.*)$ /$1 break;</span><br><span class="line">         proxy_redirect off;</span><br><span class="line">         proxy_set_header Host $host;</span><br><span class="line">         proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">         proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">         proxy_set_header Upgrade-Insecure-Requests 1;</span><br><span class="line">         proxy_set_header X-Forwarded-Proto https;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>Don’t forget to reload the NGINX configuration file.</p>
<ol>
<li>Add a domain name resolution for “<a href="http://chat.example.com">chat.example.com</a>” on Cloudflare, pointing to the IP address of your NGINX server.</li>
</ol>
<h1>Deploying the ChatGPT-Next-Web Service on Vercel</h1>
<p>ChatGPT-Next-Web supports one-click deployment to Vercel. You don’t need to make any changes.</p>
<p>Once the deployment on <code>Vercel</code> is complete, you can add a custom domain name, such as “<a href="http://chatnext.example.com">chatnext.example.com</a>”.</p>
<h1>Testing</h1>
<p>Open your browser and enter “<a href="http://chatnext.example.com">chatnext.example.com</a>”. Click on the settings button in the bottom left corner and select “Custom Interface”. Enter &quot; <a href="https://chat.example.com">https://chat.example.com</a>&quot; as the API endpoint, and use the GitHub Copilot token copied in the first step as the API token. Click on “Save”, and you can start chatting.</p>
]]></content>
      <tags>
        <tag>chatgpt</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2024/05/18/post/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
