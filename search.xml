<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Go - Ordering in Select Statements</title>
    <url>/2020/04/29/Go%20-%20Ordering%20in%20Select%20Statements/</url>
    <content><![CDATA[<p> <a href="https://medium.com/a-journey-with-go/go-ordering-in-select-statements-fd0ff80fd8d6">原文链接</a></p>
<p><a href="https://medium.com/@blanchon.vincent?source=post_page-----fd0ff80fd8d6----------------------">Vincent Blanchon</a></p>
<hr>
<p><img src="https://blog-image-1253555052.cos.ap-guangzhou.myqcloud.com/20200429220520.png"></p>
<blockquote>
<p>本文基于 go 1.14 </p>
</blockquote>
<p><code>select</code> 允许在一个goroutine中管理多个channel。但是，当所有channel同时就绪的时候，go需要在其中选择一个执行。go还需要处理没有channel就绪的情况，我们先从就绪的channel开始。</p>
<span id="more"></span>
<h1 id="Order"><a href="#Order" class="headerlink" title="Order"></a>Order</h1><p><code>select</code> 不会按照任何规则或者优先级选择到达的channel。go标准库在每次访问的时候，都会将他们顺序打乱，也就是说不能保证任何顺序。</p>
<p>看一个有三个就绪的channel的例子：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>, <span class="number">100</span>)</span><br><span class="line">	b := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>, <span class="number">100</span>)</span><br><span class="line">	c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>, <span class="number">100</span>)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		a &lt;- <span class="literal">true</span></span><br><span class="line">		b &lt;- <span class="literal">true</span></span><br><span class="line">		c &lt;- <span class="literal">true</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> &lt;-a:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;&lt; a&quot;</span>)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> &lt;-b:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;&lt; b&quot;</span>)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> &lt;-c:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;&lt; c&quot;</span>)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;&lt; default&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这三个channel都有三个完整的buffer（不会阻塞），下面是程序的输出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt; b&lt; a&lt; a&lt; b&lt; c&lt; c&lt; c&lt; a&lt; b&lt; b</span><br></pre></td></tr></table></figure>

<p>在 select 的每次迭代中，case 都会被打乱：</p>
<p><img src="https://blog-image-1253555052.cos.ap-guangzhou.myqcloud.com/20200429223415.png"></p>
<p>由于go 不会删除重复的channel，所以可以使用多次添加case来影响结果，代码如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   a := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>, <span class="number">100</span>)</span><br><span class="line">   b := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>, <span class="number">100</span>)</span><br><span class="line">   c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>, <span class="number">100</span>)</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">      a &lt;- <span class="literal">true</span></span><br><span class="line">      b &lt;- <span class="literal">true</span></span><br><span class="line">      c &lt;- <span class="literal">true</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">      <span class="keyword">select</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> &lt;-a:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;&lt; a&quot;</span>)</span><br><span class="line">      <span class="keyword">case</span> &lt;-a:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;&lt; a&quot;</span>)</span><br><span class="line">      <span class="keyword">case</span> &lt;-a:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;&lt; a&quot;</span>)</span><br><span class="line">      <span class="keyword">case</span> &lt;-a:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;&lt; a&quot;</span>)</span><br><span class="line">      <span class="keyword">case</span> &lt;-a:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;&lt; a&quot;</span>)</span><br><span class="line">      <span class="keyword">case</span> &lt;-a:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;&lt; a&quot;</span>)</span><br><span class="line">      <span class="keyword">case</span> &lt;-a:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;&lt; a&quot;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> &lt;-b:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;&lt; b&quot;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> &lt;-c:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;&lt; c&quot;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;&lt; default&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出的结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt; c&lt; a&lt; b&lt; a&lt; b&lt; a&lt; a&lt; c&lt; a&lt; a</span><br></pre></td></tr></table></figure>

<p>当所有channel同时准备就绪时，有80％的机会选择通道a。下面来看一下channel未就绪的情况。</p>
<h1 id="Non-ready-channels"><a href="#Non-ready-channels" class="headerlink" title="Non-ready channels"></a>Non-ready channels</h1><p><code>select</code> 运行时，如果没有一个case channel就绪，那么他就会运行<code>default:</code>,如果 <code>select</code>中没有写default，那么他就进入等待状态，如下面这个例子</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   a := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>, <span class="number">100</span>)</span><br><span class="line">   b := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>, <span class="number">100</span>)</span><br><span class="line">   <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">      time.Sleep(time.Minute)</span><br><span class="line">      <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">         a &lt;- <span class="literal">true</span></span><br><span class="line">         b &lt;- <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;()</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">      <span class="keyword">select</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> &lt;-a:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;&lt; a&quot;</span>)</span><br><span class="line">      <span class="keyword">case</span> &lt;-b:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;&lt; b&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面那个例子中，将在一分钟后打印结果。<code>select</code>阻塞在 channel上。这种情况下，处理<code>select</code>的函数将会订阅所有channel并且等待，下面是一个goroutine#7在select中等待的示例，其中另一个goroutine#4也在等待channel：</p>
<p><img src="https://blog-image-1253555052.cos.ap-guangzhou.myqcloud.com/20200429225528.png"></p>
<p>Goroutine(G7)订阅所有频道并在列表末尾等待。 如果channel发送了一条消息，channel将通知已在等待该消息的另一个Goroutine。一旦收到通知，<code>select </code>将取消订阅所有channel，并且返回到代码运行.</p>
<p>更多关于channel与等待队列的信息，请查看作者另外一篇文章<a href="https://medium.com/a-journey-with-go/go-buffered-and-unbuffered-channels-29a107c00268"><em>Go: Buffered and Unbuffered Channels</em></a><em>.</em></p>
<p>上面介绍的逻辑，都是针对于有两个或者以上的活动的channel，实际上如果只有一个活动的channel，go乐意简化select</p>
<h1 id="Simplification"><a href="#Simplification" class="headerlink" title="Simplification"></a>Simplification</h1><p>如果只有一个case 加上一个default，例子：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   t:= time.NewTicker(time.Second)</span><br><span class="line">   <span class="keyword">for</span>   &#123;</span><br><span class="line">      <span class="keyword">select</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> &lt;-t.C:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;1 second &quot;</span>)</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;default branch&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种情况下。Go会以非阻塞模式读取channel的操作替换select语句。如果channel在缓冲区中没有任何值，或者发送方准备发送消息，将会运行default。就像下面这张图</p>
<p><img src="https://blog-image-1253555052.cos.ap-guangzhou.myqcloud.com/20200429231908.png"></p>
<p>如果没有default，则 Go 通过阻塞channel操作重写 select 语句。</p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>底层</tag>
      </tags>
  </entry>
  <entry>
    <title>8 Common SQL Slow Query Statements and How to Optimize Them</title>
    <url>/2024/05/11/8%20Common%20SQL%20Slow%20Query%20Statements%20and%20How%20to%20Optimize%20Them/</url>
    <content><![CDATA[<p>Thanks to Moore’s Law, computer performance has greatly improved, along with advancements in databases and various anti-pattern designs advocated by microservices. As a result, we now have fewer opportunities to write complex SQL queries. The industry (yes, even Google) has started advocating against specialized SQL optimization, as the resources saved do not outweigh the cost of employee salaries. However, as engineers, we should strive for technical excellence to become rocket scientists in our field.</p>
<span id="more"></span>

<blockquote>
<p>This article is first published in the medium MPP plan. If you are a medium user, please follow me in <a href="https://medium.hxzhouh.com/">medium</a>. Thank you very much.</p>
</blockquote>
<p>In this article, I will introduce eight common SQL slow query statements and explain how to optimize their performance. I hope this will be helpful to you.</p>
<h2 id="LIMIT-Statement"><a href="#LIMIT-Statement" class="headerlink" title="LIMIT Statement"></a>LIMIT Statement</h2><p>Pagination is one of the most commonly used scenarios, but it is also prone to problems. For example, for the simple statement below, a typical solution suggested by DBAs is to add a composite index on the <code>type</code>, <code>name</code>, and <code>create_time</code> fields. This way, the conditions and sorting can effectively utilize the index, resulting in a significant performance improvement.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span>   operation</span><br><span class="line"><span class="keyword">WHERE</span>  type <span class="operator">=</span> <span class="string">&#x27;SQLStats&#x27;</span></span><br><span class="line">       <span class="keyword">AND</span> name <span class="operator">=</span> <span class="string">&#x27;SlowLog&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span>  <span class="keyword">BY</span> create_time</span><br><span class="line">LIMIT  <span class="number">1000</span>, <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p>Okay, this might solve the problem for over 90% of DBAs. However, when the LIMIT clause becomes “LIMIT 1000000, 10”, programmers still complain, “Why is it slow when I’m only fetching 10 records?” You see, the database doesn’t know where the 1,000,000th record starts, so even with an index, it still needs to calculate from the beginning. In most cases, this performance issue is caused by lazy programming.</p>
<p>In scenarios such as frontend data browsing or exporting large data in batches, you can use the maximum value of the previous page as a parameter for querying. The SQL can be redesigned as follows:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>   <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span>     operation</span><br><span class="line"><span class="keyword">WHERE</span>    type <span class="operator">=</span> <span class="string">&#x27;SQLStats&#x27;</span></span><br><span class="line"><span class="keyword">AND</span>      name <span class="operator">=</span> <span class="string">&#x27;SlowLog&#x27;</span></span><br><span class="line"><span class="keyword">AND</span>      create_time <span class="operator">&gt;</span> <span class="string">&#x27;2017-03-16 14:00:00&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> create_time</span><br><span class="line">LIMIT    <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p>With this new design, the query time remains constant and does not change with the increasing data volume.</p>
<h2 id="Implicit-Conversion"><a href="#Implicit-Conversion" class="headerlink" title="Implicit Conversion"></a>Implicit Conversion</h2><p>Another common mistake in SQL statements is when the types of query variables and field definitions do not match. Take the following statement as an example:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">explain extended SELECT *</span></span><br><span class="line">     &gt; FROM   my_balance b</span><br><span class="line">     &gt; WHERE  b.bpn = 14000000123</span><br><span class="line">     &gt;       AND b.isverified IS NULL ;</span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">show warnings;</span></span><br><span class="line">| Warning | 1739 | Cannot use ref access on index &#x27;bpn&#x27; due to type or collation conversion on field &#x27;bpn&#x27;</span><br></pre></td></tr></table></figure>

<p>In this case, the field <code>bpn</code> is defined as <code>varchar(20)</code>, and MySQL’s strategy is to convert the string to a number before comparing. This causes the function to be applied to the table field, rendering the index ineffective.</p>
<p>Such cases may be caused by parameters automatically filled in by the application framework, rather than the programmer’s intention. Nowadays, application frameworks are often complex, and while they provide convenience, they can also create pitfalls.</p>
<h2 id="Join-Updates-and-Deletions"><a href="#Join-Updates-and-Deletions" class="headerlink" title="Join Updates and Deletions"></a>Join Updates and Deletions</h2><p>Although MySQL 5.6 introduced materialization, it only optimizes SELECT statements. For UPDATE or DELETE statements, you need to manually rewrite them using JOIN.</p>
<p>For example, consider the following UPDATE statement. MySQL actually performs a loop&#x2F;nested subquery (DEPENDENT SUBQUERY), and you can imagine the execution time.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> operation o</span><br><span class="line"><span class="keyword">SET</span>    status <span class="operator">=</span> <span class="string">&#x27;applying&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span>  o.id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> id</span><br><span class="line">                <span class="keyword">FROM</span>   (<span class="keyword">SELECT</span> o.id,</span><br><span class="line">                               o.status</span><br><span class="line">                        <span class="keyword">FROM</span>   operation o</span><br><span class="line">                        <span class="keyword">WHERE</span>  o.group <span class="operator">=</span> <span class="number">123</span></span><br><span class="line">                               <span class="keyword">AND</span> o.status <span class="keyword">NOT</span> <span class="keyword">IN</span> ( <span class="string">&#x27;done&#x27;</span> )</span><br><span class="line">                        <span class="keyword">ORDER</span>  <span class="keyword">BY</span> o.parent,</span><br><span class="line">                                  o.id</span><br><span class="line">                        LIMIT  <span class="number">1</span>) t);</span><br></pre></td></tr></table></figure>

<p>The execution plan is as follows:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----+--------------------+-------+-------+---------------+---------+---------+-------+------+-----------------------------------------------------+</span><br><span class="line">| <span class="built_in">id</span> | select_type        | table | <span class="built_in">type</span>  | possible_keys | key     | key_len | ref   | rows | Extra                                               |</span><br><span class="line">+----+--------------------+-------+-------+---------------+---------+---------+-------+------+-----------------------------------------------------+</span><br><span class="line">| 1  | PRIMARY            | o     | index |               | PRIMARY | 8       |       | 24   | Using <span class="built_in">where</span>; Using temporary                        |</span><br><span class="line">| 2  | DEPENDENT SUBQUERY |       |       |               |         |         |       |      | Impossible WHERE noticed after reading const tables |</span><br><span class="line">| 3  | DERIVED            | o     | ref   | idx_2,idx_5   | idx_5   | 8       | const | 1    | Using <span class="built_in">where</span>; Using filesort                         |</span><br><span class="line">+----+--------------------+-------+-------+---------------+---------+---------+-------+------+-----------------------------------------------------+</span><br></pre></td></tr></table></figure>

<p>After rewriting it as a JOIN, the subquery’s select type changes from DEPENDENT SUBQUERY to DERIVED, significantly speeding up the execution time from 7 seconds to 2 milliseconds.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> operation o</span><br><span class="line">       <span class="keyword">JOIN</span>  (<span class="keyword">SELECT</span> o.id,</span><br><span class="line">                            o.status</span><br><span class="line">                     <span class="keyword">FROM</span>   operation o</span><br><span class="line">                     <span class="keyword">WHERE</span>  o.group <span class="operator">=</span> <span class="number">123</span></span><br><span class="line">                            <span class="keyword">AND</span> o.status <span class="keyword">NOT</span> <span class="keyword">IN</span> ( <span class="string">&#x27;done&#x27;</span> )</span><br><span class="line">                     <span class="keyword">ORDER</span>  <span class="keyword">BY</span> o.parent,</span><br><span class="line">                               o.id</span><br><span class="line">                     LIMIT  <span class="number">1</span>) t</span><br><span class="line">         <span class="keyword">ON</span> o.id <span class="operator">=</span> t.id</span><br><span class="line"><span class="keyword">SET</span>    status <span class="operator">=</span> <span class="string">&#x27;applying&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>The simplified execution plan is as follows:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----+-------------+-------+------+---------------+-------+---------+-------+------+-----------------------------------------------------+</span><br><span class="line">| <span class="built_in">id</span> | select_type | table | <span class="built_in">type</span> | possible_keys | key   | key_len | ref   | rows | Extra                                               |</span><br><span class="line">+----+-------------+-------+------+---------------+-------+---------+-------+------+-----------------------------------------------------+</span><br><span class="line">| 1  | PRIMARY     |       |      |               |       |         |       |      | Impossible WHERE noticed after reading const tables |</span><br><span class="line">| 2  | DERIVED     | o     | ref  | idx_2,idx_5   | idx_5 | 8       | const | 1    | Using <span class="built_in">where</span>; Using filesort                         |</span><br><span class="line">+----+-------------+-------+------+---------------+-------+---------+-------+------+-----------------------------------------------------+</span><br></pre></td></tr></table></figure>

<h2 id="Mixed-Sorting"><a href="#Mixed-Sorting" class="headerlink" title="Mixed Sorting"></a>Mixed Sorting</h2><p>MySQL cannot utilize indexes for mixed sorting. However, in certain scenarios, there are still opportunities to improve performance using special methods.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span>   my_order o</span><br><span class="line">       <span class="keyword">INNER</span> <span class="keyword">JOIN</span> my_appraise a <span class="keyword">ON</span> a.orderid <span class="operator">=</span> o.id</span><br><span class="line"><span class="keyword">ORDER</span>  <span class="keyword">BY</span> a.is_reply <span class="keyword">ASC</span>,</span><br><span class="line">          a.appraise_time <span class="keyword">DESC</span></span><br><span class="line">LIMIT  <span class="number">0</span>, <span class="number">20</span>;</span><br></pre></td></tr></table></figure>

<p>The execution plan shows a full table scan:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----+-------------+-------+--------+-------------+---------+---------+---------------+---------+-+</span><br><span class="line">| <span class="built_in">id</span> | select_type | table | <span class="built_in">type</span>   | possible_keys     | key     | key_len | ref      | rows    | Extra</span><br><span class="line">+----+-------------+-------+--------+-------------+---------+---------+---------------+---------+-+</span><br><span class="line">|  1 | SIMPLE      | a     | ALL    | idx_orderid | NULL    | NULL    | NULL    | 1967647 | Using filesort |</span><br><span class="line">|  1 | SIMPLE      | o     | eq_ref | PRIMARY     | PRIMARY | 122     | a.orderid |       1 | NULL           |</span><br><span class="line">+----+-------------+-------+--------+---------+---------+---------+-----------------+---------+-+</span><br></pre></td></tr></table></figure>

<p>Since <code>is_reply</code> only has two states, 0 and 1, we can rewrite it as follows, reducing the execution time from 1.58 seconds to 2 milliseconds:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span>   ((<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">         <span class="keyword">FROM</span>   my_order o</span><br><span class="line">                <span class="keyword">INNER</span> <span class="keyword">JOIN</span> my_appraise a</span><br><span class="line">                        <span class="keyword">ON</span> a.orderid <span class="operator">=</span> o.id</span><br><span class="line">                           <span class="keyword">AND</span> is_reply <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">         <span class="keyword">ORDER</span>  <span class="keyword">BY</span> appraise_time <span class="keyword">DESC</span></span><br><span class="line">         LIMIT  <span class="number">0</span>, <span class="number">20</span>)</span><br><span class="line">        <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">        (<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">         <span class="keyword">FROM</span>   my_order o</span><br><span class="line">                <span class="keyword">INNER</span> <span class="keyword">JOIN</span> my_appraise a</span><br><span class="line">                        <span class="keyword">ON</span> a.orderid <span class="operator">=</span> o.id</span><br><span class="line">                           <span class="keyword">AND</span> is_reply <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">         <span class="keyword">ORDER</span>  <span class="keyword">BY</span> appraise_time <span class="keyword">DESC</span></span><br><span class="line">         LIMIT  <span class="number">0</span>, <span class="number">20</span>)) t</span><br><span class="line"><span class="keyword">ORDER</span>  <span class="keyword">BY</span>  is_reply <span class="keyword">ASC</span>,</span><br><span class="line">          appraisetime <span class="keyword">DESC</span></span><br><span class="line">LIMIT  <span class="number">20</span>;</span><br></pre></td></tr></table></figure>

<h2 id="EXISTS-Statement"><a href="#EXISTS-Statement" class="headerlink" title="EXISTS Statement"></a>EXISTS Statement</h2><p>When dealing with EXISTS clauses, MySQL still uses nested subqueries for execution. Take the following SQL statement as an example:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span>   my_neighbor n</span><br><span class="line">       <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> my_neighbor_apply sra</span><br><span class="line">              <span class="keyword">ON</span> n.id <span class="operator">=</span> sra.neighbor_id</span><br><span class="line">                 <span class="keyword">AND</span> sra.user_id <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span>  n.topic_status <span class="operator">&lt;</span> <span class="number">4</span></span><br><span class="line">       <span class="keyword">AND</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> <span class="number">1</span></span><br><span class="line">                  <span class="keyword">FROM</span>   message_info m</span><br><span class="line">                  <span class="keyword">WHERE</span>  n.id <span class="operator">=</span> m.neighbor_id</span><br><span class="line">                         <span class="keyword">AND</span> m.inuser <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line">       <span class="keyword">AND</span> n.topic_type <span class="operator">&lt;&gt;</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----+--------------------+-------+------+-----+------------------------------------------+---------+-------+---------+ -----+</span><br><span class="line">| <span class="built_in">id</span> | select_type        | table | <span class="built_in">type</span> | possible_keys | key     | key_len | ref      | rows    | Extra</span><br><span class="line">+----+--------------------+-------+------+ -----+------------------------------------------+---------+-------+---------+ -----+</span><br><span class="line">|  1 | PRIMARY            | n     | ALL  |  | NULL     | NULL    | NULL    | 1086041 | Using <span class="built_in">where</span>                   |</span><br><span class="line">|  1 | PRIMARY            | sra   | ref  |  | idx_user_id | 123     | const |       1 | Using <span class="built_in">where</span>          |</span><br><span class="line">|  2 | DEPENDENT SUBQUERY | m     | ref  |  | idx_message_info   | 122     | const |       1 | Using index condition; Using <span class="built_in">where</span> |</span><br><span class="line">+----+--------------------+-------+------+ -----+------------------------------------------+---------+-------+---------+ -----+</span><br></pre></td></tr></table></figure>

<p>By removing the EXISTS clause and changing it to a JOIN, we can avoid nested subqueries and reduce the execution time from 1.93 seconds to 1 millisecond.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span>   my_neighbor n</span><br><span class="line">       <span class="keyword">INNER</span> <span class="keyword">JOIN</span> message_info m</span><br><span class="line">               <span class="keyword">ON</span> n.id <span class="operator">=</span> m.neighbor_id</span><br><span class="line">                  <span class="keyword">AND</span> m.inuser <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">       <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> my_neighbor_apply sra</span><br><span class="line">              <span class="keyword">ON</span> n.id <span class="operator">=</span> sra.neighbor_id</span><br><span class="line">                 <span class="keyword">AND</span> sra.user_id <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span>  n.topic_status <span class="operator">&lt;</span> <span class="number">4</span></span><br><span class="line">       <span class="keyword">AND</span> n.topic_type <span class="operator">&lt;&gt;</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<p>The new execution plan is as follows:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----+-------------+-------+--------+ -----+------------------------------------------+---------+ -----+------+ -----+</span><br><span class="line">| <span class="built_in">id</span> | select_type | table | <span class="built_in">type</span>   | possible_keys | key   | key_len | ref   | rows | Extra |</span><br><span class="line">+----+-------------+-------+--------+ -----+------------------------------------------+---------+ -----+------+ -----+</span><br><span class="line">|  1 | SIMPLE      | m     | ref    | | idx_message_info   | 122     | const |    1 | Using index condition |</span><br><span class="line">|  1 | SIMPLE      | n     | eq_ref | | PRIMARY   | 122     | ighbor_id |    1 | Using <span class="built_in">where</span>      |</span><br><span class="line">|  1 | SIMPLE      | sra   | ref    | | idx_user_id | 123     | const |    1 | Using <span class="built_in">where</span>           |</span><br><span class="line">+----+-------------+-------+--------+ -----+------------------------------------------+---------+ -----+------+ -----+</span><br></pre></td></tr></table></figure>

<h2 id="Condition-Pushdown"><a href="#Condition-Pushdown" class="headerlink" title="Condition Pushdown"></a>Condition Pushdown</h2><p>There are cases where external query conditions cannot be pushed down to complex views or subqueries:</p>
<ol>
<li>Aggregated subqueries</li>
<li>Subqueries with LIMIT</li>
<li>UNION or UNION ALL subqueries</li>
<li>Subqueries in output fields</li>
</ol>
<p>Consider the following statement, where the condition affects the aggregated subquery:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span>   (<span class="keyword">SELECT</span> target,</span><br><span class="line">               <span class="built_in">Count</span>(<span class="operator">*</span>)</span><br><span class="line">        <span class="keyword">FROM</span>   operation</span><br><span class="line">        <span class="keyword">GROUP</span>  <span class="keyword">BY</span> target) t</span><br><span class="line"><span class="keyword">WHERE</span>  target <span class="operator">=</span> <span class="string">&#x27;rm-xxxx&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----+-------------+------------+-------+---------------+-------------+---------+-------+------+-------------+</span><br><span class="line">| <span class="built_in">id</span> | select_type | table      | <span class="built_in">type</span>  | possible_keys | key         | key_len | ref   | rows | Extra       |</span><br><span class="line">+----+-------------+------------+-------+---------------+-------------+---------+-------+------+-------------+</span><br><span class="line">|  1 | PRIMARY     | n          | ALL   | NULL          | NULL        | NULL    | NULL  | 1086041 | Using <span class="built_in">where</span> |</span><br><span class="line">|  1 | PRIMARY     | sra        | ref   | NULL          | idx_user_id | 123     | const |    1 | Using <span class="built_in">where</span> |</span><br><span class="line">|  2 | DEPENDENT SUBQUERY | m | ref   | NULL          | idx_message_info   | 122     | const |    1 | Using index condition; Using <span class="built_in">where</span> |</span><br><span class="line">+----+-------------+------------+-------+---------------+-------------+---------+-------+------+-------------+</span><br></pre></td></tr></table></figure>

<p>By removing the EXISTS clause and changing it to a JOIN, we can avoid nested subqueries and reduce the execution time from 1.93 seconds to 1 millisecond.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span>   my_neighbor n</span><br><span class="line">       <span class="keyword">INNER</span> <span class="keyword">JOIN</span> message_info m</span><br><span class="line">               <span class="keyword">ON</span> n.id <span class="operator">=</span> m.neighbor_id</span><br><span class="line">                  <span class="keyword">AND</span> m.inuser <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">       <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> my_neighbor_apply sra</span><br><span class="line">              <span class="keyword">ON</span> n.id <span class="operator">=</span> sra.neighbor_id</span><br><span class="line">                 <span class="keyword">AND</span> sra.user_id <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span>  n.topic_status <span class="operator">&lt;</span> <span class="number">4</span></span><br><span class="line">       <span class="keyword">AND</span> n.topic_type <span class="operator">&lt;&gt;</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<p>The new execution plan is as follows:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----+-------------+-------+--------+ -----+------------------------------------------+---------+ -----+------+ -----+</span><br><span class="line">| <span class="built_in">id</span> | select_type | table | <span class="built_in">type</span>   | possible_keys | key   | key_len | ref   | rows | Extra |</span><br><span class="line">+----+-------------+-------+--------+ -----+------------------------------------------+---------+ -----+------+ -----+</span><br><span class="line">|  1 | SIMPLE      | m     | ref    | | idx_message_info   | 122     | const |    1 | Using index condition |</span><br><span class="line">|  1 | SIMPLE      | n     | eq_ref | | PRIMARY   | 122     | ighbor_id |    1 | Using <span class="built_in">where</span>      |</span><br><span class="line">|  1 | SIMPLE      | sra   | ref    | | idx_user_id | 123     | const |    1 | Using <span class="built_in">where</span>           |</span><br><span class="line">+----+-------------+-------+--------+ -----+------------------------------------------+---------+ -----+------+ -----+</span><br></pre></td></tr></table></figure>

<h2 id="Narrowing-the-Scope-in-Advance"><a href="#Narrowing-the-Scope-in-Advance" class="headerlink" title="Narrowing the Scope in Advance"></a>Narrowing the Scope in Advance</h2><p>Let’s take a look at the following partially optimized example (main table in the left join acts as a primary query condition):</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>    a.<span class="operator">*</span>,</span><br><span class="line">          c.allocated</span><br><span class="line"><span class="keyword">FROM</span>      (</span><br><span class="line">              <span class="keyword">SELECT</span>   resourceid</span><br><span class="line">              <span class="keyword">FROM</span>     my_distribute d</span><br><span class="line">                   <span class="keyword">WHERE</span>    isdelete <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">                   <span class="keyword">AND</span>      cusmanagercode <span class="operator">=</span> <span class="string">&#x27;1234567&#x27;</span></span><br><span class="line">                   <span class="keyword">ORDER</span> <span class="keyword">BY</span> salecode limit <span class="number">20</span>) a</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">          (</span><br><span class="line">              <span class="keyword">SELECT</span>   resourcesid， <span class="built_in">sum</span>(ifnull(allocation, <span class="number">0</span>) <span class="operator">*</span> <span class="number">12345</span>) allocated</span><br><span class="line">              <span class="keyword">FROM</span>     my_resources</span><br><span class="line">                   <span class="keyword">GROUP</span> <span class="keyword">BY</span> resourcesid) c</span><br><span class="line"><span class="keyword">ON</span>        a.resourceid <span class="operator">=</span> c.resourcesid;</span><br></pre></td></tr></table></figure>

<p>Does this statement still have other issues? It is clear that subquery c is an aggregate query on the entire table, which can cause performance degradation when dealing with a large number of tables.</p>
<p>In fact, for subquery c, the left join result set only cares about the data that can be matched with the primary table’s <code>resourceid</code>. Therefore, we can rewrite the statement as follows, reducing the execution time from 2 seconds to 2 milliseconds:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>    a.<span class="operator">*</span>,</span><br><span class="line">          c.allocated</span><br><span class="line"><span class="keyword">FROM</span>      (</span><br><span class="line">                   <span class="keyword">SELECT</span>   resourceid</span><br><span class="line">                   <span class="keyword">FROM</span>     my_distribute d</span><br><span class="line">                   <span class="keyword">WHERE</span>    isdelete <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">                   <span class="keyword">AND</span>      cusmanagercode <span class="operator">=</span> <span class="string">&#x27;1234567&#x27;</span></span><br><span class="line">                   <span class="keyword">ORDER</span> <span class="keyword">BY</span> salecode limit <span class="number">20</span>) a</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">          (</span><br><span class="line">                   <span class="keyword">SELECT</span>   resourcesid， <span class="built_in">sum</span>(ifnull(allocation, <span class="number">0</span>) <span class="operator">*</span> <span class="number">12345</span>) allocated</span><br><span class="line">                   <span class="keyword">FROM</span>     my_resources r,</span><br><span class="line">                            (</span><br><span class="line">                                     <span class="keyword">SELECT</span>   resourceid</span><br><span class="line">                                     <span class="keyword">FROM</span>     my_distribute d</span><br><span class="line">                                     <span class="keyword">WHERE</span>    isdelete <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">                                     <span class="keyword">AND</span>      cusmanagercode <span class="operator">=</span> <span class="string">&#x27;1234567&#x27;</span></span><br><span class="line">                                     <span class="keyword">ORDER</span> <span class="keyword">BY</span> salecode limit <span class="number">20</span>) a</span><br><span class="line">                   <span class="keyword">WHERE</span>    r.resourcesid <span class="operator">=</span> a.resourcesid</span><br><span class="line">                   <span class="keyword">GROUP</span> <span class="keyword">BY</span> resourcesid) c</span><br><span class="line"><span class="keyword">ON</span>        a.resourceid <span class="operator">=</span> c.resourcesid;</span><br></pre></td></tr></table></figure>

<p>However, the subquery <code>a</code> appears multiple times in our SQL statement. This approach not only incurs additional costs but also makes the statement more complex. We can simplify it using the WITH statement:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WITH</span> a <span class="keyword">AS</span></span><br><span class="line">(</span><br><span class="line">         <span class="keyword">SELECT</span>   resourceid</span><br><span class="line">         <span class="keyword">FROM</span>     my_distribute d</span><br><span class="line">         <span class="keyword">WHERE</span>    isdelete <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">         <span class="keyword">AND</span>      cusmanagercode <span class="operator">=</span> <span class="string">&#x27;1234567&#x27;</span></span><br><span class="line">         <span class="keyword">ORDER</span> <span class="keyword">BY</span> salecode limit <span class="number">20</span>)</span><br><span class="line"><span class="keyword">SELECT</span>    a.<span class="operator">*</span>,</span><br><span class="line">          c.allocated</span><br><span class="line"><span class="keyword">FROM</span>      a</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">          (</span><br><span class="line">                   <span class="keyword">SELECT</span>   resourcesid， <span class="built_in">sum</span>(ifnull(allocation, <span class="number">0</span>) <span class="operator">*</span> <span class="number">12345</span>) allocated</span><br><span class="line">                   <span class="keyword">FROM</span>     my_resources r,</span><br><span class="line">                            a</span><br><span class="line">                   <span class="keyword">WHERE</span>    r.resourcesid <span class="operator">=</span> a.resourcesid</span><br><span class="line">                   <span class="keyword">GROUP</span> <span class="keyword">BY</span> resourcesid) c</span><br><span class="line"><span class="keyword">ON</span>        a.resourceid <span class="operator">=</span> c.resourcesid;</span><br></pre></td></tr></table></figure>

<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>The database compiler generates execution plans that determine how SQL statements are actually executed. However, compilers can only do their best to serve, and no database compiler is perfect. The scenarios mentioned above also exist in other databases. Understanding the characteristics of the database compiler allows us to work around its limitations and write high-performance SQL statements.</p>
<p>When designing data models and writing SQL statements, it is important to bring algorithmic thinking or awareness into the process. Developing the habit of using the WITH statement when writing complex SQL statements can simplify them and reduce the burden on the database.</p>
<p>Finally, here is the execution order of SQL statements:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span></span><br><span class="line"><span class="operator">&lt;</span>left_table<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ON</span></span><br><span class="line"><span class="operator">&lt;</span>join_condition<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&lt;</span>join_type<span class="operator">&gt;</span></span><br><span class="line"> <span class="keyword">JOIN</span></span><br><span class="line"><span class="operator">&lt;</span>right_table<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"><span class="operator">&lt;</span>where_condition<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line"><span class="operator">&lt;</span>group_by_list<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line"><span class="operator">&lt;</span>having_condition<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DISTINCT</span></span><br><span class="line"><span class="operator">&lt;</span>select_list<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line"><span class="operator">&lt;</span>order_by_condition<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line">LIMIT</span><br><span class="line"><span class="operator">&lt;</span>limit_number<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>db</tag>
      </tags>
  </entry>
  <entry>
    <title>11 Tips for Detecting and Responding to Intrusions on Linux</title>
    <url>/2024/05/10/11%20Tips%20for%20Detecting%20and%20Responding%20to%20Intrusions%20on%20Linux/</url>
    <content><![CDATA[<p>![[Pasted image 20240510093043.png]]<br>With the increasing popularity of open-source products, it is crucial for a backend engineer to be able to clearly identify whether an abnormal machine has been compromised. Based on my personal work experience, I have compiled several common scenarios of machines being hacked for reference.</p>
<span id="more"></span>

<blockquote>
<p>This article is first published in the medium MPP plan. If you are a medium user, please follow me in <a href="https://medium.hxzhouh.com/">medium</a>. Thank you very much.</p>
</blockquote>
<blockquote>
<p>Background: The following scenarios are observed on CentOS systems and are similar for other Linux distributions.</p>
</blockquote>
<h4 id="1-Intruders-May-Delete-Machine-Logs"><a href="#1-Intruders-May-Delete-Machine-Logs" class="headerlink" title="1. Intruders May Delete Machine Logs"></a>1. Intruders May Delete Machine Logs</h4><p>Check if log information still exists or has been cleared using the following commands:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/42e92e989d964542c270e2815bde6619.png" alt="Image"></p>
<h3 id="2-Intruders-May-Create-a-New-File-for-Storing-Usernames-and-Passwords"><a href="#2-Intruders-May-Create-a-New-File-for-Storing-Usernames-and-Passwords" class="headerlink" title="2. Intruders May Create a New File for Storing Usernames and Passwords"></a>2. Intruders May Create a New File for Storing Usernames and Passwords</h3><p>Check <code>/etc/passwd</code> and <code>/etc/shadow</code> files for any alterations using the following commands:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/e239d400fade65005ac316954e70fac8.png" alt="Pasted image 20240510085544"></p>
<h3 id="3-Intruders-May-Modify-Usernames-and-Passwords"><a href="#3-Intruders-May-Modify-Usernames-and-Passwords" class="headerlink" title="3. Intruders May Modify Usernames and Passwords"></a>3. Intruders May Modify Usernames and Passwords</h3><p>Examine the contents of <code>/etc/passwd</code> and <code>/etc/shadow</code> files for any changes using the following commands:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/b757b1e52c23abf2d352d480cbdfe85d.png" alt="Pasted image 20240510085559"></p>
<h3 id="4-Check-Recent-Successful-and-Last-Unsuccessful-Login-Events-on-the-Machine"><a href="#4-Check-Recent-Successful-and-Last-Unsuccessful-Login-Events-on-the-Machine" class="headerlink" title="4. Check Recent Successful and Last Unsuccessful Login Events on the Machine"></a>4. Check Recent Successful and Last Unsuccessful Login Events on the Machine</h3><p>Refer to the log “&#x2F;var&#x2F;log&#x2F;lastlog” using the following commands:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/ed0004d926cf0e1d7289d2437c25be21.png" alt="Pasted image 20240510085611"></p>
<h3 id="5-Use-who-to-View-All-Currently-Logged-in-Users-on-the-Machine"><a href="#5-Use-who-to-View-All-Currently-Logged-in-Users-on-the-Machine" class="headerlink" title="5. Use who to View All Currently Logged-in Users on the Machine"></a>5. Use <code>who</code> to View All Currently Logged-in Users on the Machine</h3><p>Refer to the log file “&#x2F;var&#x2F;run&#x2F;utmp”:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/f9f029a7bdbba6d3b2ed542885c9dd75.png" alt="Pasted image 20240510085623"></p>
<h3 id="6-Use-last-to-View-Users-Logged-in-Since-Machine-Creation"><a href="#6-Use-last-to-View-Users-Logged-in-Since-Machine-Creation" class="headerlink" title="6. Use last to View Users Logged in Since Machine Creation"></a>6. Use <code>last</code> to View Users Logged in Since Machine Creation</h3><p>Refer to the log file “&#x2F;var&#x2F;log&#x2F;wtmp”:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/e1173e24b413d89a811a138ea74dcef2.png" alt="Pasted image 20240510085717"></p>
<h3 id="7-Use-ac-to-View-Connection-Time-in-Hours-for-All-Users-on-the-Machine"><a href="#7-Use-ac-to-View-Connection-Time-in-Hours-for-All-Users-on-the-Machine" class="headerlink" title="7. Use ac to View Connection Time (in Hours) for All Users on the Machine"></a>7. Use <code>ac</code> to View Connection Time (in Hours) for All Users on the Machine</h3><p>Refer to the log file “&#x2F;var&#x2F;log&#x2F;wtmp”:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/1c311e4b87e54606127029433b6ecb6f.png" alt="Pasted image 20240510085812"></p>
<h3 id="8-If-Abnormal-Traffic-is-Detected"><a href="#8-If-Abnormal-Traffic-is-Detected" class="headerlink" title="8. If Abnormal Traffic is Detected"></a>8. If Abnormal Traffic is Detected</h3><p>Use “tcpdump” to capture network packets or “iperf” to check traffic.</p>
<h3 id="9-Review-the-var-log-secure-Log-File"><a href="#9-Review-the-var-log-secure-Log-File" class="headerlink" title="9. Review the /var/log/secure Log File"></a>9. Review the <code>/var/log/secure</code> Log File</h3><p>Attempt to identify information about intruders using the following commands:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/6dd9205f9ffcab13df215be22965c6dd.png" alt="Pasted image 20240510085837"></p>
<h3 id="10-Identify-Scripts-Executed-by-Abnormal-Processes"><a href="#10-Identify-Scripts-Executed-by-Abnormal-Processes" class="headerlink" title="10. Identify Scripts Executed by Abnormal Processes"></a>10. Identify Scripts Executed by Abnormal Processes</h3><p>a. Use the <code>top</code> command to view the PID of abnormal processes:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/38f534f788f32154517ab65359f3e9c9.png" alt="Pasted image 20240510085848"></p>
<p>b. Search for the executable file of the process in the virtual file system directory:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/afb05ea6f7a54b5f129b365623fbccba.png" alt="Pasted image 20240510085857"></p>
<h3 id="11-File-Recovery-After-Confirming-Intrusion-and-Deletion-of-Important-Files"><a href="#11-File-Recovery-After-Confirming-Intrusion-and-Deletion-of-Important-Files" class="headerlink" title="11. File Recovery After Confirming Intrusion and Deletion of Important Files"></a>11. File Recovery After Confirming Intrusion and Deletion of Important Files</h3><ol>
<li><p>When a process opens a file, even if it’s deleted, it remains on the disk as long as the process keeps it open. To recover such files, use <code>lsof</code> from the <code>/proc</code> directory.</p>
</li>
<li><p>Most <code>lsof</code> information is stored in directories named after the process’s PID, such as <code>/proc/1234</code>, containing information for PID 1234. Each process directory contains various files providing insight into the process’s memory space, file descriptor list, symbolic links to files on disk, and other system information. <code>lsof</code> uses this and other kernel internal state information to generate its output.</p>
</li>
</ol>
<p>Using the information above, you can retrieve the data by examining <code>/proc/&lt;PID&gt;/fd/&lt;descriptor&gt;</code>.</p>
<p>For example, to recover <code>/var/log/secure</code>, follow these steps:</p>
<p>a. Check <code>/var/log/secure</code>, confirming its absence:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/6c18c569526d125bae3f25506cd5ec33.png" alt="Pasted image 20240510085921"></p>
<p>b. Use <code>lsof</code> to check if any process is currently accessing <code>/var/log/secure</code>:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/8461eb12150d46a0207768619be58e61.png" alt="Pasted image 20240510085930"></p>
<p>c. From the information above, PID 1264 (rsyslogd) has opened the file with a file descriptor of 4. It’s marked as deleted. Therefore, you can check the corresponding information in <code>/proc/1264/fd/4</code>:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/4f325beddb0b3eda8e6ba836f8ec3ad7.png" alt="Pasted image 20240510085938"></p>
<p>d. You can recover the data by redirecting it to a file using I&#x2F;O redirection:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/5c36a1b092df4eacf143d1171a19d651.png" alt="Pasted image 20240510085950"></p>
<p>e. Confirm the existence of <code>/var/log/secure</code> again. This method is particularly useful for many applications, especially log files and databases.</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/05/46b775fce5dcc17d6114c49eb060460b.png" alt="Pasted image 20240510090000"></p>
<p>The above is the method I summarized for dealing with Linux intrusion. It can generally handle most problems. If you encounter an unresolved issue, it is best to seek advice from a professional IT operations and maintenance engineer.</p>
<p>I may not have written it completely correctly, so if you have different opinions, please leave a comment and let me know.</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title>A Deep Dive into CNCF’s Cloud-Native AI Whitepaper</title>
    <url>/2024/04/17/A%20Deep%20Dive%20into%20CNCF%E2%80%99s%20Cloud-Native%20AI%20Whitepaper/</url>
    <content><![CDATA[<p><img src="https://images.hxzhouh.com/blog-images/2024/04/3c8f677dae51c4d491a982224b6a3e0d.png" alt="cncf"></p>
<blockquote>
<p>During KubeCon EU 2024, CNCF launched its first Cloud-Native AI Whitepaper. This article provides an in-depth analysis of the content of this whitepaper.</p>
</blockquote>
<p>In March 2024, during KubeCon EU, the Cloud-Native Computing Foundation (CNCF) released its first detailed whitepaper on Cloud-Native Artificial Intelligence (CNAI) <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. This report extensively explores the current state, challenges, and future development directions of integrating cloud-native technologies with artificial intelligence. This article will delve into the core content of this whitepaper.</p>
<span id="more"></span>
<h2 id="What-is-Cloud-Native-AI"><a href="#What-is-Cloud-Native-AI" class="headerlink" title="What is Cloud-Native AI?"></a>What is Cloud-Native AI?</h2><p>Cloud-Native AI refers to building and deploying artificial intelligence applications and workloads using cloud-native technology principles. This includes leveraging microservices, containerization, declarative APIs, and continuous integration&#x2F;continuous deployment (CI&#x2F;CD) among other cloud-native technologies to enhance AI applications’ scalability, reusability, and operability.</p>
<p>The following diagram illustrates the architecture of Cloud-Native AI, redrawn based on the whitepaper.<br><img src="https://images.hxzhouh.com/blog-images/2024/04/40eb5be3bd0139d72f816cef9d25a51f.png" alt="Pasted image 20240418101533"></p>
<h2 id="Relationship-between-Cloud-Native-AI-and-Cloud-Native-Technologies"><a href="#Relationship-between-Cloud-Native-AI-and-Cloud-Native-Technologies" class="headerlink" title="Relationship between Cloud-Native AI and Cloud-Native Technologies"></a>Relationship between Cloud-Native AI and Cloud-Native Technologies</h2><p>Cloud-native technologies provide a flexible, scalable platform that makes the development and operation of AI applications more efficient. Through containerization and microservices architecture, developers can iterate and deploy AI models quickly while ensuring high availability and scalability of the system. Kuuch as resource scheduling, automatic scaling, and service discovery.</p>
<p>The whitepaper provides two examples to illustrate the relationship between Cloud-Native AI and cloud-native technologies, namely running AI on cloud-native infrastructure:</p>
<ul>
<li>Hugging Face Collaborates with Microsoft to launch Hugging Face Model Catalog on Azure<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></li>
<li>OpenAI Scaling Kubernetes to 7,500 nodes<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></li>
</ul>
<h2 id="Challenges-of-Cloud-Native-AI"><a href="#Challenges-of-Cloud-Native-AI" class="headerlink" title="Challenges of Cloud-Native AI"></a>Challenges of Cloud-Native AI</h2><p>Despite providing a solid foundation for AI applications, there are still challenges when integrating AI workloads with cloud-native platforms. These challenges include data preparation complexity, model training resource requirements, and maintaining model security and isolation in multi-tenant environments. Additionally, resource management and scheduling in cloud-native environments are crucial for large-scale AI applications and need further optimization to support efficient model training and inference.</p>
<h2 id="Development-Path-of-Cloud-Native-AI"><a href="#Development-Path-of-Cloud-Native-AI" class="headerlink" title="Development Path of Cloud-Native AI"></a>Development Path of Cloud-Native AI</h2><p>The whitepaper proposes several development paths for Cloud-Native AI, including improving resource scheduling algorithms to better support AI workloads, developing new service mesh technologies to enhance the performance and security of AI applications, and promoting innovation and standardization of Cloud-Native AI technology through open-source projects and community collaboration.</p>
<h2 id="Cloud-Native-AI-Technology-Landscape"><a href="#Cloud-Native-AI-Technology-Landscape" class="headerlink" title="Cloud-Native AI Technology Landscape"></a>Cloud-Native AI Technology Landscape</h2><p>Cloud-Native AI involves various technologies, ranging from containers and microservices to service mesh and serverless computing. Kubernetes plays a central role in deploying and managing AI applications, while service mesh technologies such as Istio and Envoy provide robust traffic management and security features. Additionally, monitoring tools like Prometheus and Grafana are crucial for maintaining the performance and reliability of AI applications.</p>
<p>Below is the Cloud-Native AI landscape diagram provided in the whitepaper.</p>
<ul>
<li>Kubernetes</li>
<li>Volcano</li>
<li>Armada</li>
<li>Kuberay</li>
<li>Nvidia NeMo</li>
<li>Yunikorn</li>
<li>Kueue</li>
<li>Flame</li>
</ul>
<h2 id="Distributed-Training"><a href="#Distributed-Training" class="headerlink" title="Distributed Training"></a>Distributed Training</h2><ul>
<li>Kubeflow Training Operator</li>
<li>Pytorch DDP</li>
<li>TensorFlow Distributed</li>
<li>Open MPI</li>
<li>DeepSpeed</li>
<li>Megatron</li>
<li>Horovod</li>
<li>Apla</li>
<li>…</li>
</ul>
<h2 id="ML-Serving"><a href="#ML-Serving" class="headerlink" title="ML Serving"></a>ML Serving</h2><ul>
<li>Kserve</li>
<li>Seldon</li>
<li>VLLM</li>
<li>TGT</li>
<li>Skypilot</li>
<li>…</li>
</ul>
<h2 id="CI-CD-—-Delivery"><a href="#CI-CD-—-Delivery" class="headerlink" title="CI&#x2F;CD — Delivery"></a>CI&#x2F;CD — Delivery</h2><ul>
<li>Kubeflow Pipelines</li>
<li>Mlflow</li>
<li>TFX</li>
<li>BentoML</li>
<li>MLRun</li>
<li>…</li>
</ul>
<h2 id="Data-Science"><a href="#Data-Science" class="headerlink" title="Data Science"></a>Data Science</h2><ul>
<li>Jupyter</li>
<li>Kubeflow Notebooks</li>
<li>PyTorch</li>
<li>TensorFlow</li>
<li>Apache Zeppelin</li>
</ul>
<h2 id="Workload-Observability"><a href="#Workload-Observability" class="headerlink" title="Workload Observability"></a>Workload Observability</h2><ul>
<li>Prometheus</li>
<li>Influxdb</li>
<li>Grafana</li>
<li>Weights and Biases (wandb)</li>
<li>OpenTelemetry</li>
<li>…</li>
</ul>
<h2 id="AutoML"><a href="#AutoML" class="headerlink" title="AutoML"></a>AutoML</h2><ul>
<li>Hyperopt</li>
<li>Optuna</li>
<li>Kubeflow Katib</li>
<li>NNI</li>
<li>…</li>
</ul>
<h2 id="Governance-Policy"><a href="#Governance-Policy" class="headerlink" title="Governance &amp; Policy"></a>Governance &amp; Policy</h2><ul>
<li>Kyverno</li>
<li>Kyverno-JSON</li>
<li>OPA&#x2F;Gatekeeper</li>
<li>StackRox Minder</li>
<li>…</li>
</ul>
<h2 id="Data-Architecture"><a href="#Data-Architecture" class="headerlink" title="Data Architecture"></a>Data Architecture</h2><ul>
<li>ClickHouse</li>
<li>Apache Pinot</li>
<li>Apache Druid</li>
<li>Cassandra</li>
<li>ScyllaDB</li>
<li>Hadoop HDFS</li>
<li>Apache HBase</li>
<li>Presto</li>
<li>Trino</li>
<li>Apache Spark</li>
<li>Apache Flink</li>
<li>Kafka</li>
<li>Pulsar</li>
<li>Fluid</li>
<li>Memcached</li>
<li>Redis</li>
<li>Alluxio</li>
<li>Apache Superset</li>
<li>…</li>
</ul>
<h2 id="Vector-Databases"><a href="#Vector-Databases" class="headerlink" title="Vector Databases"></a>Vector Databases</h2><ul>
<li>Chroma</li>
<li>Weaviate</li>
<li>Quadrant</li>
<li>Pinecone</li>
<li>Extensions</li>
<li>Redis</li>
<li>Postgres SQL</li>
<li>ElasticSearch</li>
<li>…</li>
</ul>
<h2 id="Model-LLM-Observability"><a href="#Model-LLM-Observability" class="headerlink" title="Model&#x2F;LLM Observability"></a>Model&#x2F;LLM Observability</h2><ul>
<li>• Trulens</li>
<li>Langfuse</li>
<li>Deepchecks</li>
<li>OpenLLMetry</li>
<li>…</li>
</ul>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Finally, the following key points are summarized:</p>
<ul>
<li><strong>Role of Open Source Community</strong>: The whitepaper indicates the role of the open-source community in advancing Cloud-Native AI, including accelerating innovation and reducing costs through open-source projects and extensive collaboration.</li>
<li><strong>Importance of Cloud-Native Technologies</strong>: Cloud-Native AI, built according to cloud-native principles, emphasizes the importance of repeatability and scalability. Cloud-native technologies provide an efficient development and operation environment for AI applications, especially in resource scheduling and service scalability.</li>
<li><strong>Existing Challenges</strong>: Despite bringing many advantages, Cloud-Native AI still faces challenges in data preparation, model training resource requirements, and model security and isolation.</li>
<li><strong>Future Development Directions</strong>: The whitepaper proposes development paths including optimizing resource scheduling algorithms to support AI workloads, developing new service mesh technologies to enhance performance and security, and promoting technology innovation and standardization through open-source projects and community collaboration.</li>
<li><strong>Key Technological Components</strong>: Key technologies involved in Cloud-Native AI include containers, microservices, service mesh, and serverless computing, among others. Kubernetes plays a central role in deploying and managing AI applications, while service mesh technologies like Istio and Envoy provide necessary traffic management and security.</li>
</ul>
<p>For more details, please download the Cloud-Native AI whitepaper <sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>.</p>
<h2 id="Reference-Links"><a href="#Reference-Links" class="headerlink" title="Reference Links"></a>Reference Links</h2><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="https://www.cncf.io/reports/cloud-native-artificial-intelligence-whitepaper/">Whitepaper:</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;"><a href="https://huggingface.co/blog/hugging-face-endpoints-on-azure">Hugging Face Collaborates with Microsoft to launch Hugging Face Model Catalog on Azure</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;"><a href="https://openai.com/research/scaling-kubernetes-to-7500-nodes"> OpenAI Scaling Kubernetes to 7,500 nodes:</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;"><a href="https://www.cncf.io/reports/cloud-native-artificial-intelligence-whitepaper/">Cloud-Native AI Whitepaper: </a></span><a href="#fnref:4" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
      <categories>
        <category>Information</category>
      </categories>
      <tags>
        <tag>CNCF</tag>
      </tags>
  </entry>
  <entry>
    <title>Decryption go: understand go language pointer</title>
    <url>/2024/04/23/Decryption%20go%EF%BC%9A%20understand%20go%20language%20pointer_%20english/</url>
    <content><![CDATA[<blockquote>
<p>This article is first published in the medium MPP plan. If you are a medium user, please follow me in <a href="https://medium.hxzhouh.com/">medium</a>. Thank you very much.</p>
</blockquote>
<p>Go language has three types of pointers. In the normal development process, we only encounter the ordinary pointer. However, in the low-level source code of Go language, there are a lot of operations involving three types of pointer conversion and manipulation. Let’s clarify these points first.</p>
<span id="more"></span>

<p>In the C language, pointers are crucial. Although pointers make operations highly flexible and efficient, there are many security risks associated with accessing memory through pointer operations, such as accessing memory out of bounds and compromising the atomicity of types in the type system. Here are some examples of incorrect usage:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Example 1</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">2</span>];</span><br><span class="line">*(arr+<span class="number">2</span>) = <span class="number">1</span>;		<span class="comment">// Accessing memory address out of bounds</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Example 2</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">4</span>;	</span><br><span class="line"><span class="type">int</span>* ap = &amp;a;	 <span class="comment">// Taking the starting address of variable a (4 bytes)</span></span><br><span class="line">*(<span class="type">short</span>*)ap = <span class="number">2</span>; <span class="comment">// Modifying the first 2 bytes of the 4-byte variable a directly through type casting, thus breaking the atomicity of the int variable</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The code in Example 2 may occur in certain scenarios, but it has portability issues on machines with different endianness</span></span><br></pre></td></tr></table></figure>

<p>The reason for these security risks in the C language is that it supports pointer operations and pointer type conversions. Therefore, in Go language, the most commonly used ordinary pointers, which have types, have eliminated pointer arithmetic and type conversion operations to ensure type safety. Here’s an example:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="type">int32</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> ap *<span class="type">int32</span> = &amp;a	<span class="comment">// Ordinary pointer with type</span></span><br><span class="line"></span><br><span class="line">ap++ 				<span class="comment">// Illegal, pointer arithmetic is not allowed</span></span><br><span class="line">p := (*<span class="type">int16</span>)(ap)	<span class="comment">// Illegal, *int32 cannot be directly converted to *int16</span></span><br></pre></td></tr></table></figure>

<p>This ensures that pointers always point to valid addresses with allocated memory and preserves type independence and atomicity.</p>
<p>In addition to ordinary pointers, Go language also retains two other types of pointers that allow bypassing the type system and achieving the same level of memory manipulation as in C language. The other two types of pointers are:</p>
<ul>
<li><code>unsafe.Pointer</code>.</li>
<li><code>uintptr</code>.<br>To understand these two, we need to establish a concept: a pointer is essentially a number that stores a memory address. The addressing space is 32 bits for a 32-bit machine and 64 bits for a 64-bit machine, so the size of a pointer is equal to the number of bits in the machine.</li>
</ul>
<p><code>uintptr</code> is straightforward; it is simply a number that stores a memory address. It is equivalent to <code>uint32</code> on a 32-bit machine and <code>uint64</code> on a 64-bit machine. Since it is a number, it naturally supports arithmetic operations, which allows it to represent any memory location. However, the problem is that a data cannot be operated solely based on its memory address; you also need to know its size. In other words, we cannot manipulate data solely based on a <code>uintptr</code> pointer. On the other hand, an ordinary typed pointer not only provides the address but also informs the compiler about the size of the data pointed to. For example, <code>*int32</code> and <code>*int64</code> pointers tell the compiler that they operate on 4-byte and 8-byte data, respectively.</p>
<p>Now that we have explained ordinary pointers and <code>uintptr</code> pointers in Go language, what is this additional <code>unsafe.Pointer</code> compared to C language?</p>
<p><code>unsafe.Pointer</code> is a generic pointer that, like <code>uintptr</code>, only keeps the memory address without concerning itself with the type. However, the difference between <code>unsafe.Pointer</code> and <code>uintptr</code> is that the former refers to an object that will be referenced by the garbage collector (GC), so it will not be collected as garbage by the GC. In contrast, the latter only represents the memory address as a number, which means that if a data address is saved by <code>uintptr</code>, it will be mercilessly collected by the garbage collector.</p>
<p>Summary of the three types of pointers in Go language:</p>
<ul>
<li>Ordinary pointer: Does not support pointer arithmetic, saves the address and type information, and the data it points to will not be garbage collected by the GC.</li>
<li><code>unsafe.Pointer</code>: Does not support pointer arithmetic, saves the address but not the type information, and the data it points to will not be garbage collected by the GC.</li>
<li><code>uintptr</code>: Supports address arithmetic, saves the address but not the type information, and the data it points to will be garbage collected by the GC.</li>
</ul>
<p>In practical usage, <code>uintptr</code> cannot be directly converted to an ordinary pointer, and both must be first converted to <code>unsafe.Pointer</code> as an intermediate step before further conversion.</p>
<p>Here’s a simple example:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Foo <span class="keyword">struct</span>&#123;</span><br><span class="line">    a <span class="type">int32</span></span><br><span class="line">    b <span class="type">int32</span></span><br><span class="line">&#125;</span><br><span class="line">foo := &amp;Foo&#123;&#125;</span><br><span class="line">bp := <span class="type">uintptr</span>(unsafe.Pointer(foo)) + <span class="number">4</span>	<span class="comment">// Add 4 to the address of foo to locate foo.b</span></span><br><span class="line">*(*<span class="type">int32</span>)(unsafe.Pointer(bp)) = <span class="number">1</span>		<span class="comment">// Convert to *int32 ordinary pointer and modify the value</span></span><br><span class="line">fmt.Println(foo.b)	<span class="comment">// foo.b = 1</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go program pattern 01: Functional Options Pattern</title>
    <url>/2024/04/23/Go%20program%20pattern%2001%EF%BC%9A%20Functional%20Options%20Pattern/</url>
    <content><![CDATA[<p>Go is not a fully object-oriented language, and some object-oriented patterns are not well-suited for it. However, over the years, Go has developed its own set of patterns. Today, I would like to introduce a common pattern: the Functional Options Pattern.</p>
<span id="more"></span>

<blockquote>
<p>This article is first published in the medium MPP plan. If you are a medium user, please follow me in <a href="https://medium.hxzhouh.com/">medium</a>. Thank you very much.</p>
</blockquote>
<h2 id="What-is-the-Functional-Options-Pattern"><a href="#What-is-the-Functional-Options-Pattern" class="headerlink" title="What is the Functional Options Pattern?"></a>What is the Functional Options Pattern?</h2><p>Go does not have constructors like other languages. Instead, it typically uses a <code>New</code> function to act as a constructor. However, when a structure has many fields that need to be initialized, there are multiple ways to do so. One preferred way is to use the Functional Options Pattern.</p>
<p>The Functional Options Pattern is a pattern for constructing structs in Go. It involves designing a set of expressive and flexible APIs to help configure and initialize the struct.</p>
<p>The <a href="https://github.com/uber-go/guide/blob/master/style.md#functional-options">Go Language Specification</a> by Uber mentions this pattern:</p>
<blockquote>
<p>Functional options are a pattern in which you declare an opaque <code>Option</code> type that records information in some internal structure. You accept these variable numbers of options and operate on the complete information recorded by the options on the internal structure.</p>
<p>Use this pattern for optional parameters in constructors and other public APIs where you expect these parameters to be extended, especially when there are already three or more parameters on these functions.</p>
</blockquote>
<h2 id="An-Example"><a href="#An-Example" class="headerlink" title="An Example"></a>An Example</h2><p>To better understand this pattern, let’s walk through an example.<br>Let’s define a <code>Server</code> struct:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line">    host <span class="type">string</span></span><br><span class="line">    port <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(host <span class="type">string</span>, port <span class="type">int</span>)</span></span> *Server &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Server&#123;</span><br><span class="line">        host,</span><br><span class="line">        port,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> Start() <span class="type">error</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>How do we use it?</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    svr := New(<span class="string">&quot;localhost&quot;</span>, <span class="number">1234</span>)</span><br><span class="line">    <span class="keyword">if</span> err := svr.Start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>But what if we want to extend the configuration options for the <code>Server</code>? There are generally three approaches:</p>
<ul>
<li>Declare a new constructor function for each different configuration option.</li>
<li>Define a new <code>Config</code> struct to store the configuration information.</li>
<li>Use the Functional Options Pattern.</li>
</ul>
<h3 id="Approach-1-Declare-a-new-constructor-function-for-each-different-configuration-option"><a href="#Approach-1-Declare-a-new-constructor-function-for-each-different-configuration-option" class="headerlink" title="Approach 1: Declare a new constructor function for each different configuration option"></a>Approach 1: Declare a new constructor function for each different configuration option</h3><p>This approach involves defining dedicated constructor functions for different options. Let’s say we added two fields to the <code>Server</code> struct:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line">    host    <span class="type">string</span></span><br><span class="line">    port    <span class="type">int</span></span><br><span class="line">    timeout time.Duration</span><br><span class="line">    maxConn <span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Typically, <code>host</code> and <code>port</code> are required fields, while <code>timeout</code> and <code>maxConn</code> are optional. We can keep the original constructor function and assign default values to these two fields:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(host <span class="type">string</span>, port <span class="type">int</span>)</span></span> *Server &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Server&#123;</span><br><span class="line">        host,</span><br><span class="line">        port,</span><br><span class="line">        time.Minute,</span><br><span class="line">        <span class="number">100</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Then, we can provide two additional constructor functions for <code>timeout</code> and <code>maxConn</code>:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewWithTimeout</span><span class="params">(host <span class="type">string</span>, port <span class="type">int</span>, timeout time.Duration)</span></span> *Server &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Server&#123;</span><br><span class="line">        host,</span><br><span class="line">        port,</span><br><span class="line">        timeout,</span><br><span class="line">        <span class="number">100</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewWithTimeoutAndMaxConn</span><span class="params">(host <span class="type">string</span>, port <span class="type">int</span>, timeout time.Duration, maxConn <span class="type">int</span>)</span></span> *Server &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Server&#123;</span><br><span class="line">        host,</span><br><span class="line">        port,</span><br><span class="line">        timeout,</span><br><span class="line">        maxConn,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>This approach works well for configurations that are unlikely to change frequently. Otherwise, you would need to create new constructor functions every time you need to add a new configuration. This approach is used in the Go standard library, such as the <code>Dial</code> and <code>DialTimeout</code> functions in the <code>net</code> package:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Dial</span><span class="params">(network, address <span class="type">string</span>)</span></span> (Conn, <span class="type">error</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DialTimeout</span><span class="params">(network, address <span class="type">string</span>, timeout time.Duration)</span></span> (Conn, <span class="type">error</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Approach-2-Use-a-dedicated-configuration-struct"><a href="#Approach-2-Use-a-dedicated-configuration-struct" class="headerlink" title="Approach 2: Use a dedicated configuration struct"></a>Approach 2: Use a dedicated configuration struct</h3><p>This approach is also common, especially when there are many configuration options. Typically, you create a <code>Config</code> struct that contains all the configuration options for the <code>Server</code>. This approach allows for easy extension without breaking the API of the <code>Server</code>, even when adding more configuration options in the future.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line">    cfg Config</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">    Host    <span class="type">string</span></span><br><span class="line">    Port    <span class="type">int</span></span><br><span class="line">    Timeout time.Duration</span><br><span class="line">    MaxConn <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(cfg Config)</span></span> *Server &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Server&#123;</span><br><span class="line">        cfg,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>When using this approach, you need to construct a <code>Config</code> instance first, which brings us back to the original problem of configuring the <code>Server</code>. If you modify the fields in <code>Config</code>, you may need to define a constructor function for <code>Config</code> if the fields are changed to private.</p>
<h3 id="Approach-3-Use-the-Functional-Options-Pattern"><a href="#Approach-3-Use-the-Functional-Options-Pattern" class="headerlink" title="Approach 3: Use the Functional Options Pattern"></a>Approach 3: Use the Functional Options Pattern</h3><p>A better solution is to use the Functional Options Pattern.</p>
<p>In this pattern, we define an <code>Option</code> function type:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Option <span class="function"><span class="keyword">func</span><span class="params">(*Server)</span></span></span><br></pre></td></tr></table></figure>

<p>The <code>Option</code> type is a function type that takes a <code>*Server</code> parameter. Then, the constructor function for <code>Server</code> accepts a variable number of <code>Option</code> types as parameters:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(options ...Option)</span></span> *Server &#123;</span><br><span class="line">    svr := &amp;Server&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> _, f := <span class="keyword">range</span> options &#123;</span><br><span class="line">        f(svr)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> svr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>How do the options work? We need to define a series of related functions that return <code>Option</code>:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithHost</span><span class="params">(host <span class="type">string</span>)</span></span> Option &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(s *Server)</span></span> &#123;</span><br><span class="line">        s.host = host</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithPort</span><span class="params">(port <span class="type">int</span>)</span></span> Option &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(s *Server)</span></span> &#123;</span><br><span class="line">        s.port = port</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithTimeout</span><span class="params">(timeout time.Duration)</span></span> Option &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(s *Server)</span></span> &#123;</span><br><span class="line">        s.timeout = timeout</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithMaxConn</span><span class="params">(maxConn <span class="type">int</span>)</span></span> Option &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(s *Server)</span></span> &#123;</span><br><span class="line">        s.maxConn = maxConn</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>To use this pattern, the client code would look like this:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;server&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    svr := New(</span><br><span class="line">        WithHost(<span class="string">&quot;localhost&quot;</span>),</span><br><span class="line">        WithPort(<span class="number">8080</span>),</span><br><span class="line">        WithTimeout(time.Minute),</span><br><span class="line">        WithMaxConn(<span class="number">120</span>),</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">if</span> err := svr.Start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Adding new options in the future only requires adding corresponding <code>WithXXX</code> functions.</p>
<p>This pattern is widely used in third-party libraries, such as <code>github.com/gocolly/colly</code>:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Collector <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCollector</span><span class="params">(options ...CollectorOption)</span></span> *Collector</span><br><span class="line"></span><br><span class="line"><span class="comment">// Defines a series of CollectorOptions</span></span><br><span class="line"><span class="keyword">type</span> CollectorOption <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AllowURLRevisit</span><span class="params">()</span></span> CollectorOption</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AllowedDomains</span><span class="params">(domains ...<span class="type">string</span>)</span></span> CollectorOption</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>However, when Uber’s Go Programming Style Guide mentions this pattern, it suggests defining an <code>Option</code> interface instead of an <code>Option</code> function type. This <code>Option</code> interface has an unexported method, and the options are recorded in an unexported <code>options</code> struct.</p>
<p>Can you understand Uber’s example?</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> options <span class="keyword">struct</span> &#123;</span><br><span class="line">    cache  <span class="type">bool</span></span><br><span class="line">    logger *zap.Logger</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Option <span class="keyword">interface</span> &#123;</span><br><span class="line">    apply(*options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> cacheOption <span class="type">bool</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c cacheOption)</span></span> apply(opts *options) &#123;</span><br><span class="line">    opts.cache = <span class="type">bool</span>(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithCache</span><span class="params">(c <span class="type">bool</span>)</span></span> Option &#123;</span><br><span class="line">    <span class="keyword">return</span> cacheOption(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> loggerOption <span class="keyword">struct</span> &#123;</span><br><span class="line">    Log *zap.Logger</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l loggerOption)</span></span> apply(opts *options) &#123;</span><br><span class="line">    opts.logger = l.Log</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithLogger</span><span class="params">(log *zap.Logger)</span></span> Option &#123;</span><br><span class="line">    <span class="keyword">return</span> loggerOption&#123;Log: log&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Open creates a connection.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Open</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    addr <span class="type">string</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    opts ...Option,</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> (*Connection, <span class="type">error</span>) &#123;</span><br><span class="line">    options := options&#123;</span><br><span class="line">        cache:  defaultCache,</span><br><span class="line">        logger: zap.NewNop(),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, o := <span class="keyword">range</span> opts &#123;</span><br><span class="line">        o.apply(&amp;options)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>In real-world projects, when dealing with a large number of options or options from different sources (e.g., from files or environment variables), consider using the Functional Options Pattern.</p>
<p>Note that in actual work, we should not rigidly apply the pattern as described above. For example, in Uber’s example, the <code>Open</code> function does not only accept a variable number of <code>Option</code> parameters because the <code>addr</code> parameter is required. Therefore, the Functional Options Pattern is more suitable for cases with many configurations and optional parameters.</p>
<p>References:</p>
<ul>
<li><a href="https://golang.cafe/blog/golang-functional-options-pattern.html">https://golang.cafe/blog/golang-functional-options-pattern.html</a></li>
<li><a href="https://github.com/uber-go/guide/blob/master/style.md#functional-options">https://github.com/uber-go/guide/blob/master/style.md#functional-options</a></li>
</ul>
<p>If you found my article enjoyable, feel free to follow me and give it a 👏. Your support would be greatly appreciated.</p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go Program pattern 04: Map-Reduce</title>
    <url>/2024/04/23/Go%20Program%20pattern%2004%EF%BC%9AMap-Reduce/</url>
    <content><![CDATA[<p>Map-Reduce is a programming paradigm used for processing large-scale datasets. It helps simplify the process of parallel computation and improves computational efficiency.  </p>
<span id="more"></span>

<blockquote>
<p>This article is first published in the medium MPP plan. If you are a medium user, please follow me in <a href="https://medium.hxzhouh.com/">medium</a>. Thank you very much.</p>
</blockquote>
<p>First, let’s understand the concepts of Map and Reduce.</p>
<ul>
<li>Map: In the Map phase, the input dataset is divided into a series of key-value pairs, and the same operation is applied to each key-value pair. This operation can be a function or a code block used to process each key-value pair and generate intermediate results.</li>
<li>Reduce: In the Reduce phase, the intermediate results generated in the Map phase are combined and processed to obtain the final output result. In the Reduce phase, we can aggregate, summarize, or perform other operations on intermediate results with the same key.</li>
</ul>
<p>The core idea of the Map-Reduce programming paradigm is “divide and conquer.” It allows us to break down complex computational tasks into multiple independent subtasks, process these subtasks in parallel, and then merge the results to obtain the final result.</p>
<h1 id="Basic-Example"><a href="#Basic-Example" class="headerlink" title="Basic Example"></a>Basic Example</h1><p>Here is a simple example demonstrating the workflow of Map-Reduce:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MapFunction</span><span class="params">(arr []<span class="type">string</span>, fn <span class="keyword">func</span>(<span class="type">string</span>)</span></span> <span class="type">string</span>) &lt;-<span class="keyword">chan</span> <span class="type">string</span> &#123;</span><br><span class="line">	ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">for</span> _, v := <span class="keyword">range</span> arr &#123;</span><br><span class="line">			ch &lt;- fn(v)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">close</span>(ch)</span><br><span class="line">	&#125;()</span><br><span class="line">	<span class="keyword">return</span> ch</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReduceFunction</span><span class="params">(ch &lt;-<span class="keyword">chan</span> <span class="type">string</span>, fn <span class="keyword">func</span>(<span class="type">string</span>, <span class="type">string</span>)</span></span> <span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">var</span> res <span class="type">string</span></span><br><span class="line">	<span class="keyword">for</span> v := <span class="keyword">range</span> ch &#123;</span><br><span class="line">		res = fn(res, v)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// generate 10 random strings</span></span><br><span class="line">	arr := []<span class="type">string</span>&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>, <span class="string">&quot;g&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;i&quot;</span>&#125;</span><br><span class="line">	<span class="comment">// map</span></span><br><span class="line">	ch := MapFunction(arr, <span class="function"><span class="keyword">func</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> strings.ToUpper(s)</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="comment">// reduce</span></span><br><span class="line">	res := ReduceFunction(ch, <span class="function"><span class="keyword">func</span><span class="params">(s1, s2 <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> s1 + s2</span><br><span class="line">	&#125;)</span><br><span class="line">	fmt.Println(res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://go.dev/play/p/ovHjy4xoXBm">go.dev</a></p>
<p>In this example, we define a <code>MapFunction</code> that takes a string array and converts each element to uppercase using a custom function <code>fn</code>, returning a channel. The <code>ReduceFunction</code> takes a channel and a custom function <code>fn</code> to concatenate the results and print them out.</p>
<p>The following image provides a metaphor that vividly illustrates the business semantics of Map-Reduce, which is very useful in data processing.</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/01/2ffc57f0bf0517c3367cd693084e368c.png" alt="Pasted image 20240129172925"></p>
<p>You may understand that Map&#x2F;Reduce is just a control logic, and the real business logic is defined by the data and the function passed to them. Yes, this is a classic programming pattern of separating “business logic” from “control logic.” Now let’s take a look at a code example with meaningful business logic to reinforce the understanding of separating “control logic” and “business logic.”</p>
<h1 id="Business-Example"><a href="#Business-Example" class="headerlink" title="Business Example"></a>Business Example</h1><p><strong>Employee Information</strong><br>First, we have an employee object and some data:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Employee <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name     <span class="type">string</span></span><br><span class="line">    Age      <span class="type">int</span></span><br><span class="line">    Vacation <span class="type">int</span></span><br><span class="line">    Salary   <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list = []Employee&#123;</span><br><span class="line">    &#123;<span class="string">&quot;Hao&quot;</span>, <span class="number">44</span>, <span class="number">0</span>, <span class="number">8000</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Bob&quot;</span>, <span class="number">34</span>, <span class="number">10</span>, <span class="number">5000</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Alice&quot;</span>, <span class="number">23</span>, <span class="number">5</span>, <span class="number">9000</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Jack&quot;</span>, <span class="number">26</span>, <span class="number">0</span>, <span class="number">4000</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Tom&quot;</span>, <span class="number">48</span>, <span class="number">9</span>, <span class="number">7500</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Marry&quot;</span>, <span class="number">29</span>, <span class="number">0</span>, <span class="number">6000</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Mike&quot;</span>, <span class="number">32</span>, <span class="number">8</span>, <span class="number">4000</span>&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Related-Reduce-Filter-Functions"><a href="#Related-Reduce-Filter-Functions" class="headerlink" title="Related Reduce&#x2F;Filter Functions"></a>Related Reduce&#x2F;Filter Functions</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">EmployeeCountIf</span><span class="params">(list []Employee, fn <span class="keyword">func</span>(e *Employee)</span></span> <span class="type">bool</span>) <span class="type">int</span> &#123;</span><br><span class="line">    count := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, _ := <span class="keyword">range</span> list &#123;</span><br><span class="line">        <span class="keyword">if</span> fn(&amp;list[i]) &#123;</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">EmployeeFilterIn</span><span class="params">(list []Employee, fn <span class="keyword">func</span>(e *Employee)</span></span> <span class="type">bool</span>) []Employee &#123;</span><br><span class="line">    <span class="keyword">var</span> newList []Employee</span><br><span class="line">    <span class="keyword">for</span> i, _ := <span class="keyword">range</span> list &#123;</span><br><span class="line">        <span class="keyword">if</span> fn(&amp;list[i]) &#123;</span><br><span class="line">            newList = <span class="built_in">append</span>(newList, list[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newList</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">EmployeeSumIf</span><span class="params">(list []Employee, fn <span class="keyword">func</span>(e *Employee)</span></span> <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, _ := <span class="keyword">range</span> list &#123;</span><br><span class="line">        sum += fn(&amp;list[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Here’s a brief explanation:</p>
<ul>
<li><code>EmployeeCountIf</code> and <code>EmployeeSumIf</code> are used to count the number of employees or calculate the total based on a certain condition. They represent the semantics of Filter + Reduce.</li>
<li><code>EmployeeFilterIn</code> filters the employees based on a certain condition. It represents the semantics of Filter.</li>
</ul>
<p>Now we can have the following code:<br><strong>1) Count the number of employees over 40 years old:</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">old := EmployeeCountIf(list, <span class="function"><span class="keyword">func</span><span class="params">(e *Employee)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> e.Age &gt; <span class="number">40</span></span><br><span class="line">&#125;)</span><br><span class="line">fmt.Printf(<span class="string">&quot;Old people: %d\n&quot;</span>, old)</span><br><span class="line"><span class="comment">//Old people: 2</span></span><br></pre></td></tr></table></figure>
<p><strong>2) Count the number of employees with a salary greater than 6000:</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">highPay := EmployeeCountIf(list, <span class="function"><span class="keyword">func</span><span class="params">(e *Employee)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> e.Salary &gt;= <span class="number">6000</span></span><br><span class="line">&#125;)</span><br><span class="line">fmt.Printf(<span class="string">&quot;High Salary people: %d\n&quot;</span>, highPay)</span><br><span class="line"><span class="comment">//High Salary people: 4</span></span><br></pre></td></tr></table></figure>
<p><strong>3) List employees who have not taken any vacation:</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">noVacation := EmployeeFilterIn(list, <span class="function"><span class="keyword">func</span><span class="params">(e *Employee)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> e.Vacation == <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line">fmt.Printf(<span class="string">&quot;People with no vacation: %v\n&quot;</span>, noVacation)</span><br></pre></td></tr></table></figure>

<p>The Map-Reduce programming paradigm divides the computational task into Map and Reduce phases. Although writing single-machine code may not be faster than a simple for loop and may appear complex, in the era of cloud-native computing, we can leverage parallel computation and shared data access to improve computational efficiency. It is a powerful tool suitable for handling large-scale data and parallel computing scenarios, such as the original Google PageRank algorithm. The main purpose of learning it is to understand its mindset.</p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
  </entry>
  <entry>
    <title>Go program pattern 05: Decorations</title>
    <url>/2024/04/23/Go%20program%20pattern%2005%20Decorations/</url>
    <content><![CDATA[<p>Go is a statically typed compiled language designed to be concise and efficient. While Go is not a purely object-oriented language, we can still use design patterns to improve code readability and maintainability. Today, I will introduce a common design pattern: the Decorator pattern.</p>
<span id="more"></span> 

<blockquote>
<p>This article is first published in the medium MPP plan. If you are a medium user, please follow me in <a href="https://medium.hxzhouh.com/">medium</a>. Thank you very much.</p>
</blockquote>
<h2 id="What-is-the-Decorator-Pattern"><a href="#What-is-the-Decorator-Pattern" class="headerlink" title="What is the Decorator Pattern?"></a>What is the Decorator Pattern?</h2><p>The Decorator pattern is a design pattern that allows us to dynamically add behavior to an object at runtime without altering its implementation. This is achieved by creating a wrapper object or decorator that contains the original object and provides an enhanced interface to add new behavior.</p>
<p>In Go, we can use functions as decorators because Go supports higher-order functions, which means functions can be passed as parameters and returned as values.</p>
<h2 id="An-Example"><a href="#An-Example" class="headerlink" title="An Example"></a>An Example</h2><p>To better understand the Decorator pattern, let’s see how we can implement it in Go through an example.</p>
<p>First, we define a function type <code>Foo</code> and a decorator type <code>FooDecorator</code>:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Foo <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">string</span>)</span></span> <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> FooDecorator <span class="function"><span class="keyword">func</span><span class="params">(Foo)</span></span> Foo</span><br></pre></td></tr></table></figure>

<p>Then, we can create a decorator that takes a function of type <code>Foo</code> and returns a new function of type <code>Foo</code> which adds some behavior before and after calling the original function:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithLog</span><span class="params">(decorated Foo)</span></span> Foo &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Before calling the decorated function&quot;</span>)</span><br><span class="line">        result := decorated(s)</span><br><span class="line">        fmt.Println(<span class="string">&quot;After calling the decorated function&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Now, we can create a <code>Foo</code> function and enhance it using the decorator:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    foo := <span class="function"><span class="keyword">func</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Foo function called&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    foo = WithLog(foo)</span><br><span class="line"></span><br><span class="line">    foo(<span class="string">&quot;Hello, world!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In this example, we create a <code>Foo</code> function and use the <code>WithLog</code> decorator to enhance it. When we call the enhanced function, it first prints a message, then calls the original <code>Foo</code> function, and finally prints another message.</p>
<p>This is the Decorator pattern in Go. By using decorators, we can dynamically add new behavior without modifying the original function.</p>
<h2 id="An-HTTP-related-Example"><a href="#An-HTTP-related-Example" class="headerlink" title="An HTTP-related Example"></a>An HTTP-related Example</h2><p>Next, let’s look at an example related to handling HTTP requests. First, we’ll start with a simple HTTP server code:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithServerHeader</span><span class="params">(h http.HandlerFunc)</span></span> http.HandlerFunc &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        log.Println(<span class="string">&quot;---&gt;WithServerHeader()&quot;</span>)</span><br><span class="line">        w.Header().Set(<span class="string">&quot;Server&quot;</span>, <span class="string">&quot;HelloServer v0.0.1&quot;</span>)</span><br><span class="line">        h(w, r)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    log.Printf(<span class="string">&quot;Received Request %s from %s\n&quot;</span>, r.URL.Path, r.RemoteAddr)</span><br><span class="line">    fmt.Fprintf(w, <span class="string">&quot;Hello, World! &quot;</span>+r.URL.Path)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/v1/hello&quot;</span>, WithServerHeader(hello))</span><br><span class="line">    err := http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(<span class="string">&quot;ListenAndServe: &quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In this code, we use the Decorator pattern. The <code>WithServerHeader()</code> function acts as a decorator that takes an <code>http.HandlerFunc</code> and returns a modified version. This example is relatively simple, as we only add a response header using <code>WithServerHeader()</code>. However, we can create many more functions like this, such as writing authentication cookies, checking authentication cookies, and logging.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithServerHeader</span><span class="params">(h http.HandlerFunc)</span></span> http.HandlerFunc &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        log.Println(<span class="string">&quot;---&gt;WithServerHeader()&quot;</span>)</span><br><span class="line">        w.Header().Set(<span class="string">&quot;Server&quot;</span>, <span class="string">&quot;HelloServer v0.0.1&quot;</span>)</span><br><span class="line">        h(w, r)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithAuthCookie</span><span class="params">(h http.HandlerFunc)</span></span> http.HandlerFunc &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        log.Println(<span class="string">&quot;---&gt;WithAuthCookie()&quot;</span>)</span><br><span class="line">        cookie := &amp;http.Cookie&#123;Name: <span class="string">&quot;Auth&quot;</span>, Value: <span class="string">&quot;Pass&quot;</span>, Path: <span class="string">&quot;/&quot;</span>&#125;</span><br><span class="line">        http.SetCookie(w, cookie)</span><br><span class="line">        h(w, r)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithBasicAuth</span><span class="params">(h http.HandlerFunc)</span></span> http.HandlerFunc &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        log.Println(<span class="string">&quot;---&gt;WithBasicAuth()&quot;</span>)</span><br><span class="line">        cookie, err := r.Cookie(<span class="string">&quot;Auth&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> || cookie.Value != <span class="string">&quot;Pass&quot;</span> &#123;</span><br><span class="line">            w.WriteHeader(http.StatusForbidden)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        h(w, r)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithDebugLog</span><span class="params">(h http.HandlerFunc)</span></span> http.HandlerFunc &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        log.Println(<span class="string">&quot;---&gt;WithDebugLog&quot;</span>)</span><br><span class="line">        r.ParseForm()</span><br><span class="line">        log.Println(r.Form)</span><br><span class="line">        log.Println(<span class="string">&quot;path&quot;</span>, r.URL.Path)</span><br><span class="line">        log.Println(<span class="string">&quot;scheme&quot;</span>, r.URL.Scheme)</span><br><span class="line">        log.Println(r.Form[<span class="string">&quot;url_long&quot;</span>])</span><br><span class="line">        <span class="keyword">for</span> k, v := <span class="keyword">range</span> r.Form &#123;</span><br><span class="line">            log.Println(<span class="string">&quot;key:&quot;</span>, k)</span><br><span class="line">            log.Println(<span class="string">&quot;val:&quot;</span>, strings.Join(v, <span class="string">&quot;&quot;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        h(w, r)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    log.Printf(<span class="string">&quot;Received Request %s from %s\n&quot;</span>, r.URL.Path, r.RemoteAddr)</span><br><span class="line">    fmt.Fprintf(w, <span class="string">&quot;Hello, World! &quot;</span>+r.URL.Path)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/v1/hello&quot;</span>, WithServerHeader(WithAuthCookie(hello)))</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/v2/hello&quot;</span>, WithServerHeader(WithBasicAuth(hello)))</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/v3/hello&quot;</span>, WithServerHeader(WithBasicAuth(WithDebugLog(hello))))</span><br><span class="line">    err := http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(<span class="string">&quot;ListenAndServe: &quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Pipeline-of-Multiple-Decorators"><a href="#Pipeline-of-Multiple-Decorators" class="headerlink" title="Pipeline of Multiple Decorators"></a>Pipeline of Multiple Decorators</h2><p>When using multiple decorators, the code can become less visually appealing as we need to nest functions layer by layer. However, we can refactor the code to make it cleaner. To do this, we first write a utility function that iterates through and calls each decorator:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> HttpHandlerDecorator <span class="function"><span class="keyword">func</span><span class="params">(http.HandlerFunc)</span></span> http.HandlerFunc</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Handler</span><span class="params">(h http.HandlerFunc, decors ...HttpHandlerDecorator)</span></span> http.HandlerFunc &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> decors &#123;</span><br><span class="line">        d := decors[<span class="built_in">len</span>(decors)<span class="number">-1</span>-i] <span class="comment">// iterate in reverse</span></span><br><span class="line">        h = d(h)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Then, we can use it like this:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">http.HandleFunc(<span class="string">&quot;/v4/hello&quot;</span>, Handler(hello,</span><br><span class="line">                WithServerHeader, WithBasicAuth, WithDebugLog))</span><br></pre></td></tr></table></figure>

<h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>In this article, I demonstrated the Decorator pattern using two examples. However, since Go does not support annotations as a syntactic sugar, using decorators can be a bit cumbersome. Nevertheless, the concept is still important, and we can apply this way of thinking to write higher-quality code in our daily development.</p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go program pattern 02: Implementing Class Inheritance and Method Overriding through Composition</title>
    <url>/2024/04/23/Go%20program%20pattern%2002%EF%BC%9A%20Implementing%20Class%20Inheritance%20and%20Method%20Overriding%20through%20Composition/</url>
    <content><![CDATA[<p>In the previous tutorial, I have already introduced that Go language, unlike object-oriented programming languages such as Java and PHP, does not support keywords like <code>class</code> to define classes. Instead, it uses the <code>type</code> keyword combined with basic types or structures to define the type system. Additionally, it does not support explicitly defining inheritance relationships between types using the <code>extends</code> keyword.</p>
<span id="more"></span>

<blockquote>
<p>This article is first published in the medium MPP plan. If you are a medium user, please follow me in <a href="https://medium.hxzhouh.com/">medium</a>. Thank you very much.</p>
</blockquote>
<p>Strictly speaking, Go language is not an object-oriented programming language, at least not the best choice for object-oriented programming (Java is the most established one). However, we can simulate object-oriented programming based on some features provided by Go.</p>
<p>To implement object-oriented programming, we must implement the three major features of object-oriented programming: encapsulation, inheritance, and polymorphism.</p>
<h2 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h2><p>Next is <strong>inheritance</strong>. Although Go does not directly provide syntax for inheritance, we can indirectly achieve similar functionality through <strong>composition</strong>. Composition means embedding one type into another type to build a new type structure.</p>
<p>In traditional object-oriented programming, explicitly defining inheritance relationships has two drawbacks: one is that it leads to increasingly complex class hierarchies, and the other is that it affects the extensibility of classes. Many software design patterns advocate using composition instead of inheritance to improve class extensibility.</p>
<p>Let’s take an example. Suppose we want to create a UI component library. We have a <code>Widget</code> structure type with two properties, <code>x</code> and <code>y</code>, representing the length and width of the component.<br>If we want to define a class representing <code>Label</code>, we can do it like this:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Label <span class="keyword">struct</span> &#123;</span><br><span class="line">    Widget</span><br><span class="line">    text <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Here, <code>Label</code> inherits all the properties of <code>Widget</code> and adds a new property <code>text</code>. Similarly, we can define the <code>Button</code> and <code>ListBox</code> classes:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Button <span class="keyword">struct</span> &#123;</span><br><span class="line">    Label</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> ListBox <span class="keyword">struct</span> &#123;</span><br><span class="line">    Widget</span><br><span class="line">    text  []<span class="type">string</span></span><br><span class="line">    index <span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Polymorphism"><a href="#Polymorphism" class="headerlink" title="Polymorphism"></a>Polymorphism</h2><p>First, we define two interfaces, <code>Painter</code> for painting and <code>Clicker</code> for clicking:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Painter <span class="keyword">interface</span> &#123;</span><br><span class="line">    Paint()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Clicker <span class="keyword">interface</span> &#123;</span><br><span class="line">    Click()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Then, the components implement these interfaces:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(label Label)</span></span> Paint() &#123;</span><br><span class="line">    <span class="comment">// display label</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%p:Label.Paint(%q)\n&quot;</span>, &amp;label, label.text)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(button Button)</span></span> Paint() &#123;</span><br><span class="line">    <span class="comment">// display button</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;Button.Paint(%q)\n&quot;</span>, button.text)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(button Button)</span></span> Click() &#123;</span><br><span class="line">    <span class="comment">// click button</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;Button.Click(%q)\n&quot;</span>, button.text)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(listBox ListBox)</span></span> Paint() &#123;</span><br><span class="line">    <span class="comment">// display listBox</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;ListBox.Paint(%q)\n&quot;</span>, listBox.text)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Label</code> implements <code>Painter</code>, and <code>Button</code> and <code>ListBox</code> implement both <code>Painter</code> and <code>Clicker</code>.</p>
<p>At the application level, we can use these components like this:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">label := Label&#123;Widget&#123;<span class="number">10</span>, <span class="number">10</span>&#125;, <span class="string">&quot;State:&quot;</span>&#125;</span><br><span class="line">button1 := Button&#123;Label&#123;Widget&#123;<span class="number">10</span>, <span class="number">70</span>&#125;, <span class="string">&quot;OK&quot;</span>&#125;&#125;</span><br><span class="line">button2 := NewButton(<span class="number">50</span>, <span class="number">70</span>, <span class="string">&quot;Cancel&quot;</span>)</span><br><span class="line">listBox := ListBox&#123;Widget&#123;<span class="number">10</span>, <span class="number">40</span>&#125;,</span><br><span class="line">    []<span class="type">string</span>&#123;<span class="string">&quot;AL&quot;</span>, <span class="string">&quot;AK&quot;</span>, <span class="string">&quot;AZ&quot;</span>, <span class="string">&quot;AR&quot;</span>&#125;, <span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">for</span> _, painter := <span class="keyword">range</span> []Painter&#123;label, listBox, button1, button2&#125; &#123;</span><br><span class="line">    painter.Paint()</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;=========================================&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> _, clicker := <span class="keyword">range</span> []Clicker&#123;listBox, button1, button2&#125; &#123;</span><br><span class="line">    clicker.Click()</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;=========================================&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> _, widget := <span class="keyword">range</span> []<span class="keyword">interface</span>&#123;&#125;&#123;label, listBox, button1, button2&#125; &#123;</span><br><span class="line">    widget.(Painter).Paint()</span><br><span class="line">    <span class="keyword">if</span> clicker, ok := widget.(Clicker); ok &#123;</span><br><span class="line">        clicker.Click()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Go language is different from object-oriented programming languages like Java and PHP in that it does not provide keywords specifically for referencing parent class instances (such as <code>super</code>, <code>parent</code>, etc.). In Go language, the design philosophy is simplicity, without any unnecessary keywords. All calls are straightforward.</p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Let’s summarize briefly. In Go language, the concept of classes in traditional object-oriented programming is intentionally weakened, which is in line with Go’s philosophy of simplicity. The “classes” defined based on structures are just ordinary data types, similar to built-in data types. Built-in data types can also be transformed into “classes” that can contain custom member methods using the <code>type</code> keyword.</p>
<p>All methods associated with a data type collectively form the method set of that type. Like other object-oriented programming languages, methods within the same method set cannot have the same name. Additionally, if they belong to a structure type, their names cannot overlap with any field names in that type.</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://stackoverflow.com/questions/37011799/how-to-pass-a-child-struct-into-a-function-accepting-parent-struct">How to pass a ‘child’ struct into a function accepting ‘parent’ struct?</a></li>
<li><a href="https://stackoverflow.com/questions/61585699/check-if-a-struct-has-struct-embedding-at-run-time">Check if a struct has struct embedding at run time</a></li>
<li><a href="https://coolshell.cn/articles/21214.html">GO编程模式：委托和反转控制</a></li>
</ul>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>How was my blog built</title>
    <url>/2024/04/18/How%20was%20my%20blog%20built/</url>
    <content><![CDATA[<p>Blogging, is the last and most important link in my knowledge circulatory system, which takes care of my output, as well as my personal brand. In this post, I describe how my <a href="https://hxzhouh.com/">blog</a>, was built.  </p>
<span id="more"></span>
<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>My blog is structured with hexo+github+Cloudflare pages. In other words, everything is free except for the domain name which requires a fee.</p>
<h1 id="Blog-setup"><a href="#Blog-setup" class="headerlink" title="Blog setup"></a>Blog setup</h1><p>There are a lot of articles on the web about setting up a blog using this architecture, so I won’t go into it again, but here are a few links that I’ve referenced.</p>
<ul>
<li><a href="https://developers.cloudflare.com/pages/framework-guides/deploy-a-hexo-site/"> cloudflare: Deploy a Hexo site</a></li>
</ul>
<h2 id="Themes"><a href="#Themes" class="headerlink" title="Themes"></a>Themes</h2><p>The theme I’m using is the community’s <a href="https://github.com/next-theme/hexo-theme-next">next-theme</a>, which is in <a href="https://github.com/theme-next/hexo-theme-"> theme-next </a> next&#x2F;tree&#x2F;master) (no longer maintained). I liked the simplicity of it and the documentation, so I used it. Some of the configuration is also based on <a href="https://github.com/next-theme/hexo-theme-next">next-theme</a>.</p>
<h2 id="Plugins-used"><a href="#Plugins-used" class="headerlink" title="Plugins used"></a>Plugins used</h2><h3 id="footnote"><a href="#footnote" class="headerlink" title="footnote"></a>footnote</h3><p>The plugin I use is <a href="https://github.com/LouisBarranqueiro/hexo-footnotes">hexo-footnotes</a><br>Installation method</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add hexo-footnotes</span><br></pre></td></tr></table></figure>
<p>Then edit hexo<code> _config.yaml</code> to add the content</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">plugins. </span><br><span class="line">- hexo-footnotes</span><br></pre></td></tr></table></figure>
<p>Then recompile, push and you’re done!<br>For specific results, you can refer to my article: [A Deep Dive into CNCF’s Cloud-Native AI Whitepaper](<a href="https://hxzhouh.com/2024/04/17/A%20Deep%20Dive%20into%">https://hxzhouh.com/2024/04/17/A%20Deep%20Dive%20into%</a> 20CNCF%E2%80%99s%20Cloud-Native%20AI%20Whitepaper&#x2F;)</p>
<h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><p>hexo’s local search function has not been working well, so I chose <strong>Algolia Search</strong>, a free account with 10,000 calls per month, which is enough for a small blog.<br>Refer to the documentation:</p>
<ul>
<li>[Algolia Search](<a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/ALGOLIA-SEARCH.md">https://github.com/theme-next/hexo-theme-next/blob/master/docs/ALGOLIA-SEARCH.md</a><br>Result.<br><img src="https://images.hxzhouh.com/blog-images/2024/04/d15c1f05b91186987fc24de39c1e0350.png" alt="Pasted image 20240418144846"></li>
</ul>
<h3 id="word-count"><a href="#word-count" class="headerlink" title="word count"></a>word count</h3><p>Use <a href="https://github.com/next-theme/hexo-word-counter">hexo-word-counter</a> to count the number of words in an article and the expected reading time. Once configured, you can display the word count and reading time at the beginning of each article and at the bottom of the page</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-word-counter </span><br><span class="line">hexo clean &amp; hexo s </span><br></pre></td></tr></table></figure>
<p>This completes the word counting functionality.</p>
<h3 id="view-count"><a href="#view-count" class="headerlink" title="view count"></a>view count</h3><p>The next theme supports <a href="https://console.firebase.google.com/">firestore</a> , <a href="https://console.firebase.google.com/">firestore</a> is a cloud development service launched by Google, which is quite powerful. We use it to realize the view count function, this service is also free.<br>After logging in <a href="https://console.firebase.google.com/">firestore</a>, select AddProject<br>AddProject<img src="https://images.hxzhouh.com/blog-images/2024/04/b6b861b32cfbaaba51b9909435f79cf9.png" alt="Pasted image 20240418153129"><br>Then select add app , select web -&gt; enter a name and register, wait a moment and the following will appear<br><img src="https://images.hxzhouh.com/blog-images/2024/04/4f0776d24dad651304022ea62a315d0b.png" alt="Pasted image 20240418153543">  Record the apiKey and appId:</p>
<p>Then create a firestore database<br><img src="https://images.hxzhouh.com/blog-images/2024/04/54d849cafe1b3eb72ac666610544d42d.png" alt="Pasted image 20240418153705"><br>I’ve chosen test module as my schema, just enter a name and select a region. Wait a moment.<br>Finally, configure the apiKey and appId above in next config.yaml: and appId and redeploy. Click on a random article, and you’ll see the views.<br><img src="https://images.hxzhouh.com/blog-images/2024/04/bbeb1967bffe7d171f6cdd6969130c82.png" alt="Pasted image 20240418154130"><br>You can also see the data in the firestore database<br><img src="https://images.hxzhouh.com/blog-images/2024/04/55d5dce59a8456601898a54c97e93628.png" alt="Pasted image 20240418154116"><br>Based on firestore, we can expand the content of the blog, which is also a benefit of cloud development. If I have more interesting ideas later, I will write another post about it.</p>
<p>The plugins I’m currently using are, well, these, and they’re all completely free.</p>
<h1 id="Content-Management"><a href="#Content-Management" class="headerlink" title="Content Management"></a>Content Management</h1><p>I’m currently using Obsidian to manage all my digital notes, and mine as well.<br>I utilize the Obsidian <code>quickAdd</code> + <code>template</code> plugin to create a new blog post with one click.<br>Images and other media files I am hosting again <code>Cloudflare R2.</code><br>I used Obsidian’s Image auto upload Plugin + picList to upload images. The writing experience is not inferior to medium at all.</p>
<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>This is the end of my blogging system, if you are interested in having your own blog, why don’t you give it a try? It’s all free.</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Go program pattern 03: Inversion of Control</title>
    <url>/2024/04/23/Go%20program%20pattern%2003%EF%BC%9AInversion%20of%20Control/</url>
    <content><![CDATA[<p>In the previous article, I briefly introduced the composite pattern in Go, which was explained in a simple manner. We understood that Go can achieve polymorphism in object-oriented programming through composition.</p>
<span id="more"></span>

<blockquote>
<p>This article is first published in the medium MPP plan. If you are a medium user, please follow me in <a href="https://medium.hxzhouh.com/">medium</a>. Thank you very much.</p>
</blockquote>
<p>In this article, let’s learn about Inversion of Control (IoC). <a href="https://en.wikipedia.org/wiki/Inversion_of_control" title="IoC - Inversion of Control">Inversion of Control</a> is a software design method that involves separating control logic from business logic. Instead of writing control logic within the business logic, which creates a dependency of control logic on business logic, IoC reverses this relationship and makes the business logic dependent on the control logic.</p>
<h2 id="Inversion-of-Control"><a href="#Inversion-of-Control" class="headerlink" title="Inversion of Control"></a>Inversion of Control</h2><p>Let’s consider an example where we want to implement a functionality to record the existence of numbers. We can easily implement the following code:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> IntSet <span class="keyword">struct</span> &#123;  </span><br><span class="line">    data <span class="keyword">map</span>[<span class="type">int</span>]<span class="keyword">struct</span>&#123;&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewIntSet</span><span class="params">()</span></span> IntSet &#123;  </span><br><span class="line">    <span class="keyword">return</span> IntSet&#123;<span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="keyword">struct</span>&#123;&#125;)&#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(set *IntSet)</span></span> Add(x <span class="type">int</span>) &#123;  </span><br><span class="line">    set.data[x] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(set *IntSet)</span></span> Delete(x <span class="type">int</span>) &#123;  </span><br><span class="line">    <span class="built_in">delete</span>(set.data, x)  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(set *IntSet)</span></span> Contains(x <span class="type">int</span>) <span class="type">bool</span> &#123;  </span><br><span class="line">    _, ok := set.data[x]  </span><br><span class="line">    <span class="keyword">return</span> ok  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The above code uses a map to store numbers and provides functionalities for adding, deleting, and checking the existence of numbers. Everything seems perfect.</p>
<p>Now, suppose we want to add an undo feature to this functionality. How can we do that? With a little thought, we can write clear code by wrapping <code>IntSet</code> into <code>UndoableIntSet</code>. Here’s the code:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> UndoableIntSet <span class="keyword">struct</span> &#123; <span class="comment">// Poor style</span></span><br><span class="line">    IntSet    <span class="comment">// Embedding (delegation)</span></span><br><span class="line">    functions []<span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewUndoableIntSet</span><span class="params">()</span></span> UndoableIntSet &#123;</span><br><span class="line">    <span class="keyword">return</span> UndoableIntSet&#123;NewIntSet(), <span class="literal">nil</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(set *UndoableIntSet)</span></span> Add(x <span class="type">int</span>) &#123; <span class="comment">// Override</span></span><br><span class="line">    <span class="keyword">if</span> !set.Contains(x) &#123;</span><br><span class="line">        set.data[x] = <span class="literal">true</span></span><br><span class="line">        set.functions = <span class="built_in">append</span>(set.functions, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; set.Delete(x) &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        set.functions = <span class="built_in">append</span>(set.functions, <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(set *UndoableIntSet)</span></span> Delete(x <span class="type">int</span>) &#123; <span class="comment">// Override</span></span><br><span class="line">    <span class="keyword">if</span> set.Contains(x) &#123;</span><br><span class="line">        <span class="built_in">delete</span>(set.data, x)</span><br><span class="line">        set.functions = <span class="built_in">append</span>(set.functions, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; set.Add(x) &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        set.functions = <span class="built_in">append</span>(set.functions, <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(set *UndoableIntSet)</span></span> Undo() <span class="type">error</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(set.functions) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> errors.New(<span class="string">&quot;No functions to undo&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// invert the order of calls</span></span><br><span class="line">    index := <span class="built_in">len</span>(set.functions) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> function := set.functions[index]; function != <span class="literal">nil</span> &#123;</span><br><span class="line">        function()</span><br><span class="line">    &#125;</span><br><span class="line">    set.functions = set.functions[:index]</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>This approach is a good choice for extending existing code with new functionalities. It allows for a balance between reusing the existing code and adding new features. However, the main issue with this approach is that the Undo operation is actually a form of control logic, not business logic. The Undo feature cannot be reused because it contains a lot of business logic related to <code>IntSet</code>.</p>
<h2 id="Dependency-Inversion"><a href="#Dependency-Inversion" class="headerlink" title="Dependency Inversion"></a>Dependency Inversion</h2><p>Let’s explore another implementation approach where we extract the undo feature and make <code>IntSet</code> depend on it:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Undo []<span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(undo *Undo)</span></span> Add(u <span class="function"><span class="keyword">func</span><span class="params">()</span></span>) &#123;  </span><br><span class="line">    *undo = <span class="built_in">append</span>(*undo, u)  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(undo *Undo)</span></span> Undo() &#123;  </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(*undo) == <span class="number">0</span> &#123;  </span><br><span class="line">       <span class="keyword">return</span>  </span><br><span class="line">    &#125;  </span><br><span class="line">    index := <span class="built_in">len</span>(*undo) - <span class="number">1</span>  </span><br><span class="line">    (*undo)[index]()  </span><br><span class="line">    *undo = (*undo)[:index]  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Next, we embed <code>Undo</code> in <code>IntSet</code>:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> IntSet <span class="keyword">struct</span> &#123;  </span><br><span class="line">    data <span class="keyword">map</span>[<span class="type">int</span>]<span class="keyword">struct</span>&#123;&#125;  </span><br><span class="line">    undo Undo  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewIntSet</span><span class="params">()</span></span> IntSet &#123;  </span><br><span class="line">    <span class="keyword">return</span> IntSet&#123;<span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="keyword">struct</span>&#123;&#125;), <span class="built_in">make</span>(Undo, <span class="number">0</span>)&#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(set *IntSet)</span></span> Undo() &#123;  </span><br><span class="line">    set.undo.Undo()  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(set *IntSet)</span></span> Add(x <span class="type">int</span>) &#123;  </span><br><span class="line">    <span class="keyword">if</span> set.Contains(x) &#123;  </span><br><span class="line">       <span class="keyword">return</span>  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">       set.undo.Add(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;  </span><br><span class="line">          set.Delete(x)  </span><br><span class="line">       &#125;)  </span><br><span class="line">       set.data[x] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(set *IntSet)</span></span> Delete(x <span class="type">int</span>) &#123;  </span><br><span class="line">    <span class="keyword">if</span> !set.Contains(x) &#123;  </span><br><span class="line">       <span class="keyword">return</span>  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">       set.undo.Add(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;  </span><br><span class="line">          set.Add(x)  </span><br><span class="line">       &#125;)  </span><br><span class="line">       <span class="built_in">delete</span>(set.data, x)  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(set *IntSet)</span></span> Contains(x <span class="type">int</span>) <span class="type">bool</span> &#123;  </span><br><span class="line">    _, ok := set.data[x]  </span><br><span class="line">    <span class="keyword">return</span> ok  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In our application, we can use it as follows:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    set := NewIntSet()  </span><br><span class="line">    set.Add(<span class="number">1</span>)  </span><br><span class="line">    set.Add(<span class="number">2</span>)  </span><br><span class="line">    fmt.Println(set.Contains(<span class="number">2</span>))  </span><br><span class="line">    set.Undo()  </span><br><span class="line">    fmt.Println(set.Contains(<span class="number">2</span>))  </span><br><span class="line">    set.Delete(<span class="number">1</span>)  </span><br><span class="line">    fmt.Println(set.Contains(<span class="number">1</span>))  </span><br><span class="line">    set.Undo()  </span><br><span class="line">    fmt.Println(set.Contains(<span class="number">1</span>))  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Output:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/Users/hxzhouh/Library/Caches/JetBrains/GoLand2023.3/tmp/GoLand/___go_build_github_com_hxzhouh_go_example_pattern_ioc</span><br><span class="line">true</span><br><span class="line">false</span><br><span class="line">false</span><br><span class="line">true</span><br></pre></td></tr></table></figure>

<p>This is Inversion of Control, where the control logic <code>Undo</code> no longer depends on the business logic <code>IntSet</code>, but rather the business logic <code>IntSet</code> depends on <code>Undo</code>. Now, the Undo feature can be easily used by other business logics.</p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go defer：makes the function simpler and more robust.</title>
    <url>/2024/04/18/Go%20defer%EF%BC%9Amakes%20the%20function%20simpler%20and%20more%20robust./</url>
    <content><![CDATA[<blockquote>
<p>This article is first published in the medium MPP plan. If you are a medium user, please follow me in <a href="https://medium.hxzhouh.com/">medium</a>. Thank you very much.</p>
</blockquote>
<p>In the previous article, we used <code>defer</code> to recover from panics. In the practical work of a gopher, <code>defer</code> acts like a loyal and reliable teammate, silently helping us with the clean-up work behind the scenes. For example:</p>
<span id="more"></span> 

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">wg.Add(goroutines)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; goroutines; i++ &#123;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">       <span class="keyword">defer</span> wg.Done()</span><br><span class="line">       <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; count/goroutines; j++ &#123;</span><br><span class="line">          atomic.AddInt64(&amp;sum, <span class="number">1</span>)</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br></pre></td></tr></table></figure>

<p><code>defer</code> is used to release locks or any other resources.</p>
<blockquote>
<p>In Go, <code>defer</code> can only be used inside functions and methods.<br>The <code>defer</code> keyword must be followed by a function or method, which are referred to as deferred functions. </p>
</blockquote>
<p><code>defer</code> registers these functions into a stack data structure specific to the goroutine in which it is executed. The deferred functions are then scheduled to be executed in a last-in, first-out (LIFO) order before the function containing the <code>defer</code> statement exits.</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/02/7ca8d7abc4864e3b4c698edd9144ecf6.png" alt="Pasted image 20240229205228"></p>
<p>Regardless of whether the function reaches the end of its body and returns, explicitly calls <code>return</code> in an error handling branch, or encounters a panic, the functions stored in the deferred function stack will be scheduled for execution. Thus, deferred functions provide a convenient way to perform clean-up tasks for a function in any scenario.</p>
<h1 id="Several-Use-Cases-for-defer"><a href="#Several-Use-Cases-for-defer" class="headerlink" title="Several Use Cases for defer"></a>Several Use Cases for <code>defer</code></h1><ul>
<li>Capturing panics: Since deferred functions are always executed in any scenario, we can handle exceptions within <code>defer</code> (although it is not recommended to use <code>panic</code> for general errors unless necessary).</li>
<li>Resource release: <code>defer</code> allows for graceful resource release, such as file descriptors or locks.</li>
<li>Delayed execution: <code>defer</code> can be used to record the execution time of a function, for example:</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(s time.Time)</span></span> &#123;</span><br><span class="line">    fmt.Println(time.Now().Sub(s))</span><br><span class="line">&#125;(time.Now())</span><br></pre></td></tr></table></figure>
<h1 id="Performance-Overhead-of-defer"><a href="#Performance-Overhead-of-defer" class="headerlink" title="Performance Overhead of defer"></a>Performance Overhead of <code>defer</code></h1><p><code>defer</code> makes resource release (like file descriptors or locks) more elegant and less error-prone. However, in performance-sensitive programs, Gophers must be aware of and consider the performance burden introduced by <code>defer</code>.</p>
<p>In the following benchmark test, we can observe the performance difference between a version with <code>defer</code> and a version without <code>defer</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hxzhouh  atomic  ➜ ( main  1)  ♥ 20:16  go test -bench=BenchmarkFooWithDefer </span><br><span class="line">10000000</span><br><span class="line">goos: darwin</span><br><span class="line">goarch: arm64</span><br><span class="line">pkg: github.com/hxzhouh/go-example/atomic</span><br><span class="line">BenchmarkFooWithDefer-10        189423524                6.353 ns/op</span><br><span class="line">PASS</span><br><span class="line">ok      github.com/hxzhouh/go-example/atomic    3.631s</span><br><span class="line">hxzhouh  atomic  ➜ ( main  1)  ♥ 21:05  go test -bench=BenchmarkFooWithoutDefer </span><br><span class="line">BenchmarkFooWithoutDefer-10     273232389                4.397 ns/op</span><br><span class="line">PASS</span><br><span class="line">ok      github.com/hxzhouh/go-example/atomic    2.875s</span><br></pre></td></tr></table></figure>

<p>In this test, the non-deferred version is approximately 7 times faster than the version with <code>defer</code> in Go 1.12. After optimization in versions 1.13 and 1.14, the performance of <code>defer</code> has significantly improved. On my computer, the non-deferred version still has a performance advantage of about 50%.</p>
<h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>In most cases, our programs are not highly sensitive to performance. I recommend using <code>defer</code> whenever possible. However, it is important to understand how <code>defer</code> works, as well as a few things to avoid.</p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust Lesson 1： A Gopher&#39;s View on Rust</title>
    <url>/2024/04/26/Rust%20Lesson%201%20A%20Gopher&#39;s%20View%20on%20Rust/</url>
    <content><![CDATA[<blockquote>
<p>source ：<a href="https://tonybai.com/2024/04/22/gopher-rust-first-lesson-all-about-rust">https://tonybai.com/2024/04/22/gopher-rust-first-lesson-all-about-rust</a></p>
</blockquote>
<p>To talk about which backend programming language has been the hottest in the past two years,If <a href="https://www.rust-lang.org/">Rust</a> claims to be second , and no one dares to say first . <a href="https://survey.stackoverflow.co/2023/#section-admired-and-desired-programming-scripting-and-markup-languages">Rust has topped the Stack Overflow’s most admired programming languages for 8 consecutive years</a>, and it has even been referred to as the “perfect programming language” by Jack Dorsey, the co-founder of Twitter:<br><a href="https://twitter.com/jack/status/1474263588651126788">https://twitter.com/jack/status/1474263588651126788</a></p>
<h1 id="1-Why-should-I-learn-Rust"><a href="#1-Why-should-I-learn-Rust" class="headerlink" title="1. Why should I learn Rust?"></a>1. Why should I learn Rust?</h1><p>Learning Rust isn’t about riding the hype train; it’s about practical development needs. In certain situations, Go’s performance isn’t particularly good due to issues like STW. From benchmarks, Rust’s performance is three times better than Go’s: <a href="https://goodmanwen.github.io/Programming-Language-Benchmarks-Visualization/">The Computer Language Benchmarks Game Visualization</a> In our own business, after rewriting a gateway service in Rust, performance improved by about 70%. This is a significant improvement for our business scenario. Moreover, Rust’s widespread use in the Linux kernel validates its reliability, making Rust worth trying.</p>
<p>However, the rise of Rust in certain domains has indeed sparked some dissatisfaction and controversy in other programming language communities. Particularly, the proposition from some in the Rust community to “Rewrite Everything in Rust” has made many programming language communities, especially the C++ community, quite uneasy. The Go community, on the other hand, is relatively more open and friendly. The mainstream view is that Go and Rust can complement each other, with each language playing its role in its respective areas of strength. Through cooperation rather than confrontation, developers can be provided with better choices. For more details, you can refer to an article co-authored by Steve Francia, former product manager of the Go team and author of Hugo, <a href="https://thenewstack.io/rust-vs-go-why-theyre-better-together/">Rust vs. Go: Why They’re Better Together</a>.</p>
<p>In other words, Go is still my primary language, but considering the requirements of my work, I need to systematically learn Rust. To avoid the “from learning to giving up” scenario, I plan to learn Rust while outputting. On one hand, this can motivate me to learn, and on the other hand, I hope to interact with readers promptly and correct any misunderstandings in learning.</p>
<p>I’ve always believed that when you start learning a new language, you must understand its history and current status. This way, you can build an overall understanding of the language and anticipate its future direction. Moreover, it can establish a sense of “security” in learning, believing that it can bring you enough value and returns, thus enabling you to learn more confidently.</p>
<p>In this article, I’ll first explore the history of Rust’s development and its current state, as well as its unique design philosophy. I’ll also make a simple comparison with Go, hoping to provide myself and the readers with a preliminary understanding of Rust.</p>
<h1 id="2-Rust’s-History-and-Current-Status"><a href="#2-Rust’s-History-and-Current-Status" class="headerlink" title="2. Rust’s History and Current Status"></a>2. Rust’s History and Current Status</h1><h2 id="2-1-The-Birth-and-Evolution-of-Rust"><a href="#2-1-The-Birth-and-Evolution-of-Rust" class="headerlink" title="2.1 The Birth and Evolution of Rust"></a>2.1 The Birth and Evolution of Rust</h2><p>Rust was born in 2006, a year earlier than the “conspiracy” of the three Google giants to create the Go language. However, compared to the three founders of Go: Ken Thompson, Turing Award winner, co-inventor of C syntax, and father of Unix; Rob Pike, leader of the Plan 9 operating system and original designer of UTF-8 encoding; and Robert Griesemer, one of the designers of the HotSpot virtual machine for Java and the JavaScript V8 engine for the Chrome browser, the identity and status of Rust’s father, Graydon Hoare, were not so “prominent”. At that time, he was just a Canadian developer under 30 years old working at Mozilla Research:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/04/f0511d1952c37285e033a815d94fdafe.png" alt="Pasted image 20240424162718"></p>
<p>The birth of a new generation programming language often comes with a story, such as the founders of Go frequently encountering long compile times in C++ projects at Google. Whenever they started compiling a C++ project, they had to wait for a long time, during which they could drink several cups of coffee. This deeply impressed them and made them realize the need to design a new language with faster compilation speed, thus Go was born. Similar to the “drink coffee, wait for C++ project to compile” scenario, the birth of Rust also has a story:</p>
<p>In 2006, 29-year-old Hoare returned home to Vancouver one day, only to find that the elevator was broken, and the elevator software crashed! He had to climb the stairs back to his 21st-floor apartment. As he climbed the stairs, he felt very annoyed. He thought, “We programmers actually can’t create an elevator that can work properly without crashing!” Hoare knew that many such crashes were caused by issues with memory usage in programs. The software inside devices like elevators is usually written in C++ or C, languages known for allowing programmers to write code that runs very fast and is quite compact. The problem is that these languages also make it easy to inadvertently introduce memory errors, which can lead to crashes. Hoare decided to do something about it. So he opened his laptop and started designing a new programming language, one that he hoped could write small and fast code without memory errors, and he named it <strong>Rust</strong>.</p>
<p>This story is obviously unverifiable. But what can be confirmed is that for several years starting from 2006, the personal language project Rust created by Hoare was not actually used to improve elevator systems, but was sponsored by Mozilla and used in the continuous development of Mozilla’s browser engine Servo. Mozilla officially announced the project in 2010, and Hoare also introduced the Rust language for the first time in a <a href="http://venge.net/graydon/talks/intro-talk-2.pdf">speech in 2010</a>:<br><img src="https://images.hxzhouh.com/blog-images/2024/04/d3e4b587df3b6506555016e0e5d81e82.png" alt="Pasted image 20240424162832"><br>The first line of Rust code was also open-sourced in 2010:<br><img src="https://images.hxzhouh.com/blog-images/2024/04/268bb398052726a456879a821561db54.png" alt="Pasted image 20240424162852"><br>In addition, the initial Rust compiler was implemented in OCaml, and in 2011, the Rust team re-implemented the compiler in Rust based on LLVM and achieved bootstrapping. That same year, Rust also got its own logo, <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=680521">inspired by a bicycle gear</a>:<br><img src="https://images.hxzhouh.com/blog-images/2024/04/455a441a093721eb30097e64719b718b.png" alt="Pasted image 20240424162917"><br>In 2012, <a href="https://www.infoq.com/news/2012/08/Interview-Rust/">Graydon Hoare was interviewed by InfoQ</a> and talked about leading the Rust team in developing Rust, a systems programming language at Mozilla, including Rust’s features, advantages and differences compared to C&#x2F;C++&#x2F;Java&#x2F;Go, and Rust 1.0 release plans.</p>
<p>However, in the following year, in 2013, <a href="https://wikitia.com/wiki/Graydon_Hoare">Graydon Hoare resigned as leader of the Rust team due to exhaustion</a>, leaving his own Rust team and distancing himself from Rust development. Hoare’s departure was a significant loss for the Rust team and the language itself, but the Rust community and team took proactive measures to ensure the continued development and evolution of Rust.</p>
<p>In November 2014, <a href="https://blog.rust-lang.org/2014/11/20/Cargo.html">Rust officially announced cargo and crates.io</a>. Cargo is Rust’s project build manager, while crates.io is the central package repository for Rust code maintained by the Rust team. With cargo, developers can easily build and publish packages to crates.io or pull dependencies of Rust code from crates.io.</p>
<p>On May 15, 2015, Rust reached a milestone moment: <a href="https://blog.rust-lang.org/2015/05/15/Rust-1.0.html">Rust 1.0 was officially released!</a>, which was 3 years later than <a href="https://go.dev/blog/go1">the release of Go 1.0</a>. However, as the official blog stated, “the release of version 1.0 marks the end of the chaos. This version is the formal beginning of our stability commitment, providing a solid foundation for building applications and libraries. From now on, major changes are essentially out of scope (some minor warnings apply, such as compiler errors).”</p>
<p>After the release of Rust 1.0, the release cycle and rhythm of Rust were determined, with <a href="https://blog.rust-lang.org/2014/10/30/Stability.html">a stable version released every 6 weeks</a>. Following this rhythm, Rust 1.1 Beta was released simultaneously with Rust 1.0. After six weeks of testing, Rust 1.1 Beta became Rust 1.1 stable, and Rust 1.2 Beta was released, and so on. Of course, Rust also has a nightly build version, which contains the latest but unstable features. Compared to the Go community and developers who can only “get high” twice a year, Rust developers and the community are more fortunate to “get high” every six weeks!</p>
<p>Rust’s evolution is <a href="https://github.com/rust-lang/rfcs">driven by RFCs (Request For Comments)</a>, and this measure was <a href="https://github.com/rust-lang/rfcs/blob/master/text/0002-rfc-process.md">established based on RFCs before the release of Rust 1.0</a>. This is similar to the Go Proposal process, but it feels more standardized and rigorous, which of course is related to the composition and rules of governance structures of the two languages.</p>
<p>However, the</p>
<p> evolution and development of Rust is not as smooth and perfect as one might expect. For example, at the <a href="https://blog.rust-lang.org/2018/12/06/Rust-1.31-and-Rust-2018.html">Rust 2018 edition launch event</a>, <a href="https://github.com/alexcrichton">Alex Crichton</a>, one of the core members of the Rust team, mentioned in the keynote speech that in the evolution of the Rust language, some past design decisions may not have been optimal, which sometimes hinders the language’s progress. One example is the error handling mechanism. However, Rust’s development team has proven that they are good at introspection and adjustment. For example, the aforementioned error handling mechanism was greatly improved with the introduction of the “Try” trait in Rust 1.26, and with the release of Rust 1.31, the Rust 2018 edition resolved many issues with Rust’s design.</p>
<h2 id="2-2-Rust’s-Current-Status"><a href="#2-2-Rust’s-Current-Status" class="headerlink" title="2.2 Rust’s Current Status"></a>2.2 Rust’s Current Status</h2><p>In the past decade, Rust has gradually developed from a personal project of Graydon Hoare to a popular systems programming language with a large and active community. According to <a href="https://octoverse.github.com/projects#languages">GitHub’s 2020 Octoverse report</a>, Rust was the fastest-growing programming language in the GitHub open-source community, with 235% more contributors than in 2019, making it the most loved language in the Stack Overflow Developer Survey for five consecutive years from 2016 to 2020.</p>
<p>However, it should be pointed out that Rust is still not widely used in large-scale commercial projects, especially compared to C&#x2F;C++&#x2F;Java&#x2F;Go. The main reason is that Rust’s ecosystem and maturity are still not comparable to those languages. For example, the Alibaba e-commerce team mentioned in 2017 that they have 100,000+ Java developers and have invested heavily in Java and the JVM ecosystem. They also mentioned that in recent years, Alibaba has considered using Rust to solve some distributed computing problems, but has not yet considered using Rust in large-scale commercial projects due to concerns about the immaturity of Rust’s ecosystem.</p>
<p>However, Rust is gradually being adopted and applied in some fields and areas where C&#x2F;C++ is traditionally dominant, such as systems programming, game development, and blockchain systems. For example, in the blockchain field, in addition to the Solana project I mentioned earlier, the Parity project, which is known for the development of the Polkadot blockchain framework, is also developed in Rust. In addition, in the blockchain field, some small and medium-sized blockchain projects also use Rust to develop blockchain systems. For example, the <a href="https://github.com/rust-bitcoin/rust-bitcoin">Bitcoin Light client library BTC-Rust</a> implemented by the Bitcoin-NG team is developed in Rust.</p>
<h1 id="3-The-Design-Philosophy-of-Rust"><a href="#3-The-Design-Philosophy-of-Rust" class="headerlink" title="3. The Design Philosophy of Rust"></a>3. The Design Philosophy of Rust</h1><p><strong>The design philosophy of a programming language is like the values of a person—it dictates its behavior.</strong> If you don’t agree with someone’s values, it’s hard to maintain a continuous relationship, as they say, “different paths do not converge.” Similarly, if you don’t agree with the design philosophy of a programming language, you’ll likely encounter the problems mentioned earlier in your subsequent language learning, which may dampen your motivation to continue learning. Therefore, before diving into Rust syntax and coding, let’s first understand Rust’s design philosophy. After understanding these, you’ll have a deeper understanding of why you’re learning Rust.</p>
<h2 id="3-1-Core-Values-of-Rust"><a href="#3-1-Core-Values-of-Rust" class="headerlink" title="3.1 Core Values of Rust"></a>3.1 Core Values of Rust</h2><p>In June 2019, Rust core team member Stephen Klabnik delivered a speech titled <a href="https://www.infoq.com/presentations/rust-tradeoffs/">How Rust Views Tradeoffs</a> at QCon London, where he outlined his personal understanding of Rust’s core values, <strong>which are the points Rust’s team refuses to compromise on when making design decisions</strong>, including memory safety, execution speed, and productivity:<br><img src="https://images.hxzhouh.com/blog-images/2024/04/2827e93a0c773f5a5a96d57843c30fdd.png" alt="Pasted image 20240424163821"></p>
<p>According to Stephen Klabnik, these three core values are ordered, with memory safety being paramount, followed by high performance, and finally productivity. When conflicts arise among them, decisions are made according to the highest value!</p>
<p>This is consistent with the official description of Rust:<br><img src="https://images.hxzhouh.com/blog-images/2024/04/32d3930c49c4fcb209a74b0b347bf3ac.png" alt="Pasted image 20240424163834"></p>
<p>The “Reliable” corresponds to memory safety, while “efficient” has two meanings: runtime efficiency and high productivity during development.</p>
<p>These three values are the design goals of the Rust language and the essence of its characteristics and advantages. After losing Graydon Hoare, the father of the language, these values became the fundamental basis for the Rust core team to determine the direction of language evolution.</p>
<ol>
<li><strong>Memory Safety</strong><br>Memory safety is <strong>the most important value</strong> for Rust. It means that Rust programs won’t suffer from memory leaks, buffer overflows, dangling pointers, and other memory-related errors at runtime (without using unsafe code). These errors not only lead to program crashes but can also result in security vulnerabilities. Rust ensures memory safety by features like ownership, lifetimes, and borrowing, which are thoroughly checked at compile time.</li>
</ol>
<p>Rust’s memory safety mechanism not only enhances program stability and reliability but also reduces development and maintenance complexity. With Rust’s ability to detect memory errors at compile time, developers don’t have to spend a lot of time and effort searching for and fixing these errors.</p>
<ol>
<li><strong>High Performance</strong></li>
</ol>
<p>High performance is the second core value of Rust, closely following memory safety. One of Rust’s design goals is to be a high-performance systems programming language. Through features like zero-cost abstractions, move semantics, and generic programming, Rust enables programs to achieve performance comparable to traditional systems programming languages like C and C++ at runtime.</p>
<p>Rust’s high-performance mechanism not only improves program execution speed but also reduces hardware costs. Because Rust can better utilize hardware resources, Rust programs typically outperform programs in other languages with the same hardware conditions and resource overhead.</p>
<ol>
<li><strong>Productivity</strong></li>
</ol>
<p>Productivity is the third core value of Rust. One of Rust’s design goals is to be a language that enhances developer productivity. With features like the Cargo package manager, smart editor support, rich library ecosystem, and detailed system documentation, Rust makes it easier for developers to write, debug, and maintain Rust programs.</p>
<h2 id="3-2-Secondary-Values-of-Rust"><a href="#3-2-Secondary-Values-of-Rust" class="headerlink" title="3.2 Secondary Values of Rust"></a>3.2 Secondary Values of Rust</h2><p>Stephen Klabnik also summarized three secondary values of Rust:<br><img src="https://images.hxzhouh.com/blog-images/2024/04/b906bd07490a8c0f1b5c509a0f8974a5.png" alt="Pasted image 20240424163847"></p>
<p>We see that Rust’s secondary values include ergonomics, compile times, and correctness. These values are also design goals of the Rust language, but unlike the primary core values mentioned above, they are subject to compromise.</p>
<p><strong>Ergonomics</strong> refers to the ease of use of the Rust language, which is an important design goal of Rust. Rust aims to make it easier for developers to write Rust programs through simple syntax and a rich library ecosystem.</p>
<p><strong>Compile Times</strong> refer to the compilation time of the Rust compiler. Rust’s compiler is slow, which is a problem that the Rust team is actively working to optimize. However, the Rust team is more concerned about the final execution speed of the binary than making the compiler faster, hence why compile time is a secondary value.</p>
<p><strong>Correctness</strong> refers to the correctness of Rust programs. Rust really cares about whether your program is correct and aims to ensure the correctness of Rust programs as much as possible through a powerful type system and static checks. However, Rust is not willing to rely entirely on types and proof assistants to prove the correctness of your code.</p>
<h2 id="3-3-Comparison-with-Go’s-Values"><a href="#3-3-Comparison-with-Go’s-Values" class="headerlink" title="3.3 Comparison with Go’s Values"></a>3.3 Comparison with Go’s Values</h2><p>Let’s compare Go’s official introduction to Go’s implicit values (design philosophy):<br><img src="https://images.hxzhouh.com/blog-images/2024/04/4d25094f8a0cfe86a13b2da3056cb192.png" alt="Pasted image 20240424163901"></p>
<p>In the official description of Go, there are three keywords: Simple, Secure, and Scalable.</p>
<p><strong>Simple</strong> is the primary design principle of Go. The designers of Go hope that Go can be simple and easy to use, enabling developers to learn and use Go more quickly to rapidly develop production capabilities. Go has a simple and understandable syntax, and it removes many complex features found in other programming languages, such as type hierarchies and inheritance, making Go more concise, easy to learn, read, use, and maintain.</p>
<p><strong>Secure</strong> is about making Go more secure and reliable, avoiding common security vulnerabilities found in many other programming languages. Go achieves this by automatically managing memory through garbage collection, avoiding common memory leaks and buffer overflow issues found in many other programming languages. Additionally, Go provides lightweight goroutines and channels, making it easier for developers to implement concurrent programming. With data race detection tools, Go also prevents common data race issues in concurrent programming. Furthermore, Go provides a simple and easy-to-use explicit error handling mechanism, ensuring no error handling is missed by developers.</p>
<p><strong>Scalable</strong> is reflected in Go’s engineering orientation, built-in concurrency, and a philosophy that emphasizes composition. The designers of Go hope that Go can better support scalability, enabling Go programs to better adapt to different organizational scales, workloads, and hardware environments. Go achieves this through simple syntax, module-based reproducible build management, extremely fast compilation speed, high-quality standard library, practical toolchain, powerful built-in concurrency mechanism, and interface-oriented programming, making Go programs more scalable and productive.</p>
<h1 id="4-Conclusion"><a href="#4-Conclusion" class="headerlink" title="4 Conclusion"></a>4 Conclusion</h1><p>In summary, Rust prioritizes safety, low-level control, and optimal performance, while Go emphasizes simplicity, security, scalability, and engineering efficiency. There are differences in their positioning and design philosophies, but they also share some common characteristics, such as modern toolchains and active communities.</p>
<p>In this article, we’ve learned about the birth, current development, and unique design philosophy of Rust. By comparing it with Go, we can see some differences in their backgrounds, goals, and design philosophies.</p>
<p>As software systems become increasingly complex, the demand for security, performance, and concurrency is also rising. As a new language focused on low-level systems programming and performance optimization, Rust is attracting more and more developers’ attention. I believe that through comprehensive and systematic learning of Rust later on, we will all gain a deeper understanding and mastery of Rust.</p>
<p>If you find Rust’s values align with yours and you agree with Rust’s future development, stay tuned for the next article, where we’ll start hands-on learning Rust!</p>
<h1 id="5-References"><a href="#5-References" class="headerlink" title="5 References"></a>5 References</h1><ul>
<li><a href="https://en.wikipedia.org/wiki/Rust_(programming_language)">Rust Wikipedia</a> </li>
<li><a href="https://www.technologyreview.com/2023/02/14/1067869/rust-worlds-fastest-growing-programming-language/">How Rust went from a side project to the world’s most-loved programming language</a> </li>
<li><a href="https://rustmagazine.org/issue-1/2022-review-the-adoption-of-rust-in-business/">2022 Review | The adoption of Rust in Business</a> </li>
<li><a href="https://www.infoq.com/presentations/rust-tradeoffs/">How Rust Views Tradeoffs</a> </li>
<li><a href="https://rustacean.net/">Unofficial Rust mascot Ferris</a></li>
</ul>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac: Slowing Down Your Disk Speed by 60x</title>
    <url>/2024/04/27/Slowing%20Down%20Your%20Disk%20Speed%20by%2060x/</url>
    <content><![CDATA[<p>Sometimes in the development process, we need to simulate slow disk conditions to verify if our code can still function on low-performance machines. Typically, we would use <code>cgroup</code> or Docker for this purpose, but it can be cumbersome on a MacBook. However, there’s a built-in tool on macOS that can help us achieve this: <code>dmc</code>.</p>
<span id="more"></span>

<blockquote>
<p>This piece was originally published in the Medium MPP plan. If you’re a Medium user, feel free to follow me on <a href="https://medium.hxzhouh.com/">Medium</a>. Thanks!</p>
</blockquote>
<h2 id="Using-dmc"><a href="#Using-dmc" class="headerlink" title="Using dmc"></a>Using <code>dmc</code></h2><p>macOS comes with <code>dmc</code>, which we can explore using <code>dmc -h</code>.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  /tmp dmc -h</span><br><span class="line">usage: dmc &lt;commands...&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">commands:</span></span><br><span class="line">  start &lt;mount&gt; (profile_name|profile_index [-boot])</span><br><span class="line">  stop &lt;mount&gt;</span><br><span class="line">  status &lt;mount&gt; [-json]</span><br><span class="line">  show profile_name|profile_index</span><br><span class="line">  list</span><br><span class="line">  select &lt;mount&gt; (profile_name|profile_index)</span><br><span class="line">  configure &lt;mount&gt; &lt;type&gt; &lt;access_time&gt; &lt;read_throughput&gt; &lt;write_throughput&gt; [&lt;ioqueue_depth&gt; &lt;maxreadcnt&gt; &lt;maxwritecnt&gt; &lt;segreadcnt&gt; &lt;segwritecnt&gt;]</span><br><span class="line">  help | -h</span><br></pre></td></tr></table></figure>

<p>It offers various disk profiles to choose from:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  /tmp dmc list</span><br><span class="line">  0: Faulty 5400 HDD</span><br><span class="line">  1: 5400 HDD</span><br><span class="line">  2: 7200 HDD</span><br><span class="line">  3: Slow SSD</span><br><span class="line">  4: SATA II SSD</span><br><span class="line">  5: SATA III SSD</span><br><span class="line">  6: PCIe 2 SSD</span><br><span class="line">  7: PCIe 3 SSD</span><br></pre></td></tr></table></figure>

<p>Each profile corresponds to different speed modes, such as:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  /tmp dmc show 0</span><br><span class="line">Profile: Faulty 5400 HDD</span><br><span class="line"> Type: HDD</span><br><span class="line"> Access time: 52222 us</span><br><span class="line"> Read throughput: 50 MB/s</span><br><span class="line"> Write throughput: 50 MB/s</span><br><span class="line"> I/O Queue Depth: 16</span><br><span class="line"> Max Read Bytes: 16777216</span><br><span class="line"> Max Write Bytes: 16777216</span><br><span class="line"> Max Read Segments: 128</span><br><span class="line"> Max Write Segments: 128</span><br><span class="line">➜  /tmp dmc show 7</span><br><span class="line">Profile: PCIe 3 SSD</span><br><span class="line"> Type: SSD</span><br><span class="line"> Access time: 3 us</span><br><span class="line"> Read throughput: 3072 MB/s</span><br><span class="line"> Write throughput: 2560 MB/s</span><br><span class="line"> I/O Queue Depth: 256</span><br><span class="line"> Max Read Bytes: 67108864</span><br><span class="line"> Max Write Bytes: 67108864</span><br><span class="line"> Max Read Segments: 256</span><br><span class="line"> Max Write Segments: 256</span><br></pre></td></tr></table></figure>

<p>Using it is straightforward. Suppose our disk is mounted on <code>/tmp/data</code>, and we want to set it to level 0. We simply execute:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo dmc start /tmp/data 0</span><br></pre></td></tr></table></figure>

<p>Then, to verify the status:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  /tmp dmc status /tmp/data</span><br><span class="line">Disk Mount Conditioner: ON</span><br><span class="line">Profile: Custom</span><br><span class="line"> Type: HDD</span><br><span class="line"> Access time: 52222 us</span><br><span class="line"> Read throughput: 50 MB/s</span><br><span class="line"> Write throughput: 50 MB/s</span><br><span class="line"> I/O Queue Depth: 16</span><br><span class="line"> Max Read Bytes: 1048576</span><br><span class="line"> Max Write Bytes: 1048576</span><br><span class="line"> Max Read Segments: 128</span><br><span class="line"> Max Write Segments: 128</span><br></pre></td></tr></table></figure>

<h2 id="Verification"><a href="#Verification" class="headerlink" title="Verification"></a>Verification</h2><p>We can validate using the <code>fio</code> tool:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  /tmp fio --filename=./data/test1 -direct=1 --rw=write --ioengine=posixaio --bs=1m --iodepth=32 --size=1G --numjobs=1 --runtime=60 --time_base=1 --group_reporting --name=test-seq-read --log_avg_msec=1000 </span><br></pre></td></tr></table></figure>

<p>Writing a 1GB file sequentially yields a speed of only 95.4MB&#x2F;s, with IOPS at 91:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Run status group 0 (all jobs):</span><br><span class="line">  WRITE: bw=91.0MiB/s (95.4MB/s), 91.0MiB/s-91.0MiB/s (95.4MB/s-95.4MB/s), io=5468MiB (5734MB), run=60073-60073msec</span><br></pre></td></tr></table></figure>

<p>Now, with <code>dmc</code> turned off and the same command:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/tmp sudo dmc stop /tmp/data</span><br><span class="line">/tmp fio --filename=./data/test1 -direct=1 --rw=write --ioengine=posixaio --bs=1m --iodepth=32 --size=1G --numjobs=1 --runtime=60 --time_base=1 --group_reporting --name=test-seq-read --log_avg_msec=1000 </span><br></pre></td></tr></table></figure>

<p>The test results in 3211MB&#x2F;s and IOPS of 3061, which represents the true speed of the disk:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">WRITE: bw=3062MiB/s (3211MB/s), 3062MiB/s-3062MiB/s (3211MB/s-3211MB/s), io=179GiB (193GB), run=60006-60006msec</span><br></pre></td></tr></table></figure>

<p>In conclusion, <code>dmc</code> is quite handy in testing scenarios. I hadn’t known about this software before; if you find it useful, give it a try.</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Learn How to Handle Time In Golang</title>
    <url>/2024/04/19/Learn%20How%20to%20Handle%20Time%20In%20Golang/</url>
    <content><![CDATA[<p><img src="https://images.hxzhouh.com/blog-images/2024/04/407a476e9b0e72dfefa2c636f2fd71ce.png" alt="99e178071ff04a758df4210c2e330fc8.png~tplv-6bxrjdptv7-image"><br>Handling time is a common task for programmers. In Go, the standard library <code>time</code> provides the necessary capabilities.</p>
<h2 id="This-article-will-introduce-some-important-functions-and-methods-in-the-time-package-hoping-to-help-those-who-often-need-to-deal-with-time-related-issues-in-Go-Handle-Time-Zones"><a href="#This-article-will-introduce-some-important-functions-and-methods-in-the-time-package-hoping-to-help-those-who-often-need-to-deal-with-time-related-issues-in-Go-Handle-Time-Zones" class="headerlink" title="This article will introduce some important functions and methods in the time package, hoping to help those who often need to deal with time-related issues in Go.Handle Time Zones"></a>This article will introduce some important functions and methods in the <code>time</code> package, hoping to help those who often need to deal with time-related issues in Go.<br><span id="more"></span><br>Handle Time Zones</h2><p>In programming, we often encounter the issue of an <strong>eight-hour time difference</strong>. This is caused by differences in time zones. To better handle them, we need to understand several time definition standards.</p>
<p>GMT (Greenwich Mean Time) is based on the Earth’s rotation and revolution to calculate time. It defines noon as the time when the sun passes through the Royal Greenwich Observatory in the suburbs of London, UK. GMT was the former world standard time.</p>
<p>UTC (Coordinated Universal Time) is more precise than GMT, calculated based on atomic clocks. In situations where precision to the second is not required, UTC can be considered equivalent to GMT. UTC is the current world standard time.</p>
<p>From the Prime Meridian at Greenwich, going east is positive, going west is negative. The globe is divided into 24 standard time zones, with neighboring time zones differing by one hour.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(time.Now())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In mainland China, the standard time used is in the GMT+8 time zone, known as China Standard Time (CST).</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">go</span> run main.<span class="keyword">go</span></span><br><span class="line"><span class="number">2022</span><span class="number">-07</span><span class="number">-17</span> <span class="number">16</span>:<span class="number">37</span>:<span class="number">31.186043</span> +<span class="number">0800</span> CST m=+<span class="number">0.000066647</span></span><br></pre></td></tr></table></figure>

<p>This is the result under the default time zone, and <code>+0800 CST</code> is indicated in the <code>time.Now()</code> printout.</p>
<p>Suppose we are in the Los Angeles time zone in the United States, what result do we get?</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">TZ=<span class="string">&quot;America/Los_Angeles&quot;</span> go run main.go</span></span><br><span class="line">2022-07-17 01:39:12.391505 -0700 PDT m=+0.000069514</span><br></pre></td></tr></table></figure>

<p>As seen, the result at this time is <code>-0700 PDT</code>, which is Pacific Daylight Time. Due to the time zone difference, the results of the two executions differ by 15 hours.</p>
<p>Note that when using Docker containers, the system’s default time zone is UTC time (0 time zone), which is eight hours behind Beijing time as we need, leading to the classic scenario of the <strong>eight-hour time difference</strong> problem.</p>
<p>Strategies for dealing with time zone issues can be found in detail in the loading logic of the <code>initLocal()</code> function in <code>src/time/zoneinfo_unix.go</code>. For example, you can solve it by specifying the environment variable <code>TZ</code> or modifying the <code>/etc/localtime</code> file.</p>
<p>Because time zone issues are very important, they are discussed in the first part of the article. Let’s now move on to the usage of the <code>time</code> package.</p>
<h2 id="Time-Instant-time-Time"><a href="#Time-Instant-time-Time" class="headerlink" title="Time Instant time.Time"></a>Time Instant <code>time.Time</code></h2><p>The core object in the <code>time</code> package is the <code>time.Time</code> struct. Its definition, used to represent a specific moment in time, is as follows:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Time <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// wall and ext encode the wall time seconds,</span></span><br><span class="line">    <span class="comment">// wall time nanoseconds, and optional monotonic</span></span><br><span class="line">    <span class="comment">// clock reading in nanoseconds.</span></span><br><span class="line">    wall <span class="type">uint64</span></span><br><span class="line">    ext  <span class="type">int64</span></span><br><span class="line">    loc  *Location</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In computer time handling, two types of clocks are mainly involved:</p>
<ul>
<li>Wall clock, also known as clock time, used to represent specific dates and times.</li>
<li>Monotonic clocks, which always guarantee that time moves forward without the issue of wall clock rollback, making them suitable for measuring durations.</li>
</ul>
<p>The <code>wall</code> and <code>ext</code> fields are used to record wall clock and monotonic clock times, with nanosecond precision. The bits of these fields are associated with specific information such as years, months, days, hours, minutes, and seconds.</p>
<p>The <code>loc</code> field records the time zone location. When <code>loc</code> is <code>nil</code>, it defaults to UTC time.</p>
<p>Because <code>time.Time</code> is used to represent time instants with nanosecond precision, it is typically stored and passed as a value in programs, rather than a pointer.</p>
<p>That is, in time variables or struct fields, we should use <code>time.Time</code> rather than <code>*time.Time</code>.</p>
<h5 id="Getting-time-Time"><a href="#Getting-time-Time" class="headerlink" title="Getting time.Time"></a>Getting <code>time.Time</code></h5><p>We can get the current local time using the <code>Now</code> function:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Now</span><span class="params">()</span></span> Time &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>Or, using the <code>Date</code> function, we can get a specified time based on the year, month, day, and other parameters, along with the time zone:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Date</span><span class="params">(year <span class="type">int</span>, month Month, day, hour, min, sec, nsec <span class="type">int</span>, loc *Location)</span></span> Time &#123;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Converting-Timestamps"><a href="#Converting-Timestamps" class="headerlink" title="Converting Timestamps"></a>Converting Timestamps</h5><p>In the computer world, UTC time 0 on January 1, 1970, is considered Unix time 0. To convert a time instant into a Unix timestamp, we calculate the number of seconds, microseconds, etc., elapsed from Unix time 0 to the specified instant.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span></span> Unix() <span class="type">int64</span>       <span class="comment">// Seconds since Unix time 0</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span></span> UnixMicro() <span class="type">int64</span>  <span class="comment">// Microseconds since Unix time 0</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span></span> UnixMilli() <span class="type">int64</span>  <span class="comment">// Milliseconds since Unix time 0</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span></span> UnixNano() <span class="type">int64</span>   <span class="comment">// Nanoseconds since Unix time 0</span></span><br></pre></td></tr></table></figure>

<h5 id="Getting-Basic-Fields"><a href="#Getting-Basic-Fields" class="headerlink" title="Getting Basic Fields"></a>Getting Basic Fields</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">t := time.Now()</span><br><span class="line">fmt.Println(t.Date())        <span class="comment">// 2022 July 17</span></span><br><span class="line">fmt.Println(t.Year())        <span class="comment">// 2022</span></span><br><span class="line">fmt.Println(t.Month())       <span class="comment">// July</span></span><br><span class="line">fmt.Println(t.ISOWeek())     <span class="comment">// 2022 28</span></span><br><span class="line">fmt.Println(t.Clock())       <span class="comment">// 22 21 56</span></span><br><span class="line">fmt.Println(t.Day())         <span class="comment">// 17</span></span><br><span class="line">fmt.Println(t.Weekday())     <span class="comment">// Sunday</span></span><br><span class="line">fmt.Println(t.Hour())        <span class="comment">// 22</span></span><br><span class="line">fmt.Println(t.Minute())      <span class="comment">// 21</span></span><br><span class="line">fmt.Println(t.Second())      <span class="comment">// 56</span></span><br><span class="line">fmt.Println(t.Nanosecond())  <span class="comment">// 494313000</span></span><br><span class="line">fmt.Println(t.YearDay())     <span class="comment">// 198</span></span><br></pre></td></tr></table></figure>

<h2 id="Duration-time-Duration"><a href="#Duration-time-Duration" class="headerlink" title="Duration time.Duration"></a>Duration <code>time.Duration</code></h2><p><code>time.Duration</code> represents the time elapsed between two <code>time.Time</code> instants. It uses an <code>int64</code> to represent the count of nanoseconds, allowing for approximately 290 years of representation.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A Duration represents the elapsed time between two instants</span></span><br><span class="line"><span class="comment">// as an int64 nanosecond count. The representation limits the</span></span><br><span class="line"><span class="comment">// largest representable duration to approximately 290 years.</span></span><br><span class="line"><span class="keyword">type</span> Duration <span class="type">int64</span></span><br></pre></td></tr></table></figure>

<p>In Go, <code>time.Duration</code> is simply a number in nanoseconds. If a duration is equal to 1000000000, it represents 1 second, or 1000 milliseconds, or 1000000 microseconds, or 1000000000 nanoseconds.</p>
<p>For example, the duration between two time instants separated by 1 hour can be calculated as:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>*<span class="number">1000</span>*<span class="number">1000</span></span><br></pre></td></tr></table></figure>

<p>The <code>time</code> package defines constant values for these durations:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Nanosecond  Duration = <span class="number">1</span></span><br><span class="line">    Microsecond          = <span class="number">1000</span> * Nanosecond</span><br><span class="line">    Millisecond         </span><br><span class="line"></span><br><span class="line"> = <span class="number">1000</span> * Microsecond</span><br><span class="line">    Second               = <span class="number">1000</span> * Millisecond</span><br><span class="line">    Minute               = <span class="number">60</span> * Second</span><br><span class="line">    Hour                 = <span class="number">60</span> * Minute</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>Additionally, <code>time.Duration</code> provides methods to get values at various time granularities:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Duration)</span></span> Nanoseconds() <span class="type">int64</span>   <span class="comment">// Nanoseconds</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Duration)</span></span> Microseconds() <span class="type">int64</span>  <span class="comment">// Microseconds</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Duration)</span></span> Milliseconds() <span class="type">int64</span>  <span class="comment">// Milliseconds</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Duration)</span></span> Seconds() <span class="type">float64</span>     <span class="comment">// Seconds</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Duration)</span></span> Minutes() <span class="type">float64</span>     <span class="comment">// Minutes</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Duration)</span></span> Hours() <span class="type">float64</span>       <span class="comment">// Hours</span></span><br></pre></td></tr></table></figure>

<h2 id="Time-Calculation"><a href="#Time-Calculation" class="headerlink" title="Time Calculation"></a>Time Calculation</h2><p>After learning about time instants and durations, let’s see how to perform time calculations.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span></span> Add(d Duration) Time &#123;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>Add</code> adds or subtracts (positive <code>d</code> means addition, negative <code>d</code> means subtraction) a <code>time.Duration</code> to a <code>time.Time</code>. We can add or subtract durations of specific nanosecond levels to a specific instant in time.</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span></span> Sub(u Time) Duration &#123;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>Sub</code> returns the duration between two time instants.</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span></span> AddDate(years <span class="type">int</span>, months <span class="type">int</span>, days <span class="type">int</span>) Time &#123;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>AddDate</code> adds or subtracts values based on the year, month, and day dimensions to a <code>time.Time</code>.</li>
</ul>
<p>Of course, calculating based on the current time instant <code>time.Now()</code> is the most common requirement. Therefore, the <code>time</code> package also provides the following convenient time calculation functions:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Since</span><span class="params">(t Time)</span></span> Duration &#123;&#125;</span><br></pre></td></tr></table></figure>

<p><code>Since</code> is a shortcut for <code>time.Now().Sub(t)</code>.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Until</span><span class="params">(t Time)</span></span> Duration &#123;&#125;</span><br></pre></td></tr></table></figure>

<p><code>Until</code> is a shortcut for <code>t.Sub(time.Now())</code>.</p>
<h5 id="Usage-Example"><a href="#Usage-Example" class="headerlink" title="Usage Example"></a>Usage Example</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">t := time.Now()</span><br><span class="line">fmt.Println(t)                              <span class="comment">// 2022-07-17 22:41:06.001567 +0800 CST m=+0.000057466</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Adding 1 hour to the time</span></span><br><span class="line">fmt.Println(t.Add(time.Hour * <span class="number">1</span>))           <span class="comment">// 2022-07-17 23:41:06.001567 +0800 CST m=+3600.000057466</span></span><br><span class="line"><span class="comment">// Adding 15 minutes</span></span><br><span class="line">fmt.Println(t.Add(time.Minute * <span class="number">15</span>))        <span class="comment">// 2022-07-17 22:56:06.001567 +0800 CST m=+900.000057466</span></span><br><span class="line"><span class="comment">// Adding 10 seconds</span></span><br><span class="line">fmt.Println(t.Add(time.Second * <span class="number">10</span>))        <span class="comment">// 2022-07-17 22:41:16.001567 +0800 CST m=+10.000057466</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Subtracting 1 hour</span></span><br><span class="line">fmt.Println(t.Add(-time.Hour * <span class="number">1</span>))          <span class="comment">// 2022-07-17 21:41:06.001567 +0800 CST m=-3599.999942534</span></span><br><span class="line"><span class="comment">// Subtracting 15 minutes</span></span><br><span class="line">fmt.Println(t.Add(-time.Minute * <span class="number">15</span>))       <span class="comment">// 2022-07-17 22:26:06.001567 +0800 CST m=-899.999942534</span></span><br><span class="line"><span class="comment">// Subtracting 10 seconds</span></span><br><span class="line">fmt.Println(t.Add(-time.Second * <span class="number">10</span>))       <span class="comment">// 2022-07-17 22:40:56.001567 +0800 CST m=-9.999942534</span></span><br><span class="line"></span><br><span class="line">time.Sleep(time.Second * <span class="number">5</span>)</span><br><span class="line">t2 := time.Now()</span><br><span class="line"><span class="comment">// Calculating the duration from t to t2</span></span><br><span class="line">fmt.Println(t2.Sub(t))                      <span class="comment">// 5.004318874s</span></span><br><span class="line"><span class="comment">// Time after 1 year</span></span><br><span class="line">t3 := t2.AddDate(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="comment">// Calculating the duration from t to the current time</span></span><br><span class="line">fmt.Println(time.Since(t))                   <span class="comment">// 5.004442316s</span></span><br><span class="line"><span class="comment">// Calculating the duration from now to next year</span></span><br><span class="line">fmt.Println(time.Until(t3))                  <span class="comment">// 8759h59m59.999864s</span></span><br></pre></td></tr></table></figure>

<h2 id="Formatting-Time"><a href="#Formatting-Time" class="headerlink" title="Formatting Time"></a>Formatting Time</h2><p>In other languages, a universal time template is typically used to format time. For example, in Python, <code>%Y</code> represents year, <code>%m</code> represents month, <code>%d</code> represents day, and so on.</p>
<p>However, Go is different. It uses a <strong>fixed time</strong> (it’s important to note that using other times is not allowed) as the layout template, and this fixed time is the birth time of the Go language.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">Mon Jan <span class="number">2</span> <span class="number">15</span>:<span class="number">04</span>:<span class="number">05</span> MST <span class="number">2006</span></span><br></pre></td></tr></table></figure>

<p>Formatting time involves two conversion functions:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Parse</span><span class="params">(layout, value <span class="type">string</span>)</span></span> (Time, <span class="type">error</span>) &#123;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>Parse</code> converts a time string to a <code>time.Time</code> object based on the layout it can correspond to.</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span></span> Format(layout <span class="type">string</span>) <span class="type">string</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>Format</code> converts a <code>time.Time</code> object to a time string based on the given layout.</li>
</ul>
<h5 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">const (</span><br><span class="line">    layoutISO = &quot;2006-01-02&quot;</span><br><span class="line">    layoutUS  = &quot;January 2, 2006&quot;</span><br><span class="line">)</span><br><span class="line">date := &quot;2012-08-09&quot;</span><br><span class="line">t, _ := time.Parse(layoutISO, date)</span><br><span class="line">fmt.Println(t)                              // 2012-08-09 00:00:00 +0000 UTC</span><br><span class="line">fmt.Println(t.Format(layoutUS))             // August 9, 2012</span><br></pre></td></tr></table></figure>

<p>In the <code>time</code> package, Go provides some predefined layout template constants that can be directly used.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">const (</span><br><span class="line">    Layout      = &quot;01/02 03:04:05PM &#x27;06 -0700&quot;  // The reference time, in numerical order.</span><br><span class="line">    ANSIC       = &quot;Mon Jan _2 15:04:05 2006&quot;</span><br><span class="line">    UnixDate    = &quot;Mon Jan _2 15:04:05 MST 2006&quot;</span><br><span class="line">    RubyDate    = &quot;Mon Jan 02 15:04:05 -0700 2006&quot;</span><br><span class="line">    RFC822      = &quot;02 Jan 06 15:04 MST&quot;</span><br><span class="line">    RFC822Z     = &quot;02 Jan 06 15:04 -0700&quot;       // RFC822 with numeric zone</span><br><span class="line">    RFC850      = &quot;Monday, 02-Jan-06 15:04:05 MST&quot;</span><br><span class="line">    RFC1123     = &quot;Mon, 02 Jan 2006 15:04:05 MST&quot;</span><br><span class="line">    RFC1123Z    = &quot;Mon, 02 Jan 2006 15:04:05 -0700&quot; // RFC1123 with numeric zone</span><br><span class="line">    RFC3339     = &quot;2006-01-02T15:04:05Z07:00&quot;</span><br><span class="line">    RFC3339Nano = &quot;2006-01-02T15:04:05.999999999Z07:00&quot;</span><br><span class="line">    Kitchen     = &quot;3:04PM&quot;</span><br><span class="line">    // Handy time stamps.</span><br><span class="line">    Stamp       = &quot;Jan _2 15:04:05&quot;</span><br><span class="line">    StampMilli  = &quot;Jan _2 15:04:05.000&quot;</span><br><span class="line">    StampMicro  = &quot;Jan _2 15:04:05.000000&quot;</span><br><span class="line">    StampNano  </span><br><span class="line"></span><br><span class="line"> = &quot;Jan _2 15:04:05.000000000&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>Here’s a table of optional layout parameters:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Year            06/2006</span><br><span class="line">Month           01/1/Jan/January</span><br><span class="line">Day             02/2/_2</span><br><span class="line">Weekday         Mon/Monday</span><br><span class="line">Hour            03/3/15</span><br><span class="line">Minute          04/4</span><br><span class="line">Second          05/5</span><br><span class="line">Milliseconds    .000/.999</span><br><span class="line">Microseconds    .000000/.999999</span><br><span class="line">Nanoseconds     .000000000/.999999999</span><br><span class="line">am/pm           PM/pm</span><br><span class="line">Timezone        MST</span><br><span class="line">Timezone offset -0700/-07/-07:00/Z0700/Z07:00</span><br></pre></td></tr></table></figure>

<h2 id="Timezone-Conversion"><a href="#Timezone-Conversion" class="headerlink" title="Timezone Conversion"></a>Timezone Conversion</h2><p>At the beginning of the article, we discussed timezone issues. If in your code, you need to get the result of the same <code>time.Time</code> in different time zones, you can use its <code>In</code> method.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span></span> In(loc *Location) Time &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>It’s straightforward to use. Let’s see an example code:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">now := time.Now()</span><br><span class="line">fmt.Println(now)                               <span class="comment">// 2022-07-18 21:19:59.9636 +0800 CST m=+0.000069242</span></span><br><span class="line"></span><br><span class="line">loc, _ := time.LoadLocation(<span class="string">&quot;UTC&quot;</span>)</span><br><span class="line">fmt.Println(now.In(loc))                        <span class="comment">// 2022-07-18 13:19:59.9636 +0000 UTC</span></span><br><span class="line"></span><br><span class="line">loc, _ = time.LoadLocation(<span class="string">&quot;Europe/Berlin&quot;</span>)</span><br><span class="line">fmt.Println(now.In(loc))                        <span class="comment">// 2022-07-18 15:19:59.9636 +0200 CEST</span></span><br><span class="line"></span><br><span class="line">loc, _ = time.LoadLocation(<span class="string">&quot;America/New_York&quot;</span>)</span><br><span class="line">fmt.Println(now.In(loc))                        <span class="comment">// 2022-07-18 09:19:59.9636 -0400 EDT</span></span><br><span class="line"></span><br><span class="line">loc, _ = time.LoadLocation(<span class="string">&quot;Asia/Dubai&quot;</span>)</span><br><span class="line">fmt.Println(now.In(loc))                        <span class="comment">// 2022-07-18 17:19:59.9636 +0400 +04</span></span><br></pre></td></tr></table></figure>

<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>In general, the functions and methods provided by the <code>time</code> package for time processing meet our usage needs.</p>
<p>Interestingly, Go’s time formatting conversion must adopt Go’s birth time. It’s quite self-centered.</p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Performance analysis of goroutine switching</title>
    <url>/2024/03/20/Performance%20analysis%20of%20goroutine%20switching/</url>
    <content><![CDATA[<p><img src="https://images.hxzhouh.com/blog-images/2024/03/057d94f39fc9a6838acdbc94b915f654.png" alt="Pasted image 20240320201037">  </p>
<blockquote>
<p>Note: Non-members can read the full story in this <a href="https://medium.hxzhouh.com/d91a49604cae?source=friends_link&sk=f3140285d590037631e7f7354ee9f629">link</a>.</p>
</blockquote>
<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>In the previous article, we verified the context switch overhead of Linux processes and threads experimentally, which was approximately between 3-5 microseconds. This overhead is not significant, but for massively concurrent internet servers and typical computer programs, the characteristics are as follows:</p>
<ul>
<li>High concurrency: Thousands to tens of thousands of user requests need to be processed per second.</li>
<li>Short cycles: The processing time per user should be as short as possible, often in the millisecond range.</li>
<li>High network I&#x2F;O: Often requires network I&#x2F;O from other machines, such as Redis, MySQL, etc.</li>
<li>Low computation: General CPU-intensive operations are not frequent.<span id="more"></span>
Even with a context switch overhead of 3-5 microseconds, it can still appear somewhat performance-degrading if the context switch volume is particularly high. For example, the Apache web server, which was the software product under this model, suffered from this. (In fact, when Linux operating system was designed, its goal was to be a general-purpose operating system rather than specifically designed for high-concurrency server-side applications.)</li>
</ul>
<p>To avoid frequent context switches, there is another asynchronous non-blocking development model. That is to use a process or thread to handle a large number of user requests and then improve performance through IO multiplexing (processes or threads do not block, saving the overhead of context switches). Nginx and Node.js are typical representatives of this model. Frankly speaking, in terms of program execution efficiency, this model is the most machine-friendly, with the highest efficiency (better than the coroutine development model mentioned below). Therefore, Nginx has replaced Apache as the preferred web server. However, the problem with this programming model lies in its unfriendliness to development, which is overly mechanized and deviates from the original intention of abstracting the concept of processes. Normal linear thinking of humans is disrupted, and application layer developers are forced to write code with non-human-like thinking, making code debugging extremely difficult.</p>
<p>So, some smart heads continued to brainstorm at the application layer and designed “threads” that do not require process&#x2F;thread context switching, called coroutines. Using coroutines to handle high-concurrency application scenarios can not only meet the original intention of processes but also allow developers to use normal linear thinking to handle their business, while also eliminating the expensive overhead of process&#x2F;thread context switches. Therefore, it can be said that coroutines are a good patch for the process model in the scenario of processing massive requests on Linux.</p>
<p>With the background introduced, what I want to say is that although coroutine encapsulation is lightweight, it still incurs some additional costs. So, let’s take a look at how small these additional costs are.</p>
<h2 id="Coroutine-Overhead-Test"><a href="#Coroutine-Overhead-Test" class="headerlink" title="Coroutine Overhead Test"></a>Coroutine Overhead Test</h2><blockquote>
<p>This article is based on go 1.22.1.</p>
</blockquote>
<ul>
<li><strong>1. Coroutine Context Switch CPU Overhead</strong><br>  The test process involves continuously yielding the CPU between coroutines. The core code is as follows.<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">&quot;fmt&quot;</span>  </span><br><span class="line">    <span class="string">&quot;runtime&quot;</span>    </span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cal</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++ &#123;  </span><br><span class="line">       runtime.Gosched()  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    runtime.GOMAXPROCS(<span class="number">1</span>)  </span><br><span class="line">    currentTime := time.Now()  </span><br><span class="line">    fmt.Println(currentTime)  </span><br><span class="line">    <span class="keyword">go</span> cal()  </span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++ &#123;  </span><br><span class="line">       runtime.Gosched()  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    fmt.Println(time.Now().Sub(currentTime) / <span class="number">2000000</span>)  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>Compilation and execution</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  trace git:(main) ✗ go run main.go              </span><br><span class="line">2024-03-20 19:52:24.772579 +0800 CST m=+0.000114834</span><br><span class="line">54ns</span><br><span class="line">➜  trace git:(main) ✗ </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>The average overhead of each coroutine switch is 54ns, which is approximately 1&#x2F;70 of the context switch overhead measured in the previous article, about 3.5 microseconds, and is approximately 70 times lower than the overhead caused by system calls.</p>
<p><strong>Coroutine Memory Overhead</strong><br>In terms of space, when coroutines are initialized and created, a stack of 2KB is allocated for them. The stack of threads is much larger than this number, which can be checked through the <code>ulimit</code> command, usually in several megabytes. On my Mac, it’s 8MB. If a coroutine is created for each user to handle, 2GB of memory is sufficient for handling 1 million concurrent user requests, while the thread model would require 8TB.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  trace git:(main) ✗ ulimit -a   </span><br><span class="line">-t: cpu time (seconds)              unlimited</span><br><span class="line">-f: file size (blocks)              unlimited</span><br><span class="line">-d: data seg size (kbytes)          unlimited</span><br><span class="line">-s: stack size (kbytes)             8176</span><br><span class="line">-c: core file size (blocks)         0</span><br><span class="line">-v: address space (kbytes)          unlimited</span><br><span class="line">-l: locked-in-memory size (kbytes)  unlimited</span><br><span class="line">-u: processes                       2666</span><br><span class="line">-n: file descriptors                12544</span><br></pre></td></tr></table></figure>

<h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>Since coroutines complete context switches in user space, the switch time is only slightly over 50ns, which is 70 times higher than process switches. The stack memory required by a single coroutine is also quite small, only requiring 2KB. Therefore, coroutines have shined in high-concurrency scenarios in backend internet applications in recent years.</p>
<p>Whether in terms of space or time performance, they are much better than processes (threads). Then why doesn’t Linus implement them in the operating system? For the sake of better real-time performance, the operating system may preempt the CPU of processes with higher priorities. However, coroutines cannot achieve this and still rely on the coroutines currently using the CPU to release it actively, which is not consistent with the implementation purpose of the operating system. Therefore, the efficiency of coroutines comes at the cost of sacrificing preemption.</p>
<p>Coroutines ultimately execute attached to operating system threads.</p>
<p>A question we need to consider is:<br>Does using coroutines mean threads no longer switch? The frequency of thread switches basically depends on the number of threads. When using coroutines, you need to specify tasks for each thread. For the same workload, the number of threads required by coroutines should always be higher than that of automatically allocated thread pools.<br>Therefore:<br>Using threads &#x3D; thread switch overhead (low)<br>Using coroutines &#x3D; thread switch overhead (high) + coroutine switch overhead  </p>
<p>Then CPU overhead:<br>Instruction cycles of threads &#x3D; interrupt detection + instruction execution (including fetch, decode, and execute)<br>Instruction cycles of coroutines &#x3D; interrupt detection + instruction execution + interrupt detection + coroutine signal detection  </p>
<p>So, I have the following conclusion:<br>In terms of performance, IO multiplexing + thread pool completely outperforms coroutines; but in terms of convenience, coroutines are still easier to use.</p>
<p>Because calling coroutines in Go is so convenient, some Go programmers use the <code>go</code> keyword casually. It should be noted that before switching to a coroutine, the coroutine must be created first. Once created, plus the scheduling overhead, it increases to 400ns, which is almost equivalent to the time consumed by a system call. Although coroutines are efficient, they should not be used casually,</p>
<p>If you like my articles, consider to :</p>
<ol>
<li>Drop me a follow -&gt; <a href="https://medium.hxzhouh.com/">huizhou92</a></li>
<li>Leave a clap👏 (50 👏👏👏👏would be the best) and a comment if you want to interact with me.</li>
<li>Receive an email every time I post on Medium -&gt; <a href="https://medium.hxzhouh.com/subscribe">Click here</a>!</li>
<li>If you find my article helpful to you, please buy me a cup of <a href="https://www.buymeacoffee.com/hxzhouh">coffee</a></li>
</ol>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Smart Go compiler: Slimming</title>
    <url>/2024/05/11/Smart%20Go%20compiler%20Slimming/</url>
    <content><![CDATA[<h1 id="Smart-Go-compiler-Slimming"><a href="#Smart-Go-compiler-Slimming" class="headerlink" title="Smart Go compiler:  Slimming"></a>Smart Go compiler:  Slimming</h1><h3 id="1-Experiment-Which-Functions-are-Included-in-the-Final-Executable"><a href="#1-Experiment-Which-Functions-are-Included-in-the-Final-Executable" class="headerlink" title="1. Experiment: Which Functions are Included in the Final Executable?"></a>1. Experiment: Which Functions are Included in the Final Executable?</h3><blockquote>
<p>This article is first published in the medium MPP plan. If you are a medium user, please follow me in <a href="https://medium.hxzhouh.com/">medium</a>. Thank you very much.</p>
</blockquote>
<p>Let’s conduct an experiment to determine which functions are included in the final executable! We’ll create a demo1 with the following directory structure and code snippets:</p>
<span id="more"></span>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dead-code-elimination/demo1</span></span><br><span class="line">$ tree -F .</span><br><span class="line">.</span><br><span class="line">├── <span class="keyword">go</span>.mod</span><br><span class="line">├── main.<span class="keyword">go</span></span><br><span class="line">└── pkga/</span><br><span class="line">    └── pkga.<span class="keyword">go</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// main.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;demo/pkga&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    result := pkga.Foo()</span><br><span class="line">    fmt.Println(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pkga/pkga.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> pkga</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Foo</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello from Foo!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Bar</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;This is Bar.&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The example is very simple! The main function calls the exported function Foo from the pkga package, which also contains the Bar function (although it is not called by any other function). Now let’s compile this module and examine the functions from the pkga package included in the compiled executable file! (This article uses Go version 1.22.0)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go build</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go tool nm demo | grep demo</span></span><br></pre></td></tr></table></figure>

<p>Surprisingly, we didn’t find any symbol information related to pkga in the output of the executable file. This might be due to Go’s optimization. Let’s disable the optimization of the Go compiler and try again:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go build -gcflags <span class="string">&#x27;-l -N&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go tool nm demo | grep demo</span></span><br><span class="line"> 108ca80 T demo/pkga.Foo</span><br></pre></td></tr></table></figure>

<p>After disabling inlining optimization, we can see that pkga.Foo appears in the final executable file demo, but the unused Bar function is not included.</p>
<p>Now let’s look at an example with indirect dependencies:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dead-code-elimination/demo2</span></span><br><span class="line">$ tree .</span><br><span class="line">.</span><br><span class="line">├── <span class="keyword">go</span>.mod</span><br><span class="line">├── main.<span class="keyword">go</span></span><br><span class="line">├── pkga</span><br><span class="line">│   └── pkga.<span class="keyword">go</span></span><br><span class="line">└── pkgb</span><br><span class="line">    └── pkgb.<span class="keyword">go</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// pkga/pkga.go</span></span><br><span class="line"><span class="keyword">package</span> pkga</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;demo/pkgb&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Foo</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    pkgb.Zoo()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello from Foo!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Bar</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;This is Bar.&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In this example, we call a new function Zoo from the pkgb package within the pkga.Foo function. Let’s compile this new example and see which functions are included in the final executable:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go build -gcflags=<span class="string">&#x27;-l -N&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go tool nm demo | grep demo</span></span><br><span class="line"> 1093b40 T demo/pkga.Foo</span><br><span class="line"> 1093aa0 T demo/pkgb.Zoo</span><br></pre></td></tr></table></figure>

<p>We can observe that only the functions reachable through the program execution path are included in the final executable!</p>
<p>In more complex examples, we can use the <code>go build -ldflags=&#39;-dumpdep&#39;</code> command to view the call dependency relationship (using demo2 as an example):</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">go</span> build -ldflags=<span class="string">&#x27;-dumpdep&#x27;</span> -gcflags=<span class="string">&#x27;-l -N&#x27;</span> &gt; deps.txt <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"></span><br><span class="line">$ grep demo deps.txt</span><br><span class="line"># demo</span><br><span class="line">main.main -&gt; demo/pkga.Foo</span><br><span class="line">demo/pkga.Foo -&gt; demo/pkgb.Zoo</span><br><span class="line">demo/pkga.Foo -&gt; <span class="keyword">go</span>:<span class="type">string</span>.<span class="string">&quot;Hello from Foo!&quot;</span></span><br><span class="line">demo/pkgb.Zoo -&gt; math/rand.Int31n</span><br><span class="line">demo/pkgb.Zoo -&gt; demo/pkgb..stmp_0</span><br><span class="line">demo/pkgb..stmp_0 -&gt; <span class="keyword">go</span>:<span class="type">string</span>.<span class="string">&quot;Zoo in pkgb&quot;</span></span><br></pre></td></tr></table></figure>

<p>From this, we can conclude that Go ensures that only the code that is actually used enters the final executable file, even if some code (such as pkga.Bar) and the code that is actually used (such as pkga.Foo) are in the same package. This mechanism also ensures that the final executable file size remains within a manageable range.</p>
<p>Next, let’s explore this mechanism in Go.</p>
<h3 id="2-Dead-Code-Elimination"><a href="#2-Dead-Code-Elimination" class="headerlink" title="2. Dead Code Elimination"></a>2. Dead Code Elimination</h3><p>Let’s review the build process of <code>go build</code>. The following steps outline the <code>go build</code> command:</p>
<ol>
<li>Read go.mod and go.sum: If the current directory contains a go.mod file, <code>go build</code> reads it to determine the project’s dependencies. It also verifies the integrity of the dependencies based on checksums in the go.sum file.</li>
<li>Calculate the package dependency graph: <code>go build</code> analyzes the import statements in the packages being built and their dependencies to construct a dependency graph. This graph represents the relationships between packages, enabling the compiler to determine the build order of packages.</li>
<li>Determine the packages to build: Based on the build cache and the dependency graph, <code>go build</code> determines which packages need to be built. It checks the build cache to see if the compiled packages are up to date. If any package or its dependencies have changed since the last build, <code>go build</code> will rebuild those packages.</li>
<li>Invoke the compiler (go tool compile): For each package that needs to be built, <code>go build</code> invokes the Go compiler (go tool compile). The compiler converts the Go source code into machine code specific to the target platform and generates object files (.o files).</li>
<li>Invoke the linker (go tool link): After compiling all the necessary packages, <code>go build</code> invokes the Go linker (go tool link). The linker merges the object files generated by the compiler into an executable binary file or a package archive file. It resolves symbols and references between packages, performs necessary relocations, and generates the final output.</li>
</ol>
<p>The entire build process can be represented by the following diagram:</p>
<p><img src="https://tonybai.com/wp-content/uploads/dead-code-elimination-and-executable-file-slimming-in-go-2.png" alt="Build Process"></p>
<p>During the build process, <code>go build</code> performs various optimizations, such as dead code elimination and inlining, to improve the performance and reduce the size of the generated binary files. Dead code elimination is an important mechanism that ensures the controllable size of the final executable file in Go.</p>
<p>The implementation of the dead code detection algorithm can be found in the <code>$GOROOT/src/cmd/link/internal/ld/deadcode.go</code> file. The algorithm operates by traversing the graph and follows these steps:</p>
<ol>
<li>Start from the entry point of the system and mark all symbols reachable through relocations. Relocation represents the dependency relationship between two symbols.</li>
<li>By traversing the relocation relationships, the algorithm marks all symbols that can be accessed from the entry point. For example, if the function pkga.Foo is called in the main function main.main, there will be a relocation entry for this function in main.main.</li>
<li>After marking is complete, the algorithm marks all unmarked symbols as unreachable and dead code. These unmarked symbols represent the code that cannot be accessed by the entry point or any other reachable symbols.</li>
</ol>
<p>However, there is a special syntax element to note, which is types with methods. Whether the methods of a type are included in the final executable depends on different scenarios. In deadcode.go, the function implementation for marking reachable symbols distinguishes three cases of method invocation for reachable types:</p>
<ol>
<li>Direct invocation</li>
<li>Invocation through reachable interface types</li>
<li>Invocation through reflection: reflect.Value.Method (or MethodByName) or reflect.Type.Method (or MethodByName)</li>
</ol>
<p>In the first case, the invoked method is marked as reachable. In the second case, all reachable interface types are decomposed into method signatures. Each encountered method is compared with the interface method signatures, and if there is a match, it is marked as reachable. This method is conservative but simple and correct.</p>
<p>In the third case, the algorithm handles methods by looking for functions marked as REFLECTMETHOD by the compiler. The presence of REFLECTMETHOD on a function F means that F uses reflection for method lookup, but the compiler cannot determine the method name during static analysis. Therefore, all functions that call reflect.Value.Method or reflect.Type.Method are marked as REFLECTMETHOD. Functions that call reflect.Value.MethodByName or reflect.Type.MethodByName with non-constant arguments are also considered REFLECTMETHOD. If a REFLECTMETHOD is found, static analysis is abandoned, and all exported methods of reachable types are marked as reachable.</p>
<p>Here is an example from the reference material:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dead-code-elimination/demo3/main.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> X <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="keyword">type</span> Y <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*X)</span></span> One()   &#123; fmt.Println(<span class="string">&quot;hello 1&quot;</span>) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*X)</span></span> Two()   &#123; fmt.Println(<span class="string">&quot;hello 2&quot;</span>) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*X)</span></span> Three() &#123; fmt.Println(<span class="string">&quot;hello 3&quot;</span>) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*Y)</span></span> Four()  &#123; fmt.Println(<span class="string">&quot;hello 4&quot;</span>) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*Y)</span></span> Five()  &#123; fmt.Println(<span class="string">&quot;hello 5&quot;</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name <span class="type">string</span></span><br><span class="line">    fmt.Scanf(<span class="string">&quot;%s&quot;</span>, &amp;name)</span><br><span class="line">    reflect.ValueOf(&amp;X&#123;&#125;).MethodByName(name).Call(<span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">var</span> y Y</span><br><span class="line">    y.Five()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In this example, type *X has three methods, and type *Y has two methods. In the main function, we call the methods of an X instance through reflection and directly call a method of a Y instance. Let’s see which methods of X and Y are included in the final executable:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go build -gcflags=<span class="string">&#x27;-l -N&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go tool nm ./demo | grep main</span></span><br><span class="line"> 11d59c0 D go:main.inittasks</span><br><span class="line"> 10d4500 T main.(*X).One</span><br><span class="line"> 10d4640 T main.(*X).Three</span><br><span class="line"> 10d45a0 T main.(*X).Two</span><br><span class="line"> 10d46e0 T main.(*Y).Five</span><br><span class="line"> 10d4780 T main.main</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure>

<p>We can observe that only the directly called method Five of the reachable type Y is included in the final executable, while all methods of the reachable type X through reflection are present! This aligns with the third case mentioned earlier.</p>
<h3 id="3-Summary"><a href="#3-Summary" class="headerlink" title="3. Summary"></a>3. Summary</h3><p>This article introduced the dead code elimination and executable file size reduction mechanisms in the Go language. Through experiments, we verified that only the functions called on the program execution path are included in the final executable, and unused functions are eliminated.</p>
<p>The article explained the Go build process, including package dependency graph calculation, compilation, and linking steps, and highlighted dead code elimination as an important optimization strategy. The specific dead code elimination algorithm is implemented through graph traversal, where reachable symbols are marked and unmarked symbols are considered unused. The article also mentioned the handling of type methods.</p>
<p>With this dead code elimination mechanism, Go controls the size of the final executable file, achieving executable file size reduction.</p>
<p>The source code mentioned in this article can be downloaded <a href="https://github.com/bigwhite/experiments/tree/master/dead-code-elimination">here</a>.</p>
<h3 id="4-References"><a href="#4-References" class="headerlink" title="4. References"></a>4. References</h3><ul>
<li><a href="https://golab.io/talks/getting-the-most-out-of-dead-code-elimination">Getting the most out of Dead Code elimination</a> </li>
<li><a href="https://github.com/golang/go/issues/6853">all: binaries too big and growing</a> </li>
<li><a href="https://github.com/aarzilli/whydeadcode">aarzilli&#x2F;whydeadcode</a></li>
</ul>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>The Magical Algorithms Written by Two Old Men, Dominating the World!</title>
    <url>/2024/04/25/The%20Magical%20Algorithms%20Written%20by%20Two%20Old%20Men,%20Dominating%20the%20World/</url>
    <content><![CDATA[<p>As an ordinary person, when you browse the web, you may not realize that the web pages sent to you by the server are actually compressed.</p>
<p>If you like a programmer, press F12 in the browser, you’ll find something like this:</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/04/3dc37c7d0ce9c1a32f87d44adbd5ef8e.png" alt="Image"></p>
<span id="more"></span>
<p>It means: In order to save bandwidth and provide speed, I (the server) compressed the content using gzip, and you (the browser) need to decompress it to view it!</p>
<p>In HTTP compression, besides gzip, there are also algorithms like compress, deflate, br, etc., which can be dazzling.</p>
<p>However, all these compression algorithms have an ancestor: <strong>LZ algorithm</strong>.</p>
<p>LZ comes from the names of two people: Abraham <strong>L</strong>empel and Jacob <strong>Z</strong>iv.</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/04/f99c3cfdce323ee7f49a9fc7cbf2ffc9.png" alt="Image"></p>
<p>Both of them passed away in 2023, living a long life, with Lempel living to be 86 years old and Ziv living to be 91 years old.</p>
<h1 id="Origin"><a href="#Origin" class="headerlink" title="Origin"></a><strong>Origin</strong></h1><p>Data compression can be divided into two types: lossy compression, such as MP3, JPEG, where some unimportant data is deleted during compression, and lossless compression, where binary bits magically disappear, making files significantly smaller, facilitating storage and transmission.</p>
<p>In 1948, after Claude Shannon founded information theory, everyone has been working on one thing: how to find the optimal coding to compress a piece of information.</p>
<p>Shannon and Fano were the first to propose the <strong>Shannon-Fano coding</strong>.<br><img src="https://images.hxzhouh.com/blog-images/2024/04/d34b40c3bd6dba146e405c6328ffe57a.png" alt="Pasted image 20240425184027"></p>
<p>It constructs a binary tree from top to bottom by grouping symbols.<br><img src="https://images.hxzhouh.com/blog-images/2024/04/5fa4f771858988a54a24f909877cec3a.png" alt="Pasted image 20240425183959"></p>
<p>However, this method is not the optimal solution and the encoding is not a prefix code, making it prone to ambiguity.</p>
<p>Later, while teaching information theory at MIT, Fano challenged his students: either take the final exam or improve existing data compression algorithms.</p>
<p>A graduate student named Huffman didn’t like exams, so he chose the latter path.</p>
<p>Huffman didn’t know that even the famous Shannon struggled with this problem. He researched for several months, developed various methods, but none worked.</p>
<p>Just as he was about to give up and throw his notes into the trash, a wonderful and elegant algorithm crossed his mind: build a binary tree from bottom to top based on the frequency of characters, which is the famous Huffman algorithm.</p>
<p>Huffman’s algorithm is called “optimal coding” and achieves two goals:</p>
<p>(1) No character encoding is a prefix of another character encoding.</p>
<p>(2) The total length of the information encoding is minimized.</p>
<p>Although the Huffman algorithm is excellent, it has a huge limitation: <strong>it requires obtaining the probability of each character appearing first</strong>, and then compression encoding can be done, which is often impossible in many cases.</p>
<p>In the 1970s, with the emergence of the Internet, this problem became more prominent.</p>
<p>Is it possible to compress data while reading it?</p>
<h1 id="Breakthrough"><a href="#Breakthrough" class="headerlink" title="Breakthrough"></a><strong>Breakthrough</strong></h1><p>Ziv and Lempel from the Technion-Israel Institute of Technology jointly challenged this problem.</p>
<p>The two were a good team, with Ziv being good at statistics and information theory, while Lempel excelled in Boolean algebra and computer science.</p>
<p><img src="https://images.hxzhouh.com/blog-images/2024/04/1324380a2e44a3dac2eba5ee62ab490e.png" alt="Pasted image 20240425184054"></p>
<p>In 1977, they both came to Bell Labs for academic sabbaticals.</p>
<p>Academic sabbatical, also known as “intellectual leave,” gives you a long period of</p>
<p> leave (like six months) after working for a few years, during which you can do whatever you want, and it’s paid.</p>
<p>The sabbaticals of the big shots are interesting. For example, Ken Thompson, the inventor of Unix, returned to his alma mater, Berkeley, during his sabbatical and spread Unix there, inspiring Bill Joy and others to develop BSD.</p>
<p>Ziv and Lempel were similar. They went to Bell Labs in the United States for academic sabbaticals and co-authored a paper during their “sabbatical”: “A Universal Algorithm for Sequential Data Compression,” proposing an algorithm based on a “sliding window,” which does not directly consider character frequencies but instead finds repeated data blocks (such as strings, byte sequences, etc.) and references the positions where these data blocks appeared previously.<br><img src="https://images.hxzhouh.com/blog-images/2024/04/6e5efd3753463265af8a4e84c007e4ca.png" alt="Pasted image 20240425184125"><br>This algorithm is LZ77, which is applicable to any type of data, requires no preprocessing (statistical character appearance probabilities), and achieves extremely high compression ratios with just one pass.</p>
<p>The following year, they continued their efforts and improved LZ77 to become LZ78, which could perfectly reconstruct data from compressed data and was more efficient than previous algorithms.</p>
<h1 id="Chaos"><a href="#Chaos" class="headerlink" title="Chaos"></a><strong>Chaos</strong></h1><p>An invaluable treasure like the LZ algorithm remained in the theoretical realm for several years without widespread use.</p>
<p>It wasn’t until 1984, when Terry Welch of DEC created the <strong>LZW algorithm</strong> based on LZ, which was used in Unix’s <strong>compress</strong> program.</p>
<p>With the widespread dissemination of Unix, the LZ algorithm began to enter the fast lane of rapid development.</p>
<p>However, it also entered an era of chaotic competition.</p>
<p>In 1985, Thom Henderson, while downloading files from BBS, found it tedious to download one by one, as dial-up internet was too slow. So he wrote a software called <strong>ARC</strong>, which could compress multiple files into one, making it much more convenient.</p>
<p>In 1986, Phillip Katz discovered ARC, liked it, but felt that the compression speed was too slow. So he rolled up his sleeves, rewrote the key compression and decompression parts in assembly language, and created <strong>PKARC</strong>, which he started selling.<br><img src="https://images.hxzhouh.com/blog-images/2024/04/da855761fb63597eb7de689e7a5db345.png" alt="Pasted image 20240425184142"><br><img src="https://images.hxzhouh.com/blog-images/2024/04/5dea706890fb605ba66eebaae69a27ad.png" alt="Pasted image 20240425184148"><br>When Thom Henderson saw his business being snatched away, he sued Phillip Katz, and the reasons were sufficient: the comments and spelling errors in your PKARC are the same as my ARC, you’re plagiarizing! Also, while my ARC is open source, the protocol specifies that you can only view it, not modify it!</p>
<p>In the end, ARC won the lawsuit, and Phillip Katz paid tens of thousands of dollars in damages.</p>
<p>Genius Phillip Katz was naturally not satisfied. He studied the LZ77 algorithm and the Huffman algorithm, combined them, and created a new compression algorithm (<strong>deflate</strong>) and a new file format (<strong>zip</strong>), as well as the new software <strong>PKZIP</strong>.<br><img src="https://images.hxzhouh.com/blog-images/2024/04/9f2582c7f818ccae3a8c3944585fda8a.png" alt="Pasted image 20240425184157"><br>PKZIP quickly outperformed ARC in both compression ratio and decompression speed, and quickly dominated the DOS era.</p>
<p>Since the ZIP format was open, the open-source info-zip group also released the open-source, free <strong>unzip</strong> and <strong>zip</strong>, implementing the deflate algorithm.</p>
<p>Later, Jean-loup Gailly and Mark Adler developed the famous <strong>gzip</strong> (file format + utility) based on deflate, replacing compress on Unix.<br><img src="https://images.hxzhouh.com/blog-images/2024/04/de55eace3bd613ed7147e1313877cc8b.png" alt="Pasted image 20240425184253"></p>
<p>gzip is the HTTP compression format seen at the beginning of the article.</p>
<p>In 1991, Nico Mak felt dissatisfied with the command line of PKZIP, so he developed a front-end for Windows 3.1 based on PKZIP (later replaced by the open-source info-zip), allowing people to compress files using a graphical interface. This is the famous WinZip.<br><img src="https://images.hxzhouh.com/blog-images/2024/04/05c9824cdc3df564ea258ac5afdc3994.png" alt="Pasted image 20240425184442"><br><img src="https://images.hxzhouh.com/blog-images/2024/04/155a024cec52f0c9b8e2c5bd10400acf.png" alt="Pasted image 20240425184447"><br>Despite WinZip’s success, it was still “parasitic” on the Windows platform.</p>
<p>Users find that WinZip has an exquisite interface and is user-friendly. There is no need to remember those annoying parameters and compression can be completed with a few clicks of the mouse.<br>WinZip quickly took over all PCs and became one of the most popular shareware programs in the 1990s.<br>Windows intervened and simply integrated Zip functionality into the operating system, ending everything.</p>
<h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a><strong>Conclusion</strong></h1><p>From LZ77 to LZW, compress, Deflate, gzip… Lossless compression algorithms have been continuously patched and gradually formed into a huge family. However, no matter how they change, their principles and ideas are not much different from the original LZ algorithm.</p>
<p>These algorithms help us compress images, compress text, compress content transmitted over the Internet, and have become an indispensable part of our daily lives.</p>
<p>It’s no exaggeration to say that the LZ algorithm and its descendants have dominated the world.</p>
]]></content>
      <categories>
        <category>compute</category>
      </categories>
      <tags>
        <tag>history</tag>
        <tag>compute</tag>
      </tags>
  </entry>
  <entry>
    <title>Go1.22 a new math  lib</title>
    <url>/2024/04/18/Go1.22%20a%20new%20math%20%20lib/</url>
    <content><![CDATA[<blockquote>
<p>This article is first published in the medium MPP plan. If you are a medium user, please follow me in <a href="https://medium.hxzhouh.com/">medium</a>. Thank you very much.</p>
</blockquote>
<h1 id="Go1-22-a-new-math-lib"><a href="#Go1-22-a-new-math-lib" class="headerlink" title="Go1.22 a new math lib"></a>Go1.22 a new math lib</h1><p>The inaugural v2 version of the standard library in Go, hails from the esteemed <a href="https://github.com/golang/go/discussions/60751">math&#x2F;rand&#x2F;v2</a> repository. It is set to make its grand debut with the official release of Go1.22, poised to serve as a reliable and production-ready resource.  </p>
<span id="more"></span> 

<p><img src="https://images.hxzhouh.com/blog-images/2024/02/bb79ed583d1402f7ca9b2ff886f939e5.jpeg" alt="640"></p>
<h2 id="Reasons"><a href="#Reasons" class="headerlink" title="Reasons"></a>Reasons</h2><ol>
<li>The original <code>math/rand</code> library in the standard package had numerous deficiencies and areas for improvement. These included outdated generators, slow algorithms (performance), and unfortunate conflicts with <code>crypto/rand.Read</code>, among other issues.</li>
<li>There is a plan in place to upgrade the v2 versions of standard libraries. Starting with <code>math</code> allows for the accumulation of experience and resolving tooling ecosystem challenges (such as support from tools like gopls and goimports for v2 packages). Subsequent iterations can then address higher-risk packages, like <code>sync/v2</code> or <code>encoding/json/v2</code>.</li>
<li>Go1 requires compatibility guarantees, making it impractical to directly modify the original library. The issues with <code>math/rand</code> are also more prominent and evident.</li>
</ol>
<h2 id="change-list"><a href="#change-list" class="headerlink" title="change list"></a>change list</h2><ul>
<li>Removed <code>Rand.Read</code> and the top-level <code>Read</code> function.</li>
<li>Removed <code>Source.Seed</code>, <code>Rand.Seed</code>, and the top-level <code>Seed</code> function (meaning that top-level functions like <code>Int</code> will always use random seeding).</li>
<li>Removed <code>Source64</code>, as <code>Source</code> now provides the <code>Uint64</code> method, making the original methods unnecessary.</li>
<li>Utilized a more direct implementation for <code>Float32</code> and <code>Float64</code>. For example, in the case of <code>Float64</code>, the original implementation used <code>float64(r.Int63()) / (1&lt;&lt;63)</code>. However, this had a problem of occasionally rounding to <code>1.0</code>, while <code>Float64</code> should never round. The improvement involves changing it to <code>float64(r.Int63n(1&lt;&lt;53)) / (1&lt;&lt;53)</code>, which avoids the rounding issue.</li>
<li>Implemented <code>Rand.Perm</code> using <code>Rand.Shuffle</code>. This improves efficiency and ensures only one implementation.</li>
<li>Renamed <code>Int31</code>, <code>Int31n</code>, <code>Int63</code>, and <code>Int64n</code> to <code>Int32</code>, <code>Int32n</code>, <code>Int64</code>, and <code>Int64n</code>, respectively. These names were unnecessary and confusing.</li>
<li>Added <code>Uint32</code>, <code>Uint32n</code>, <code>Uint64</code>, <code>Uint64n</code>, <code>Uint</code>, and <code>Uintn</code> as top-level functions and methods on <code>Rand</code>.</li>
<li>Utilized Lemire’s algorithm in <code>Intn</code>, <code>Uintn</code>, <code>Int32n</code>, <code>Uint32n</code>, <code>Int64n</code>, and <code>Uint64n</code>, resulting in improved performance.</li>
<li>Introduced a new implementation of <code>Source</code> called PCG-DXSM, including related APIs like <code>NewPCG</code>.</li>
<li>Removed the Mitchell &amp; Reeds LFSR generator and <code>NewSource</code>.</li>
</ul>
<h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><h3 id="Read-Seed"><a href="#Read-Seed" class="headerlink" title="Read &amp; Seed"></a>Read &amp; Seed</h3><p> The functions <code>Read</code> and <code>Seed</code> have been removed. It is recommended to use <code>crypto/rand</code>‘s <code>Read</code> function instead.<br> <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;crypto/rand&quot;</span></span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> b := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">3</span>)</span><br><span class="line"> _, err := rand.Read(b)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="built_in">panic</span>(err)</span><br><span class="line"> &#125;</span><br><span class="line"> fmt.Printf(<span class="string">&quot;hxzhouh: %v\n&quot;</span>, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>output：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hxzhouh: [48 71 122]</span><br></pre></td></tr></table></figure>

<p>For the <code>Seed</code> function, it is advised to call <code>New(NewSource(seed))</code> in order to reinitialize the random number generator.</p>
<h3 id="internal"><a href="#internal" class="headerlink" title="internal"></a>internal</h3><p>The functions <code>N</code>, <code>IntN</code>, and <code>UintN</code> now utilize a novel implementation algorithm. Interested individuals are encouraged to allocate extra time to examine it in detail:<a href="https://lemire.me/blog/2016/06/27/a-fast-alternative-to-the-modulo-reduction/">A fast alternative to the modulo reduction</a></p>
<p>The functions <code>Intn</code>, <code>Int31</code>, <code>Int31n</code>, <code>Int63</code>, and <code>Int64n</code> have been renamed as follows: <code>IntN</code>, <code>Int32</code>, <code>Int32N</code>, <code>Int64</code>, and <code>Int64N</code>, respectively. </p>
<p>Additionally, new functions <code>Uint32</code>, <code>Uint32N</code>, <code>Uint64</code>, <code>Uint64N</code>, <code>Uint</code>, and <code>UintN</code> have been introduced to generate random unsigned integers. They have also been added as corresponding functions within the <code>Rand</code> structure.</p>
<p>The newly added function <code>N</code> generates random numbers of arbitrary integer types. This function is implemented using generics, and the following integer types are its type parameters:</p>
<ul>
<li><code>int</code></li>
<li><code>int8</code></li>
<li><code>int16</code></li>
<li><code>int32</code></li>
<li><code>int64</code></li>
</ul>
<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary:"></a>Summary:</h1><p>Today, we have shared and further described the new <code>math/rand/v2</code> library, highlighting key changes including performance optimization (algorithm rewrite), standardization, and additions of new random generators.</p>
<p>Given the substantial amount of information covered, we have selected and presented only the aspects that are essential for understanding and using the library. However, for those who are interested in delving deeper, it is recommended to refer to the full documentation of<a href="https://pkg.go.dev/math/rand/v2@master">https:&#x2F;&#x2F;pkg.go.dev&#x2F;math&#x2F;rand&#x2F;v2@master</a></p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Secure Communication with gRPC: From SSL/TLS Certification to SAN Certification</title>
    <url>/2024/05/13/golang%20action%20grpc%20san/</url>
    <content><![CDATA[<p><img src="https://images.hxzhouh.com/blog-images/2024/05/4976a194a8daca00ff6991a866c2ee53.png" alt="Pasted image 20240512192344"><br><a href="https://grpc.io/">gRPC</a> is a high-performance RPC framework developed by Google, which by default includes two authentication methods:</p>
<ul>
<li>SSL&#x2F;TLS Authentication</li>
<li>Token-based Authentication<br>Without the activation of the certificate, <code>gRPC</code> service and clients communicate in plaintext, leaving the information at risk of being intercepted by any third party. To ensure <code>gRPC</code> communication is not intercepted, altered or counterfeited by a third party, the server can activate <code>TLS</code> encryption features.<span id="more"></span></li>
</ul>
<blockquote>
<p>This article is first published in the medium MPP plan. If you are a medium user, please follow me in <a href="https://medium.hxzhouh.com/">medium</a>. Thank you very much.</p>
</blockquote>
<p>Starting from go 1.15 version, <a href="https://golang.org/doc/go1.15#commonname">depreciation of CommonName</a> began, therefore, it is advised to use <code>SAN</code> certificates. If keys, CSR, and certificates are generated in the previous way through OpenSSL, the following error occurs:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpc error: code = Unavailable desc = connection error: desc = &quot;transport: authentication handshake failed: x509: certificate relies on legacy Common Name field, use SANs instead&quot;|</span><br></pre></td></tr></table></figure>

<h2 id="What-is-SAN"><a href="#What-is-SAN" class="headerlink" title="What is SAN"></a>What is <code>SAN</code></h2><p> <em><strong>SAN (Subject Alternative Name)</strong></em> is defined as an extension in the <code>SSL</code> standard <code>x509</code>. An <code>SSL</code> certificate with the <code>SAN</code> field can expand the domain names it supports, allowing a single certificate to support multiple different domain name resolutions.</p>
<p>Put simply, a SAN certificate can contain multiple complete CN (CommonName), so with a single certificate purchase, you can use it on multiple URLs. For example, the certificate of skype.com, it has many SANs.</p>
<h2 id="Create-a-SAN-certificate-locally"><a href="#Create-a-SAN-certificate-locally" class="headerlink" title="Create a SAN certificate locally"></a>Create a SAN certificate locally</h2><p>Next, we will use an example to generate a client &amp; server bilateral SAN certificate locally.</p>
<p>Assume the hostname of the gRPC server is <code>localhost</code>, and it is required to configure tls bilateral authentication encryption for the communication between the gRPC server and clients.</p>
<ol>
<li>Create <code>openssl.conf</code> to store relevant information</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[req]</span><br><span class="line"></span><br><span class="line">req_extensions = v3_req</span><br><span class="line"></span><br><span class="line">distinguished_name = req_distinguished_name</span><br><span class="line"></span><br><span class="line">prompt = no</span><br><span class="line"></span><br><span class="line">[req_distinguished_name]</span><br><span class="line"></span><br><span class="line">countryName = CN</span><br><span class="line"></span><br><span class="line">stateOrProvinceName = state</span><br><span class="line"></span><br><span class="line">localityName = city</span><br><span class="line"></span><br><span class="line">organizationName = huizhou92</span><br><span class="line"></span><br><span class="line">commonName = hello-world</span><br><span class="line"></span><br><span class="line">[v3_req]</span><br><span class="line"></span><br><span class="line">subjectAltName = @alt_names</span><br><span class="line"></span><br><span class="line">[alt_names]</span><br><span class="line"></span><br><span class="line">DNS.1 = localhost</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>The content is similar to when creating a ca earlier.</p>
<ol start="2">
<li>Generate ca root certificate</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">openssl req -x509 -newkey rsa:4096 -keyout ca.key -out ca.crt -subj &quot;/CN=localhost&quot; -days 3650 -nodes</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>-nodes is to ignore the password, making it convenient to use, but please note, this may reduce the security of the private key, as anyone can read the unencrypted private key.</p>
<ol start="3">
<li>Generate server certificate</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">openssl req -newkey rsa:2048 -nodes -keyout server.key -out server.csr -subj &quot;/CN=localhost&quot; -config openssl.cnf</span><br><span class="line">openssl x509 -req -in server.csr -out server.crt -CA ca.crt -CAkey ca.key -CAcreateserial -days 365 -extensions v3_req -extfile openssl.cnf</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>Generate client certificate</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">openssl req -newkey rsa:2048 -nodes -keyout client.key -out client.csr -subj &quot;/CN=localhost&quot; -config openssl.cnf</span><br><span class="line">openssl x509 -req -in client.csr -out client.crt -CA ca.crt -CAkey ca.key -CAcreateserial -days 365 -extensions v3_req -extfile openssl.cnf</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>The final generated result is as follows</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">➜ keys git:(day1) ✗ ls</span><br><span class="line">ca.crt ca.key ca.srl client.crt client.csr client.key openssl.cnf server.crt server.csr server.key</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h2><p>We define the simplest grpc interface.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">// helloworld.proto</span><br><span class="line"></span><br><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">option go_package = &quot;./api;api&quot;;</span><br><span class="line"></span><br><span class="line">package api;</span><br><span class="line"></span><br><span class="line">// The greeting service definition.</span><br><span class="line"></span><br><span class="line">service Greeter &#123;</span><br><span class="line"></span><br><span class="line">// Sends a greeting</span><br><span class="line"></span><br><span class="line">rpc SayHello (HelloRequest) returns (HelloReply) &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// The request message containing the user&#x27;s name.</span><br><span class="line"></span><br><span class="line">message HelloRequest &#123;</span><br><span class="line"></span><br><span class="line">string name = 1;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// The response message containing the greetings</span><br><span class="line"></span><br><span class="line">message HelloReply &#123;</span><br><span class="line"></span><br><span class="line">string message = 1;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Server-implementation"><a href="#Server-implementation" class="headerlink" title="Server implementation"></a>Server implementation</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">&quot;context&quot;</span>  </span><br><span class="line">    <span class="string">&quot;crypto/tls&quot;</span></span><br><span class="line">    <span class="string">&quot;crypto/x509&quot;</span>    </span><br><span class="line">    <span class="string">&quot;fmt&quot;</span>    </span><br><span class="line">    <span class="string">&quot;google.golang.org/genproto/googleapis/rpc/errdetails&quot;</span>    </span><br><span class="line">    <span class="string">&quot;google.golang.org/grpc&quot;</span>    </span><br><span class="line">    <span class="string">&quot;google.golang.org/grpc/codes&quot;</span>    </span><br><span class="line">    <span class="string">&quot;google.golang.org/grpc/credentials&quot;</span>    </span><br><span class="line">    <span class="string">&quot;google.golang.org/grpc/status&quot;</span>    </span><br><span class="line">    <span class="string">&quot;hello-world/api&quot;</span>    </span><br><span class="line">    <span class="string">&quot;log&quot;</span>    </span><br><span class="line">    <span class="string">&quot;net&quot;</span>    </span><br><span class="line">    <span class="string">&quot;os&quot;</span>    </span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">type</span> server <span class="keyword">struct</span> &#123;  </span><br><span class="line">    api.UnimplementedGreeterServer  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *server)</span></span> SayHello(ctx context.Context, in *api.HelloRequest) (*api.HelloReply, <span class="type">error</span>) &#123;  </span><br><span class="line">    log.Printf(<span class="string">&quot;Received: %v&quot;</span>, in.GetName())  </span><br><span class="line">    <span class="keyword">select</span> &#123;  </span><br><span class="line">    <span class="keyword">case</span> &lt;-ctx.Done():  </span><br><span class="line">       log.Println(<span class="string">&quot;client timeout return&quot;</span>)  </span><br><span class="line">       <span class="keyword">return</span> <span class="literal">nil</span>, ErrorWithDetails()  </span><br><span class="line">    <span class="keyword">case</span> &lt;-time.After(<span class="number">3</span> * time.Second):  </span><br><span class="line">       <span class="keyword">return</span> &amp;api.HelloReply&#123;Message: <span class="string">&quot;Hello &quot;</span> + in.GetName()&#125;, <span class="literal">nil</span>  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">  </span><br><span class="line">    certificate, err := tls.LoadX509KeyPair(<span class="string">&quot;./keys/server.crt&quot;</span>, <span class="string">&quot;./keys/server.key&quot;</span>)  </span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;  </span><br><span class="line">       log.Fatalf(<span class="string">&quot;Failed to load key pair: %v&quot;</span>, err)  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">// 通过CA创建证书池  </span></span><br><span class="line">    certPool := x509.NewCertPool()  </span><br><span class="line">    ca, err := os.ReadFile(<span class="string">&quot;./keys/ca.crt&quot;</span>)  </span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;  </span><br><span class="line">       log.Fatalf(<span class="string">&quot;Failed to read ca: %v&quot;</span>, err)  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 将来自CA的客户端证书附加到证书池  </span></span><br><span class="line">    <span class="keyword">if</span> ok := certPool.AppendCertsFromPEM(ca); !ok &#123;  </span><br><span class="line">       log.Fatalf(<span class="string">&quot;Failed to append ca certificate&quot;</span>)  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    opts := []grpc.ServerOption&#123;  </span><br><span class="line">       grpc.Creds( <span class="comment">// 为所有传入的连接启用TLS  </span></span><br><span class="line">          credentials.NewTLS(&amp;tls.Config&#123;  </span><br><span class="line">             ClientAuth:   tls.RequireAndVerifyClientCert,  </span><br><span class="line">             Certificates: []tls.Certificate&#123;certificate&#125;,  </span><br><span class="line">             ClientCAs:    certPool,  </span><br><span class="line">          &#125;,  </span><br><span class="line">          )),  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    listen, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="string">&quot;0.0.0.0:%d&quot;</span>, <span class="number">50051</span>))  </span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;  </span><br><span class="line">       log.Fatalf(<span class="string">&quot;failed to listen %d port&quot;</span>, <span class="number">50051</span>)  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">// 通过传入的TLS服务器凭证创建新的gRPC服务实例  </span></span><br><span class="line">    s := grpc.NewServer(opts...)  </span><br><span class="line">    api.RegisterGreeterServer(s, &amp;server&#123;&#125;)  </span><br><span class="line">    log.Printf(<span class="string">&quot;server listening at %v&quot;</span>, listen.Addr())  </span><br><span class="line">    <span class="keyword">if</span> err := s.Serve(listen); err != <span class="literal">nil</span> &#123;  </span><br><span class="line">       log.Fatalf(<span class="string">&quot;Failed to serve: %v&quot;</span>, err)  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ErrorWithDetails</span><span class="params">()</span></span> <span class="type">error</span> &#123;  </span><br><span class="line">    st := status.Newf(codes.Internal, fmt.Sprintf(<span class="string">&quot;something went wrong: %v&quot;</span>, <span class="string">&quot;api.Getter&quot;</span>))  </span><br><span class="line">    v := &amp;errdetails.PreconditionFailure_Violation&#123; <span class="comment">//errDetails  </span></span><br><span class="line">       Type:        <span class="string">&quot;test&quot;</span>,  </span><br><span class="line">       Subject:     <span class="string">&quot;12&quot;</span>,  </span><br><span class="line">       Description: <span class="string">&quot;32&quot;</span>,  </span><br><span class="line">    &#125;  </span><br><span class="line">    br := &amp;errdetails.PreconditionFailure&#123;&#125;  </span><br><span class="line">    br.Violations = <span class="built_in">append</span>(br.Violations, v)  </span><br><span class="line">    st, _ = st.WithDetails(br)  </span><br><span class="line">    <span class="keyword">return</span> st.Err()  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We directly run the server <code>go run main.go</code></p>
<h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><p>First, we use a request without a certificate</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test_server_SayHello_No_Cert</span><span class="params">(t *testing.T)</span></span> &#123;  </span><br><span class="line">    conn, err := grpc.Dial(<span class="string">&quot;localhost:50051&quot;</span>, grpc.WithTransportCredentials(insecure.NewCredentials()))  </span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;  </span><br><span class="line">       log.Fatalf(<span class="string">&quot;Connect to %s failed&quot;</span>, <span class="string">&quot;localhost:50051&quot;</span>)  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">defer</span> conn.Close()  </span><br><span class="line">  </span><br><span class="line">    client := api.NewGreeterClient(conn)  </span><br><span class="line">    <span class="comment">// 创建带有超时时间的上下文, cancel可以取消上下文  </span></span><br><span class="line">    ctx, cancel := context.WithTimeout(context.Background(), time.Second*<span class="number">5</span>)  </span><br><span class="line">    <span class="keyword">defer</span> cancel()  </span><br><span class="line">    <span class="comment">// 业务代码处理部分 ...    r, err := client.SayHello(ctx, &amp;api.HelloRequest&#123;Name: &quot;Hello&quot;&#125;)  </span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;  </span><br><span class="line">       log.Printf(<span class="string">&quot;Failed to greet, error: %v&quot;</span>, err)  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">       log.Printf(<span class="string">&quot;Greeting: %v&quot;</span>, r.GetMessage())  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Output</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2024/05/12 19:18:51 Failed to greet, error: rpc error: code = Unavailable desc = connection error: desc = &quot;error reading server preface: EOF&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Service is unavailable<br>Now, let’s try a request carrying the certificate</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test_server_SayHello</span><span class="params">(t *testing.T)</span></span> &#123;  </span><br><span class="line">    certificate, err := tls.LoadX509KeyPair(<span class="string">&quot;./keys/client.crt&quot;</span>, <span class="string">&quot;./keys/client.key&quot;</span>)  </span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;  </span><br><span class="line">       log.Fatalf(<span class="string">&quot;Failed to load client key pair, %v&quot;</span>, err)  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    certPool := x509.NewCertPool()  </span><br><span class="line">    ca, err := os.ReadFile(<span class="string">&quot;./keys/ca.crt&quot;</span>)  </span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;  </span><br><span class="line">       log.Fatalf(<span class="string">&quot;Failed to read %s, error: %v&quot;</span>, <span class="string">&quot;./keys/ca.crt&quot;</span>, err)  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> ok := certPool.AppendCertsFromPEM(ca); !ok &#123;  </span><br><span class="line">       log.Fatalf(<span class="string">&quot;Failed to append ca certs&quot;</span>)  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    opts := []grpc.DialOption&#123;  </span><br><span class="line">       grpc.WithTransportCredentials(credentials.NewTLS(  </span><br><span class="line">          &amp;tls.Config&#123;  </span><br><span class="line">             ServerName:   <span class="string">&quot;localhost&quot;</span>,  </span><br><span class="line">             Certificates: []tls.Certificate&#123;certificate&#125;,  </span><br><span class="line">             RootCAs:      certPool,  </span><br><span class="line">          &#125;)),  </span><br><span class="line">    &#125;  </span><br><span class="line">    conn, err := grpc.Dial(<span class="string">&quot;localhost:50051&quot;</span>, opts...)  </span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;  </span><br><span class="line">       log.Fatalf(<span class="string">&quot;Connect to %s failed&quot;</span>, <span class="string">&quot;localhost:50051&quot;</span>)  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">defer</span> conn.Close()  </span><br><span class="line">  </span><br><span class="line">    client := api.NewGreeterClient(conn)  </span><br><span class="line"></span><br><span class="line">    ctx, cancel := context.WithTimeout(context.Background(), time.Second*<span class="number">5</span>)  </span><br><span class="line">    <span class="keyword">defer</span> cancel()  </span><br><span class="line">    r, err := client.SayHello(ctx, &amp;api.HelloRequest&#123;Name: <span class="string">&quot;Hello&quot;</span>&#125;)  </span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;  </span><br><span class="line">       log.Printf(<span class="string">&quot;Failed to greet, error: %v&quot;</span>, err)  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">       log.Printf(<span class="string">&quot;Greeting: %v&quot;</span>, r.GetMessage())  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Output</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=== RUN Test_server_SayHello</span><br><span class="line">2024/05/12 19:20:17 Greeting: Hello Hello</span><br></pre></td></tr></table></figure>
<h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><ol>
<li>We can use tls to implement gRPC encryption communication,</li>
<li>Starting from go1.15, the use of CA is not recommended, instead SAN certificates are utilized.</li>
</ol>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>grpc</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS 0907-0913</title>
    <url>/2022/09/30/arts/ARTS%200907-0913/</url>
    <content><![CDATA[<p>ARTS 是陈浩（网名左耳朵耗子）在极客时间专栏里发起的一个活动，目的是通过分享的方式来坚持学习。</p>
<blockquote>
<p>每人每周写一个 ARTS：</p>
<p>Algorithm 是一道算法题，</p>
<p>Review 是读一篇英文文章，</p>
<p>Technique&#x2F;Tips 是分享一个小技术，</p>
<p>Share 是分享一个观点。</p>
</blockquote>
<h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm:"></a>Algorithm:</h1><ul>
<li>leetcode <a href="https://leetcode-cn.com/problems/reverse-linked-list/">206 </a></li>
<li>leetcode <a href="https://leetcode-cn.com/problems/linked-list-cycle/solution/">141</a></li>
<li>leetcode 19</li>
</ul>
<h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://tech.meituan.com/2020/08/13/openstack-to-kubernetes-in-meituan.html">Kubernetes如何改变美团的云基础设施？</a></p>
]]></content>
      <categories>
        <category>arts</category>
      </categories>
      <tags>
        <tag>arts</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS 0914-0920</title>
    <url>/2023/09/21/arts/ARTS%200914-0920/</url>
    <content><![CDATA[<p>RTS 是陈浩（网名左耳朵耗子）在极客时间专栏里发起的一个活动，目的是通过分享的方式来坚持学习。</p>
<blockquote>
<p>每人每周写一个 ARTS：</p>
<p>Algorithm 是一道算法题，</p>
<p>Review 是读一篇英文文章，</p>
<p>Technique&#x2F;Tips 是分享一个小技术，</p>
<p>Share 是分享一个观点。</p>
</blockquote>
<h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm:"></a>Algorithm:</h1><p>leetCode: </p>
<p>82</p>
<p>83</p>
<h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><ul>
<li><a href="https://blog.pixielabs.ai/blog/ebpf-function-tracing/post/">https://blog.pixielabs.ai/blog/ebpf-function-tracing/post/</a></li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>arts</category>
      </categories>
      <tags>
        <tag>arts</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS-2023-38</title>
    <url>/2023/09/22/arts/ARTS-2023-38/</url>
    <content><![CDATA[<h1 id="ARTS-2023-38"><a href="#ARTS-2023-38" class="headerlink" title="ARTS-2023-38"></a>ARTS-2023-38</h1><blockquote>
<p>ARTS 是陈浩（网名左耳朵耗子）在极客时间专栏里发起的一个活动，目的是通过分享的方式来坚持学习。 每人每周写一个 ARTS： Algorithm 是一道算法题， Review 是读一篇英文文章， Technique&#x2F;Tips 是分享一个小技术， Share 是分享一个观点。</p>
</blockquote>
<span id="more"></span>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><hr>
<p>#算法 #leetcode</p>
<p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/description/?envType=study-plan-v2&envId=top-interview-150">leetCode 122  </a><br>用[[动态规划]]  来做这个题目</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxProfit</span><span class="params">(prices []<span class="type">int</span>)</span></span> (ans <span class="type">int</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(prices); i++ &#123;</span><br><span class="line">        ans += max(<span class="number">0</span>, prices[i]-prices[i<span class="number">-1</span>])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>[[55. 跳跃游戏]]</p>
<h2 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h2><hr>
<p>#好文 #阅读</p>
<p><a href="https://go.googlesource.com/proposal/+/master/design/11502-securitypolicy.md">https://go.googlesource.com/proposal/+/master/design/11502-securitypolicy.md</a></p>
<p>最近开始看 go 的一些设计文档， 考古的， 新的都看，看着现在一些熟悉的东西以前是怎么被设计出来的， 很有意思</p>
<h2 id="Technique-Tips"><a href="#Technique-Tips" class="headerlink" title="Technique&#x2F;Tips"></a>Technique&#x2F;Tips</h2><hr>
<p>#工具  </p>
<p>[[omnivore]] 一个开源的稍后阅读软件，有点类似readwise 的reader，目前属于起步阶段把，有活跃的开发圈子，会一直关注这个软件。</p>
<ul>
<li><a href="https://linux.cn/article-16102-1.html">https://linux.cn/article-16102-1.html</a></li>
<li><a href="https://blog.omnivore.app/p/getting-started-with-omnivore">https://blog.omnivore.app/p/getting-started-with-omnivore</a></li>
</ul>
<p>一键屏蔽Twitter上的 黄推，受够了。。<br><a href="https://github.com/daymade/Twitter-Block-Porn">https://github.com/daymade/Twitter-Block-Porn</a></p>
<h2 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h2><hr>
<p>#碎碎念 #观点</p>
]]></content>
      <categories>
        <category>arts</category>
      </categories>
      <tags>
        <tag>arts</tag>
        <tag>leetcode</tag>
        <tag>算法</tag>
        <tag>好文</tag>
        <tag>阅读</tag>
        <tag>工具</tag>
        <tag>碎碎念</tag>
        <tag>观点</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS-2023-40</title>
    <url>/2023/10/02/arts/ARTS-2023-40/</url>
    <content><![CDATA[<blockquote>
<p>ARTS 是陈浩（网名左耳朵耗子）在极客时间专栏里发起的一个活动，目的是通过分享的方式来坚持学习。 每人每周写一个 ARTS： Algorithm 是一道算法题， Review 是读一篇英文文章， Technique&#x2F;Tips 是分享一个小技术， Share 是分享一个观点。</p>
</blockquote>
<span id="more"></span>

<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>#算法 #leetcode</p>
<ol>
<li><a href="https://leetcode.cn/problems/excel-sheet-column-title/">168. Excel表列名称</a><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">convertToTitle</span><span class="params">(columnNumber <span class="type">int</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">var</span> res <span class="type">string</span></span><br><span class="line"><span class="keyword">for</span> columnNumber &gt; <span class="number">0</span> &#123;</span><br><span class="line">	columnNumber-- <span class="comment">// 0-25</span></span><br><span class="line">	res = <span class="type">string</span>(<span class="type">rune</span>(columnNumber%<span class="number">26</span>+<span class="string">&#x27;A&#x27;</span>)) + res</span><br><span class="line">	columnNumber /= <span class="number">26</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
就是把 int 转26进制，辗转相除法？ 好像是这个名字把？</li>
</ol>
<h2 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h2><h2 id="好文-阅读1-https-buildkite-com-blog-goodbye-integers-hello-uuids使用uuid-作为数据库的主键Id，兼顾性能以及可用性，mongodb-的-uuid-前八位是时间戳，可以用来进行范围查询。-Technique-Tips"><a href="#好文-阅读1-https-buildkite-com-blog-goodbye-integers-hello-uuids使用uuid-作为数据库的主键Id，兼顾性能以及可用性，mongodb-的-uuid-前八位是时间戳，可以用来进行范围查询。-Technique-Tips" class="headerlink" title="#好文 #阅读1. https://buildkite.com/blog/goodbye-integers-hello-uuids使用uuid 作为数据库的主键Id，兼顾性能以及可用性，mongodb 的 uuid 前八位是时间戳，可以用来进行范围查询。## Technique&#x2F;Tips"></a>#好文 #阅读<br>1. <a href="https://buildkite.com/blog/goodbye-integers-hello-uuids">https://buildkite.com/blog/goodbye-integers-hello-uuids</a><br>使用uuid 作为数据库的主键Id，兼顾性能以及可用性，<br>mongodb 的 uuid 前八位是时间戳，可以用来进行范围查询。<br>## Technique&#x2F;Tips</h2><p>#工具  </p>
<ol>
<li>#浏览器插件 <a href="https://www.trancy.org/zh-cn">trancy</a> 一个沉浸式的翻译插件，集成了ai功能，目前这种插件越来越多了。</li>
</ol>
<h2 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h2><p>#碎碎念 #观点</p>
<ol>
<li>我要坚持写长文博客。。</li>
<li>看到好看的博客，还是要收藏起来，我的记忆力应该只有七秒。</li>
</ol>
]]></content>
      <categories>
        <category>arts</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
        <tag>好文</tag>
        <tag>阅读</tag>
        <tag>工具</tag>
        <tag>碎碎念</tag>
        <tag>观点</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS-2023-39</title>
    <url>/2023/09/27/arts/ARTS-2023-39/</url>
    <content><![CDATA[<blockquote>
<p>ARTS 是陈浩（网名左耳朵耗子）在极客时间专栏里发起的一个活动，目的是通过分享的方式来坚持学习。 每人每周写一个 ARTS： Algorithm 是一道算法题， Review 是读一篇英文文章， Technique&#x2F;Tips 是分享一个小技术， Share 是分享一个观点。</p>
</blockquote>
<span id="more"></span>

<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><hr>
<h2 id="算法-leetcode本周放假前一周，比较颓废，很多都没完成。-Review"><a href="#算法-leetcode本周放假前一周，比较颓废，很多都没完成。-Review" class="headerlink" title="#算法 #leetcode本周放假前一周，比较颓废，很多都没完成。## Review"></a>#算法 #leetcode<br>本周放假前一周，比较颓废，很多都没完成。<br>## Review</h2><p>#好文 #阅读</p>
<h2 id="Technique-Tips"><a href="#Technique-Tips" class="headerlink" title="Technique&#x2F;Tips"></a>Technique&#x2F;Tips</h2><hr>
<p>#工具  </p>
<ol>
<li>在本地生成测试证书。 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">首先，生成一个RSA私钥文件（`server.key`）：</span></span><br><span class="line">openssl genpkey -algorithm RSA -out server.key</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">接下来，生成一个自签名证书请求（CSR）：</span></span><br><span class="line">openssl req -new -key server.key -out server.csr</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在执行此命令时，您将被要求提供一些证书信息，例如国家、州、城市、公司等。您可以根据需要提供这些信息，或者按照默认值留空。</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">现在，使用生成的私钥和证书请求来生成自签名证书：</span></span><br><span class="line">openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt</span><br></pre></td></tr></table></figure>
如果这个证书再浏览器里面显示不安全，可以尝试信任本地证书</li>
</ol>
<blockquote>
<ol>
<li>打开Chrome浏览器。  </li>
<li>在地址栏中输入 <code>chrome://flags/#allow-insecure-localhost/</code> 并按 Enter 键。  </li>
<li>找到并启用 “Allow invalid certificates for resources loaded from localhost” 选项。 </li>
<li>重新启动Chrome浏览器。<br><img src="https://images.hxzhouh.com/blog-images/2023/09/c72bb8fc1990bb18c394ae237d8b4ad9.png" alt="image.png"></li>
</ol>
</blockquote>
<h2 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h2><hr>
<p>#碎碎念 #观点</p>
]]></content>
      <categories>
        <category>arts</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
        <tag>好文</tag>
        <tag>阅读</tag>
        <tag>工具</tag>
        <tag>碎碎念</tag>
        <tag>观点</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS-2023-42</title>
    <url>/2023/10/16/arts/ARTS-2023-42/</url>
    <content><![CDATA[<blockquote>
<p>ARTS 是陈浩（网名左耳朵耗子）在极客时间专栏里发起的一个活动，目的是通过分享的方式来坚持学习。 每人每周写一个 ARTS：<br>Algorithm 是一道算法题<br>Review 是读一篇英文文章<br>Technique&#x2F;Tips 是分享一个小技术<br>Share 是分享一个观点。</p>
</blockquote>
<span id="more"></span>

<h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><p>#算法 #leetcode  </p>
<ol>
<li>leetcode 45 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">jump</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;  </span><br><span class="line">    length := <span class="built_in">len</span>(nums)  </span><br><span class="line">    end := <span class="number">0</span>  </span><br><span class="line">    maxPosition := <span class="number">0</span>  </span><br><span class="line">    steps := <span class="number">0</span>  </span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; length<span class="number">-1</span>; i++ &#123;  </span><br><span class="line">       maxPosition = max(maxPosition, i+nums[i])  </span><br><span class="line">       <span class="keyword">if</span> i == end &#123;  </span><br><span class="line">          end = maxPosition  </span><br><span class="line">          steps++  </span><br><span class="line">       &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> steps  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h2><p>#好文 #阅读<br><a href="https://substack.com/redirect/5c83001c-e5fb-4213-8871-41e93c28dfb1?j=eyJ1IjoibHNxdmoifQ.3oGmLofndxScvklxajPKu05xrXKSE0fYF651WfgCv6U">如何做出伟大的工作？</a> </p>
<ul>
<li><input checked="" disabled="" type="checkbox"> <a href="things:///show?id=NU7XfixHt1ewVSJ3hXEteZ">阅读</a> ✅ 2023-11-08<br><a href="https://www.brendangregg.com/linuxperf.html">Linux Performance</a></li>
</ul>
<h2 id="Technique-Tips"><a href="#Technique-Tips" class="headerlink" title="Technique&#x2F;Tips"></a>Technique&#x2F;Tips</h2><p>#工具  </p>
<h2 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h2><p>#碎碎念 #观点</p>
]]></content>
      <categories>
        <category>arts</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
        <tag>好文</tag>
        <tag>阅读</tag>
        <tag>工具</tag>
        <tag>碎碎念</tag>
        <tag>观点</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS-2023-41</title>
    <url>/2023/10/09/arts/ARTS-2023-41/</url>
    <content><![CDATA[<blockquote>
<p>ARTS 是陈浩（网名左耳朵耗子）在极客时间专栏里发起的一个活动，目的是通过分享的方式来坚持学习。 每人每周写一个 ARTS： Algorithm 是一道算法题， Review 是读一篇英文文章， Technique&#x2F;Tips 是分享一个小技术， Share 是分享一个观点。</p>
</blockquote>
<span id="more"></span>

<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>#算法 #leetcode<br>leetcod 344 翻转字符串 水了一道题</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseString</span><span class="params">(s []<span class="type">byte</span>)</span></span> &#123;  </span><br><span class="line">    <span class="keyword">for</span> i, j := <span class="number">0</span>, <span class="built_in">len</span>(s)<span class="number">-1</span>; i &lt; j; i, j = i+<span class="number">1</span>, j<span class="number">-1</span> &#123;  </span><br><span class="line">       s[i], s[j] = s[j], s[i]  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseString1</span><span class="params">(s []<span class="type">byte</span>)</span></span> &#123;  </span><br><span class="line">    l := <span class="number">0</span>  </span><br><span class="line">    r := <span class="built_in">len</span>(s) - <span class="number">1</span>  </span><br><span class="line">    <span class="keyword">for</span> l &lt; r &#123;  </span><br><span class="line">       s[l] ^= s[r]  </span><br><span class="line">       s[r] ^= s[l]  </span><br><span class="line">       s[l] ^= s[r]  </span><br><span class="line">       r--  </span><br><span class="line">       l++  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h2><p>#好文 #阅读<br><a href="https://xargin.com/misc/">https://xargin.com/misc/</a>  曹大的文章，</p>
<h2 id="Technique-Tips"><a href="#Technique-Tips" class="headerlink" title="Technique&#x2F;Tips"></a>Technique&#x2F;Tips</h2><p>#工具  </p>
<p>分享一个命令。用来查日志。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat log.2023-10-13-15 |grep ERROR |grep &quot;.onEventWithoutMerge:93&quot; |awk -F&#x27;reqid&#x27; &#x27;&#123;print $2&#125;&#x27; |awk &#x27;&#123;print $1&#125;&#x27; |xargs -P 4 -I &#123;&#125; grep &#123;&#125; log.2023-10-13-15 &gt;allerr.log</span><br></pre></td></tr></table></figure>
<h2 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h2><p>#碎碎念 #观点</p>
<p>再我司工作，觉得效率是没用的，绝大多数工作，都是很简单的基本工作。但是，这种情况能持续多久？还是要重视效率起来。</p>
]]></content>
      <categories>
        <category>arts</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
        <tag>好文</tag>
        <tag>阅读</tag>
        <tag>工具</tag>
        <tag>碎碎念</tag>
        <tag>观点</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS-2023-43</title>
    <url>/2023/10/23/arts/ARTS-2023-43/</url>
    <content><![CDATA[<blockquote>
<p>ARTS 是陈浩（网名左耳朵耗子）在极客时间专栏里发起的一个活动，目的是通过分享的方式来坚持学习。 每人每周写一个 ARTS：<br>Algorithm 是一道算法题<br>Review 是读一篇英文文章<br>Technique&#x2F;Tips 是分享一个小技术<br>Share 是分享一个观点。</p>
</blockquote>
<span id="more"></span>

<p>本周再备考以及交接的事情，arts 基本上都搁置了。。。。。 🤔</p>
<h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><p>#算法 #leetcode</p>
<h2 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h2><p>#好文 #阅读</p>
<h2 id="Technique-Tips"><a href="#Technique-Tips" class="headerlink" title="Technique&#x2F;Tips"></a>Technique&#x2F;Tips</h2><p>#工具  </p>
<h2 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h2><p>#碎碎念 #观点</p>
<p>最后，我想说有时候笨办法才是最聪明的，慢慢来才是最快的。读文档不一定能直接给我们生活的最优解，但是他能让我们趋近于知道最优解的路径。生活就像一场冒险，也许文档就是我们手中的地图和指南针。  慢慢来不着急，时间还很长。</p>
]]></content>
      <categories>
        <category>arts</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
        <tag>好文</tag>
        <tag>阅读</tag>
        <tag>工具</tag>
        <tag>碎碎念</tag>
        <tag>观点</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS-2023-44</title>
    <url>/2023/10/30/arts/ARTS-2023-44/</url>
    <content><![CDATA[<blockquote>
<p>ARTS 是陈浩（网名左耳朵耗子）在极客时间专栏里发起的一个活动，目的是通过分享的方式来坚持学习。 每人每周写一个 ARTS：<br>Algorithm 是一道算法题<br>Review 是读一篇英文文章<br>Technique&#x2F;Tips 是分享一个小技术<br>Share 是分享一个观点。</p>
</blockquote>
<span id="more"></span>

<h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><p>#算法 #leetcode</p>
<h2 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h2><p>#好文 #阅读<br><a href="https://github.com/ZachGoldberg/Startup-CTO-Handbook">https://github.com/ZachGoldberg/Startup-CTO-Handbook</a>  </p>
<h2 id="Technique-Tips"><a href="#Technique-Tips" class="headerlink" title="Technique&#x2F;Tips"></a>Technique&#x2F;Tips</h2><p>#工具  </p>
<h2 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h2><p>#碎碎念 #观点</p>
]]></content>
      <categories>
        <category>arts</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
        <tag>好文</tag>
        <tag>阅读</tag>
        <tag>工具</tag>
        <tag>碎碎念</tag>
        <tag>观点</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS-2023-46</title>
    <url>/2023/11/13/arts/ARTS-2023-46/</url>
    <content><![CDATA[<blockquote>
<p>ARTS 是陈浩（网名左耳朵耗子）在极客时间专栏里发起的一个活动，目的是通过分享的方式来坚持学习。 每人每周写一个 ARTS：<br>Algorithm 是一道算法题<br>Review 是读一篇英文文章<br>Technique&#x2F;Tips 是分享一个小技术<br>Share 是分享一个观点。</p>
</blockquote>
<span id="more"></span>

<h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><p>#算法 #leetcode</p>
<ol>
<li><a href="https://leetcode.cn/problems/roman-to-integer/description/?envType=study-plan-v2&envId=top-interview-150">leetcode 13 </a><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> symbolValues = <span class="keyword">map</span>[<span class="type">byte</span>]<span class="type">int</span>&#123;<span class="string">&#x27;I&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;V&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;X&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;L&#x27;</span>: <span class="number">50</span>, <span class="string">&#x27;C&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;D&#x27;</span>: <span class="number">500</span>, <span class="string">&#x27;M&#x27;</span>: <span class="number">1000</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 思路</span></span><br><span class="line"><span class="comment">// 正常来说，取出每个字符对应的值，然后判断前后大小，如果前面的比后面的小，那么就是减去前面的值，否则就是加上前面的值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">romanToInt</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	n := <span class="built_in">len</span>(s)</span><br><span class="line">	ans := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="keyword">range</span> s &#123;</span><br><span class="line">		value := symbolValues[s[i]]</span><br><span class="line">		<span class="keyword">if</span> i &lt; n<span class="number">-1</span> &amp;&amp; value &lt; symbolValues[s[i+<span class="number">1</span>]] &#123;</span><br><span class="line">			ans -= value</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			ans += value</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h2><p>学习资料::<a href="https://braydie.gitbooks.io/how-to-be-a-programmer/content/zh/"># How to be a Programmer 中文版</a></p>
<p>#好文 #阅读</p>
<h2 id="Technique-Tips"><a href="#Technique-Tips" class="headerlink" title="Technique&#x2F;Tips"></a>Technique&#x2F;Tips</h2><p>#工具  </p>
<ol>
<li>Microsoft InShellisense插件<br><a href="https://github.com/microsoft/inshellisense">inshellisense</a> 为 shell 提供 IDE 风格的自动完成功能。它是一个用于自动完成的终端本机运行时，支持 600 多个命令行工具。 inshellisense 支持 Windows、Linux 和 MacOS。</li>
</ol>
<p>这个插件 需要适应一下，哈哈，对以前的一些习惯侵入蛮大的。<br> 2. git删除没被跟踪的 文件<br> git clean -f -d -x  git 删除 没被跟踪的文件，有时候有用把。比如频繁切换分支。</p>
<h2 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h2><p>#碎碎念 #观点</p>
<ol>
<li>昨晚（2023-11-12） 阿里云故障了，当时在做饭，听到这个事情后，觉得不可思议，后面有哈哈大笑，嘲讽max，到了今天，感觉我有什么资格笑的出来，阿里云已经很伟大了，我能写出这样的系统？不过还是得出下面的教训<ol>
<li>云不是万能的，云也很贵。</li>
<li>保持敬畏。</li>
</ol>
</li>
<li>本周读完了《代码整洁之道：程序员的职业素养》慢慢的回到了正常的节奏了，看书写文字，Obsidian的摸索也开始有点门道了，一切开始慢慢的好转。<a href=""></a></li>
</ol>
]]></content>
      <categories>
        <category>arts</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
        <tag>好文</tag>
        <tag>阅读</tag>
        <tag>工具</tag>
        <tag>碎碎念</tag>
        <tag>观点</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS-2023-45</title>
    <url>/2023/11/06/arts/ARTS-2023-45/</url>
    <content><![CDATA[<blockquote>
<p>ARTS 是陈浩（网名左耳朵耗子）在极客时间专栏里发起的一个活动，目的是通过分享的方式来坚持学习。 每人每周写一个 ARTS：<br>Algorithm 是一道算法题<br>Review 是读一篇英文文章<br>Technique&#x2F;Tips 是分享一个小技术<br>Share 是分享一个观点。</p>
</blockquote>
<span id="more"></span>

<h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><p>#算法 #leetcode</p>
<h2 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h2><p>#好文 #阅读</p>
<p><a href="http://pf.bigpixel.cn/zh-CN/city/1.html">http://pf.bigpixel.cn/zh-CN/city/1.html</a><br>一个挺有趣的网站，用千亿像素看世界各个城市<br><a href="https://netflixtechblog.com/linux-performance-analysis-in-60-000-milliseconds-accc10403c55">60000 毫秒 Linux 性能分析</a><br>这篇文章介绍了在 60 秒内分析 Linux 性能问题的方法。作者首先介绍了一些基本的性能指标，包括 CPU 使用率、内存使用率、网络流量和 I&#x2F;O 操作。然后，作者介绍了一些用于监控这些指标的工具，包括 top、htop、vmstat、iostat 和 netstat。</p>
<h2 id="Technique-Tips"><a href="#Technique-Tips" class="headerlink" title="Technique&#x2F;Tips"></a>Technique&#x2F;Tips</h2><p>#工具<br>批量重命名 文件后缀</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for file in *.md; do mv &quot;$file&quot; &quot;$&#123;file%.md&#125;.txt&quot;; done</span><br></pre></td></tr></table></figure>
<h2 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h2><p>#碎碎念 #观点</p>
]]></content>
      <categories>
        <category>arts</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
        <tag>好文</tag>
        <tag>阅读</tag>
        <tag>工具</tag>
        <tag>碎碎念</tag>
        <tag>观点</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS-2023-50</title>
    <url>/2023/12/11/arts/ARTS-2023-50/</url>
    <content><![CDATA[<blockquote>
<p>ARTS 是陈浩（网名左耳朵耗子）在极客时间专栏里发起的一个活动，目的是通过分享的方式来坚持学习。 每人每周写一个 ARTS：<br>Algorithm 是一道算法题<br>Review 是读一篇英文文章<br>Technique&#x2F;Tips 是分享一个小技术<br>Share 是分享一个观点。</p>
</blockquote>
<span id="more"></span>

<h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><p><a href="https://leetcode.cn/problems/is-subsequence/?envType=study-plan-v2&envId=top-interview-150">392</a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSubsequence</span><span class="params">(s <span class="type">string</span>, t <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(s) == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(t) == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	sIndex := <span class="number">0</span></span><br><span class="line">	tIndex := <span class="number">0</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> sIndex &lt; <span class="built_in">len</span>(s) &amp;&amp; tIndex &lt; <span class="built_in">len</span>(t) &#123;</span><br><span class="line">		<span class="keyword">if</span> s[sIndex] == t[tIndex] &#123;</span><br><span class="line">			sIndex++</span><br><span class="line">		&#125;</span><br><span class="line">		tIndex++</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> sIndex == <span class="built_in">len</span>(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h2><p><a href="https://go.dev/blog/survey2023-h2-results">Go Developer Survey 2023 H2 Results </a><br>go 社区2023年开发者报告，感觉跟2022年比较，没啥变化，最大的是，大家开始拥抱AI了。<br><a href="https://fs.blog/stop-reading-news/">Stop Reading News</a><br>大家都不看新闻了，都在看短视频 😄</p>
<h2 id="Technique-Tips"><a href="#Technique-Tips" class="headerlink" title="Technique&#x2F;Tips"></a>Technique&#x2F;Tips</h2><p> <a href="https://link.zhubai.love/api/link?url=https://www.insanelycooltools.com&post_id=2345899633101881344&subscriber_id=2096257190994108416&token=b3bf68a76d446e74c673027bae243b4e&timestamp=1702282461562&signature=7d5f5fa8340d2a5fe973f57ebbbb7e474835975b365d28ea4da032928d4e5ece">Insanely Cool Tools</a></p>
<p>这个网站收集了各种热门工具和服务资源，初创企业常用的一些工具和服务。<br><a href="https://github.com/trimstray/the-book-of-secret-knowledge">the-book-of-secret-knowledge</a><br>覆盖很广的网络安全知识，方方面面。</p>
<p><a href="https://github.com/microsoft/Mastering-GitHub-Copilot-for-Paired-Programming">https://github.com/microsoft/Mastering-GitHub-Copilot-for-Paired-Programming</a><br>微软出的 GitHub Copilot 教程，只有 6 堂课，会教你如何有效利用 GitHub Copilot 以及与 AI 结对编程。 课程一共 10 小时，可以体验如何通过 VSCode 和 GitHub Copilot Chat 进行实时协作，学习如何使用 GitHub Copilot 自动补全代码，处理错误和写单元测试，尽可能教会你使用 GitHub Copilot 的最佳实践，让你可以提升写代码的效率和质量。</p>
<h2 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h2><p><a href="https://hexo.hxzhouh.com/2023/12/12/aws%20ec2%20%E5%88%87%E6%8D%A2%E5%88%B0ipv6/">aws ec2 切换到ipv6</a></p>
]]></content>
      <categories>
        <category>arts</category>
      </categories>
  </entry>
  <entry>
    <title>ARTS-2023-47</title>
    <url>/2023/11/20/arts/ARTS-2023-47/</url>
    <content><![CDATA[<blockquote>
<p>ARTS 是陈浩（网名左耳朵耗子）在极客时间专栏里发起的一个活动，目的是通过分享的方式来坚持学习。 每人每周写一个 ARTS：<br>Algorithm 是一道算法题<br>Review 是读一篇英文文章<br>Technique&#x2F;Tips 是分享一个小技术<br>Share 是分享一个观点。</p>
</blockquote>
<span id="more"></span>

<h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><h3 id="leetcode-383"><a href="#leetcode-383" class="headerlink" title="leetcode 383"></a>leetcode 383</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">canConstruct</span><span class="params">(ransomNote <span class="type">string</span>, magazine <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;  </span><br><span class="line">    h := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">26</span>)  </span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> magazine &#123;  </span><br><span class="line">       h[v-<span class="string">&#x27;a&#x27;</span>]++  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> ransomNote &#123;  </span><br><span class="line">       <span class="keyword">if</span> h[v-<span class="string">&#x27;a&#x27;</span>] &gt; <span class="number">0</span> &#123;  </span><br><span class="line">          h[v-<span class="string">&#x27;a&#x27;</span>]--  </span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>  </span><br><span class="line">       &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="49"><a href="#49" class="headerlink" title="49"></a>49</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">groupAnagrams</span><span class="params">(strs []<span class="type">string</span>)</span></span> [][]<span class="type">string</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    r := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>][]<span class="type">string</span>, <span class="number">1000</span>)  </span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> strs &#123;  </span><br><span class="line">       key := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">26</span>, <span class="number">26</span>)  </span><br><span class="line">       <span class="keyword">for</span> _, v1 := <span class="keyword">range</span> v &#123;  </span><br><span class="line">          key[v1-<span class="string">&#x27;a&#x27;</span>]++  </span><br><span class="line">       &#125;  </span><br><span class="line">       <span class="keyword">if</span> _, ok := r[<span class="type">string</span>(key)]; ok &#123;  </span><br><span class="line">          r[<span class="type">string</span>(key)] = <span class="built_in">append</span>(r[<span class="type">string</span>(key)], v)  </span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">          r[<span class="type">string</span>(key)] = []<span class="type">string</span>&#123;v&#125;  </span><br><span class="line">       &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    result := [][]<span class="type">string</span>&#123;&#125;  </span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> r &#123;  </span><br><span class="line">       result = <span class="built_in">append</span>(result, v)  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> result  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h2><p>1.<a href="https://medium.com/gitconnected/awesome-terminal-applications-e4a06022dffa"> Awesome Terminal Applications</a><br>    基于mac 系统，介绍了终端工具，看上去蛮酷的，目前再用 tldr</p>
<h2 id="Technique-Tips"><a href="#Technique-Tips" class="headerlink" title="Technique&#x2F;Tips"></a>Technique&#x2F;Tips</h2><p>#浏览器插件 <strong><a href="https://chromewebstore.google.com/detail/egejbknaophaadmhijkepokfchkbnelc?hl=en">Medium Parser</a> - 一个用于查看 Medium 付费文章的浏览器插件</strong>它的原理是通过 Google Web 缓存查看 Medium 付费文章。</p>
<h3 id="linux-sar"><a href="#linux-sar" class="headerlink" title="#linux sar"></a>#linux sar</h3><p><strong>sar命令</strong> 是Linux下系统运行状态统计工具，它将指定的操作系统状态计数器显示到标准输出设备。sar工具将对系统当前的状态进行取样，然后通过计算数据和比例来表达系统的当前运行状态。它的特点是可以连续对系统取样，获得大量的取样数据。取样数据和分析的结果都可以存入文件，使用它时消耗的系统资源很小。<br>它提供了一下的选项。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-A: 显示所有的报告信息；</span><br><span class="line">-b: 显示I/O速率；</span><br><span class="line">-B: 显示换页状态；</span><br><span class="line">-c: 显示进程创建活动；</span><br><span class="line">-d: 显示每个块设备的状态；</span><br><span class="line">-e: 设置显示报告的结束时间；</span><br><span class="line">-f: 从指定文件提取报告；</span><br><span class="line">-i: 设状态信息刷新的间隔时间；</span><br><span class="line">-n: 报告网络统计信息。</span><br><span class="line">-P: 报告每个CPU的状态；</span><br><span class="line">-R: 显示内存状态；</span><br><span class="line">-u: 显示CPU利用率；</span><br><span class="line">-v: 显示索引节点，文件和其他内核表的状态；</span><br><span class="line">-w: 显示交换分区状态；</span><br><span class="line">-x: 显示给定进程的状态。</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-r: 以分页方式显示输出，每页最多显示 100 行。 </span><br><span class="line">-o: 输出选项，指定要显示的列。例如，`-o mrk,prt,cvg` 将显示 CPU 使用率、进程标识符、磁盘使用率 和 网络流量。 </span><br><span class="line">-t: 时间戳选项，指定要在输出中添加时间戳。 </span><br><span class="line">-s: 统计选项，指定要显示的统计数据的类型。例如，`-s us,ms` 将显示 CPU 使用率的 us 和 ms 时间段的平均值。 </span><br><span class="line">-c: 选项用于指定要发送的命令。例如，`-c ls` 将显示当前目录中的文件和子目录列表。</span><br></pre></td></tr></table></figure>
<p>使用实例：<br>sar 可以用来观测很多 比较细致的指标，比如：</p>
<ol>
<li>查看系统当前的网络吞吐量和 PPS <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">数字1表示每隔1秒输出一组数据</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sar -n DEV 1</span></span><br><span class="line">Linux 4.15.0-1035 (ubuntu)   01/06/19   _x86_64_  (2 CPU)</span><br><span class="line"></span><br><span class="line">13:21:40        IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s   %ifutil</span><br><span class="line">13:21:41         eth0     18.00     20.00      5.79      4.25      0.00      0.00      0.00      0.00</span><br><span class="line">13:21:41      docker0      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">13:21:41           lo      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br></pre></td></tr></table></figure></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rxpck/s 和 txpck/s 分别是接收和发送的 PPS，单位为包 / 秒。</span><br><span class="line">rxkB/s 和 txkB/s 分别是接收和发送的吞吐量，单位是 KB/ 秒。</span><br><span class="line">rxcmp/s 和 txcmp/s 分别是接收和发送的压缩数据包数，单位是包 / 秒。</span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">ifutil 是网络接口的使用率，即半双工模式下为 (rxkB/s+txkB/s)/Bandwidth，而全双工模式下为 max(rxkB/s, txkB/s)/Bandwidth。</span></span><br></pre></td></tr></table></figure>

<h2 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h2><p>#go101 log.fatal 调用的是os.exit（）defer 不会生效。<br>![[Pasted image 20231122202715.png]]<br>#go101  数据的发送者，才能决定channel 什么时候关闭。</p>
]]></content>
      <categories>
        <category>arts</category>
      </categories>
      <tags>
        <tag>atrs</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS-2023-52</title>
    <url>/2023/12/25/arts/ARTS-2023-52/</url>
    <content><![CDATA[<blockquote>
<p>ARTS 是陈浩（网名左耳朵耗子）在极客时间专栏里发起的一个活动，目的是通过分享的方式来坚持学习。 每人每周写一个 ARTS：<br>Algorithm 是一道算法题<br>Review 是读一篇英文文章<br>Technique&#x2F;Tips 是分享一个小技术<br>Share 是分享一个观点。</p>
</blockquote>
<span id="more"></span>
<p>最后一周了，2024开始。。。</p>
<h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><p><a href="https://leetcode.cn/problems/happy-number/">202. 快乐数</a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isHappy</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">	m := <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">bool</span>&#123;&#125;</span><br><span class="line">	<span class="keyword">for</span> ; n != <span class="number">1</span> &amp;&amp; !m[n]; n, m[n] = step(n), <span class="literal">true</span> &#123; &#125;</span><br><span class="line">	<span class="keyword">return</span> n == <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">step</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	sum := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> n &gt; <span class="number">0</span> &#123;</span><br><span class="line">		sum += (n%<span class="number">10</span>) * (n%<span class="number">10</span>)</span><br><span class="line">		n = n/<span class="number">10</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h2><p><a href="https://go.dev/ref/mem">https://go.dev/ref/mem</a>   go内存模型，终于把这篇博客看完了。</p>
<h2 id="Technique-Tips"><a href="#Technique-Tips" class="headerlink" title="Technique&#x2F;Tips"></a>Technique&#x2F;Tips</h2><ul>
<li>#tools ripgrep + fzf，搜什么都快。</li>
<li><a href="https://chromewebstore.google.com/detail/%E8%B1%86%E4%BC%B4%EF%BC%9A%E8%B1%86%E7%93%A3%E8%B4%A6%E5%8F%B7%E5%A4%87%E4%BB%BD%E5%B7%A5%E5%85%B7/ghppfgfeoafdcaebjoglabppkfmbcjdd?hl=zh-CN">豆伴：豆瓣账号备份工具</a> 豆瓣重度用户，这个浏览器拓展可以将你再豆瓣的信息全部保存的到本地。 也可以导入另外的账号，好用。</li>
<li>devv.ai  面向程序员的AIGC 浏览器，</li>
</ul>
<h2 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h2>]]></content>
      <categories>
        <category>arts</category>
      </categories>
  </entry>
  <entry>
    <title>ARTS-2023-49</title>
    <url>/2023/12/04/arts/ARTS-2023-49/</url>
    <content><![CDATA[<blockquote>
<p>ARTS 是陈浩（网名左耳朵耗子）在极客时间专栏里发起的一个活动，目的是通过分享的方式来坚持学习。 每人每周写一个 ARTS：<br>Algorithm 是一道算法题<br>Review 是读一篇英文文章<br>Technique&#x2F;Tips 是分享一个小技术<br>Share 是分享一个观点。</p>
</blockquote>
<span id="more"></span>

<h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><p>继续在做二叉树的题目。<br>leetcode 97: 中序遍历</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inorderTraversal</span><span class="params">(root *TreeNode)</span></span> []<span class="type">int</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;  </span><br><span class="line">       <span class="keyword">return</span> []<span class="type">int</span>&#123;&#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span> root.Left == <span class="literal">nil</span> &amp;&amp; root.Right == <span class="literal">nil</span> &#123;  </span><br><span class="line">       <span class="keyword">return</span> []<span class="type">int</span>&#123;root.Val&#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    result := []<span class="type">int</span>&#123;&#125;  </span><br><span class="line">    result = <span class="built_in">append</span>(result, inorderTraversal(root.Left)...)  </span><br><span class="line">    result = <span class="built_in">append</span>(result, root.Val)  </span><br><span class="line">    result = <span class="built_in">append</span>(result, inorderTraversal(root.Right)...)  </span><br><span class="line">    <span class="keyword">return</span> result  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>leetcode 173: 也是中序遍历</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> BSTIterator <span class="keyword">struct</span> &#123;  </span><br><span class="line">    stack []<span class="type">int</span> <span class="comment">// 用于存储中序遍历的结果  </span></span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">(root *TreeNode)</span></span> BSTIterator &#123;  </span><br><span class="line">    <span class="keyword">return</span> BSTIterator&#123;stack: inorderTraversal(root)&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inorderTraversal</span><span class="params">(root *TreeNode)</span></span> []<span class="type">int</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;  </span><br><span class="line">       <span class="keyword">return</span> []<span class="type">int</span>&#123;&#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span> root.Left == <span class="literal">nil</span> &amp;&amp; root.Right == <span class="literal">nil</span> &#123;  </span><br><span class="line">       <span class="keyword">return</span> []<span class="type">int</span>&#123;root.Val&#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    result := []<span class="type">int</span>&#123;&#125;  </span><br><span class="line">    result = <span class="built_in">append</span>(result, inorderTraversal(root.Left)...)  </span><br><span class="line">    result = <span class="built_in">append</span>(result, root.Val)  </span><br><span class="line">    result = <span class="built_in">append</span>(result, inorderTraversal(root.Right)...)  </span><br><span class="line">    <span class="keyword">return</span> result  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *BSTIterator)</span></span> Next() <span class="type">int</span> &#123;  </span><br><span class="line">    val := this.stack[<span class="number">0</span>]  </span><br><span class="line">    this.stack = this.stack[<span class="number">1</span>:]  </span><br><span class="line">    <span class="keyword">return</span> val  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *BSTIterator)</span></span> HasNext() <span class="type">bool</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(this.stack) &gt; <span class="number">0</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h2><p><a href="https://colobu.com/2023/12/07/more-precise-sleep/">更精准的sleep</a><br>头一次知道time.sleep 的精度问题，想想也是哈，CPU频率就在那里，怎么可能提供那么高精度的休眠。<code>time.sleep</code> 的精度是1ms左右。如果想要更高精度的休眠，使用<code>syscall.Nanosleep</code> 可以提供ns 级别的休眠，但是它是阻塞进程的。</p>
<h2 id="Technique-Tips"><a href="#Technique-Tips" class="headerlink" title="Technique&#x2F;Tips"></a>Technique&#x2F;Tips</h2><p>#工程师工具 鼠须管，雾凇拼音方案，<a href="https://github.com/iDvel/rime-ice">https://github.com/iDvel/rime-ice</a>开箱即用的鼠须管方案，记录一下，等下忘记了。</p>
<h2 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h2><p>不要把职业（career）当成某一件具体的事情，这是人类发明的最危险、最令人窒息的概念之一，也是大多数梦想和直觉的敌人。</p>
<p>职业应该是一个抽象的概念，指的是一个人在日常的工作和生活中，不断探索、培训、实践、逐步进步的过程。</p>
]]></content>
      <categories>
        <category>arts</category>
      </categories>
      <tags>
        <tag>arts</tag>
        <tag>工程师工具</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS-2023-48</title>
    <url>/2023/11/27/arts/ARTS-2023-48/</url>
    <content><![CDATA[<blockquote>
<p>ARTS 是陈浩（网名左耳朵耗子）在极客时间专栏里发起的一个活动，目的是通过分享的方式来坚持学习。 每人每周写一个 ARTS：<br>Algorithm 是一道算法题<br>Review 是读一篇英文文章<br>Technique&#x2F;Tips 是分享一个小技术<br>Share 是分享一个观点。</p>
</blockquote>
<span id="more"></span>

<h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><h2 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h2><p><a href="https://www.riverphillips.dev/blog/go-cfs">https://www.riverphillips.dev/blog/go-cfs</a> 一个老生常谈的问题， GOMAXPROCS 的设置。</p>
<h2 id="Technique-Tips"><a href="#Technique-Tips" class="headerlink" title="Technique&#x2F;Tips"></a>Technique&#x2F;Tips</h2><p>使用 <a href="https://github.com/Yidadaa/ChatGPT-Next-Web">ChatGPT-Next-Web</a> +<a href="https://www.gptapi.us/"> gptapi</a> 搭建了一个镜像站，看能活多久把。</p>
<iframe allow="autoplay *; encrypted-media *; fullscreen *; clipboard-write" frameborder="0" height="450" style="width:100%;max-width:660px;overflow:hidden;border-radius:10px;" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/cn/playlist/vol-1000-%E5%9C%A8%E6%97%B6%E5%85%89%E5%8F%98%E5%B9%BB%E4%B8%AD%E6%B0%B8%E4%B8%8D%E5%A4%B1%E5%8E%BB/pl.u-RRbV0gVCmgNxNDx"></iframe>

<h2 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h2>]]></content>
      <categories>
        <category>arts</category>
      </categories>
  </entry>
  <entry>
    <title>ARTS-2024-01</title>
    <url>/2024/01/02/arts/ARTS-2024-01/</url>
    <content><![CDATA[<blockquote>
<p>ARTS 是陈浩（网名左耳朵耗子）在极客时间专栏里发起的一个活动，目的是通过分享的方式来坚持学习。 每人每周写一个 ARTS：<br>Algorithm 是一道算法题<br>Review 是读一篇英文文章<br>Technique&#x2F;Tips 是分享一个小技术<br>Share 是分享一个观点。</p>
</blockquote>
<span id="more"></span>
<p>2024 第一次arts 加油</p>
<h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><p><a href="https://leetcode.cn/problems/contains-duplicate-ii/">219. 存在重复元素 II</a> 🟢<br><a href="https://leetcode.cn/problems/longest-consecutive-sequence/">128. 最长连续序列</a> 🟡 将数组升序排列，或者放在一个map里面，然后在去获取长度。。</p>
<h2 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h2><p><a href="https://roytanck.com/2023/12/23/in-2024-please-switch-to-firefox/">In 2024, please switch to Firefox</a><br>firefox 好用，坚持隐私保护更加是为了维护 web 的开放标准<br>ps：有几个人会去主动选择浏览器呢？</p>
<h2 id="Technique-Tips"><a href="#Technique-Tips" class="headerlink" title="Technique&#x2F;Tips"></a>Technique&#x2F;Tips</h2><h2 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h2><blockquote>
<p>一个不成熟的理想主义者会为理想悲壮地死去，而一个成熟的理想主义者则愿意为了理想苟且偷生。  《麦田里的守望者》</p>
</blockquote>
]]></content>
      <categories>
        <category>arts</category>
      </categories>
  </entry>
  <entry>
    <title>ARTS-2024-02</title>
    <url>/2024/01/09/arts/ARTS-2024-02/</url>
    <content><![CDATA[<blockquote>
<p>ARTS 是陈浩（网名左耳朵耗子）在极客时间专栏里发起的一个活动，目的是通过分享的方式来坚持学习。 每人每周写一个 ARTS：<br>Algorithm 是一道算法题<br>Review 是读一篇英文文章<br>Technique&#x2F;Tips 是分享一个小技术<br>Share 是分享一个观点。</p>
</blockquote>
<span id="more"></span>

<h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><h2 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h2><p><a href="https://commandcenter.blogspot.com/2024/01/what-we-got-right-what-we-got-wrong.html">What We Got Right, What We Got Wrong</a><br>    # 做对的地方：<br>    1.  统一的规范，方便后面的使用者理解，以及实现不同的编译器，同时，为了兼容不同的编译器，反过来又影响 规范的统一。<br>    2. 多种编译器，跟1 是绑定关系<br>    3. 跨平台，<br>    4.  保持向后兼容<br>    5. 完善的文档库<br>    6. 功能强大且多样的工具<br>    7. 格式化 fmt（最喜欢的功能，不需要靠程序员自己维护统一的风格）<br>    # 做的不太好的地方<br>    1. 并发，并发!&#x3D;并行，<br>    golang 的 go（goroutine）功能，让并发编程真正的走进了每个程序员的日常生活，让go看起来像一个新的语言，很令人兴奋，有时候我们会再程序里面写一堆 go func(){} ，但是却没取到想要的结果，甚至可能代码更慢了，这很打击积极性，其中真正的原因是 并发！&#x3D;并行。<br>    2. interface<br>     主要是社区觉得没泛型，其实接口很好用的。<br>    3. 编译器<br>    4. 项目管理 社区运营总是很难的<br>    5. 包管理 深恶痛绝</p>
<h2 id="Technique-Tips"><a href="#Technique-Tips" class="headerlink" title="Technique&#x2F;Tips"></a>Technique&#x2F;Tips</h2><p>#工程师工具 <a href="https://github.com/princjef/gomarkdoc">gomarkdoc</a> 再开发代码的时候，我们需要维护一份代码以及一份文档，通常这两个部分是分开的，gomarkdoc 可以帮我们从的注释中生成接口文档，方便我们我们写文档以及维护。</p>
<h2 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h2>]]></content>
      <categories>
        <category>arts</category>
      </categories>
  </entry>
  <entry>
    <title>ARTS-2023-51</title>
    <url>/2023/12/18/arts/ARTS-2023-51/</url>
    <content><![CDATA[<blockquote>
<p>ARTS 是陈浩（网名左耳朵耗子）在极客时间专栏里发起的一个活动，目的是通过分享的方式来坚持学习。 每人每周写一个 ARTS：<br>Algorithm 是一道算法题<br>Review 是读一篇英文文章<br>Technique&#x2F;Tips 是分享一个小技术<br>Share 是分享一个观点。</p>
</blockquote>
<span id="more"></span>

<p>本周真是懒呀。。。。。 啥都没做。</p>
<h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><h2 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h2><p>最近发现了 <a href="https://dave.cheney.net/">Dave Cheney</a> 大佬的博客，补课中。<br><a href="https://dave.cheney.net/2021/01/05/a-few-bytes-here-a-few-there-pretty-soon-youre-talking-real-memory">https://dave.cheney.net/2021/01/05/a-few-bytes-here-a-few-there-pretty-soon-youre-talking-real-memory</a><br>本文讲的貌似是 go 内存分配大小的问题，但是好像没看太明白。。。。</p>
<h2 id="Technique-Tips"><a href="#Technique-Tips" class="headerlink" title="Technique&#x2F;Tips"></a>Technique&#x2F;Tips</h2><h2 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h2>]]></content>
      <categories>
        <category>arts</category>
      </categories>
  </entry>
</search>
