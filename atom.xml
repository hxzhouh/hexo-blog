<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>萝卜的博客</title>
  <icon>http://example.com/icon.png</icon>
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-04-03T02:37:38.342Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>hxzhouh</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RWmutex：站在巨人肩膀上跳舞</title>
    <link href="http://example.com/2024/04/03/RWmutex%EF%BC%9A%E7%AB%99%E5%9C%A8%E5%B7%A8%E4%BA%BA%E8%82%A9%E8%86%80%E4%B8%8A%E8%B7%B3%E8%88%9E/"/>
    <id>http://example.com/2024/04/03/RWmutex%EF%BC%9A%E7%AB%99%E5%9C%A8%E5%B7%A8%E4%BA%BA%E8%82%A9%E8%86%80%E4%B8%8A%E8%B7%B3%E8%88%9E/</id>
    <published>2024-04-03T02:35:00.000Z</published>
    <updated>2024-04-03T02:37:38.342Z</updated>
    
    
    <summary type="html">本篇博客介绍了go rwmutex 的一些操作以及实现细节</summary>
    
    
    
    <category term="golang" scheme="http://example.com/categories/golang/"/>
    
    
    <category term="go" scheme="http://example.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2024/04/03/Time%20in%20computers,%20context%20switching.]]/"/>
    <id>http://example.com/2024/04/03/Time%20in%20computers,%20context%20switching.]]/</id>
    <published>2024-04-03T02:31:46.905Z</published>
    <updated>2024-04-03T02:31:46.905Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Go 解密：panic 出现的三种原因</title>
    <link href="http://example.com/2024/04/02/Go%20%E8%A7%A3%E5%AF%86%EF%BC%9Apanic%20%E5%87%BA%E7%8E%B0%E7%9A%84%E4%B8%89%E7%A7%8D%E5%8E%9F%E5%9B%A0/"/>
    <id>http://example.com/2024/04/02/Go%20%E8%A7%A3%E5%AF%86%EF%BC%9Apanic%20%E5%87%BA%E7%8E%B0%E7%9A%84%E4%B8%89%E7%A7%8D%E5%8E%9F%E5%9B%A0/</id>
    <published>2024-04-02T08:25:00.000Z</published>
    <updated>2024-04-02T08:25:36.885Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;panic-是什么&quot;&gt;&lt;a href=&quot;#panic-是什么&quot; class=&quot;headerlink&quot; title=&quot;panic 是什么&quot;&gt;&lt;/a&gt;panic 是什么&lt;/h1&gt;&lt;p&gt;初学 Go 的时候，心里常常很多疑问，有时候看似懂了的问题，其实是是而非。&lt;br&gt;panic 究竟是什么？看似显而易见的问题，但是却回答不出个所以然来。今天我想彻底搞懂这个问题。&lt;/p&gt;</summary>
    
    
    
    <category term="golang" scheme="http://example.com/categories/golang/"/>
    
    
    <category term="go" scheme="http://example.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go 解密 defer 的优雅陷阱</title>
    <link href="http://example.com/2024/04/02/Go%20%E8%A7%A3%E5%AF%86%EF%BC%9A%20defer%20%E7%9A%84%E4%BC%98%E9%9B%85%E9%99%B7%E9%98%B1/"/>
    <id>http://example.com/2024/04/02/Go%20%E8%A7%A3%E5%AF%86%EF%BC%9A%20defer%20%E7%9A%84%E4%BC%98%E9%9B%85%E9%99%B7%E9%98%B1/</id>
    <published>2024-04-02T08:19:00.000Z</published>
    <updated>2024-04-02T08:20:08.068Z</updated>
    
    
    <summary type="html">深入理解 go defer</summary>
    
    
    
    <category term="golang" scheme="http://example.com/categories/golang/"/>
    
    
    <category term="go" scheme="http://example.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go iota, 不是枚举</title>
    <link href="http://example.com/2024/03/27/Go%20iota,%20%E4%B8%8D%E6%98%AF%E6%9E%9A%E4%B8%BE/"/>
    <id>http://example.com/2024/03/27/Go%20iota,%20%E4%B8%8D%E6%98%AF%E6%9E%9A%E4%B8%BE/</id>
    <published>2024-03-27T03:33:00.000Z</published>
    <updated>2024-03-27T03:33:31.449Z</updated>
    
    
    <summary type="html">&lt;p&gt;上周再hacker news 上有一篇讨论go enum 的 文章 &lt;a href=&quot;https://www.zarl.dev/articles/enums&quot;&gt;Go Enums Suck&lt;/a&gt;（很开心还能再hacker news  上看到go相关的信息），我不想对这篇文章发表什么看法，作者说的都是正确的 如果把iota 当成enum看，跟其他语言相比较，确实很糟糕，本篇文章，我们讨论一下iota 的用法。&lt;/p&gt;</summary>
    
    
    
    <category term="go" scheme="http://example.com/categories/go/"/>
    
    
    <category term="go" scheme="http://example.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go 协程切换的性能分析</title>
    <link href="http://example.com/2024/03/20/go%20%E5%8D%8F%E7%A8%8B%E5%88%87%E6%8D%A2%E7%9A%84%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2024/03/20/go%20%E5%8D%8F%E7%A8%8B%E5%88%87%E6%8D%A2%E7%9A%84%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</id>
    <published>2024-03-20T06:45:00.000Z</published>
    <updated>2024-03-28T10:09:34.044Z</updated>
    
    
    <summary type="html">本篇文章分析，go 协程切换的速度。</summary>
    
    
    
    <category term="golang" scheme="http://example.com/categories/golang/"/>
    
    
    <category term="go" scheme="http://example.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>计算机中的时间 线程上下文切换会用掉你多少CPU？</title>
    <link href="http://example.com/2024/03/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%97%B6%E9%97%B4%20%E7%BA%BF%E7%A8%8B%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2%E4%BC%9A%E7%94%A8%E6%8E%89%E4%BD%A0%E5%A4%9A%E5%B0%91CPU%EF%BC%9F/"/>
    <id>http://example.com/2024/03/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%97%B6%E9%97%B4%20%E7%BA%BF%E7%A8%8B%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2%E4%BC%9A%E7%94%A8%E6%8E%89%E4%BD%A0%E5%A4%9A%E5%B0%91CPU%EF%BC%9F/</id>
    <published>2024-03-19T10:45:00.000Z</published>
    <updated>2024-04-03T02:32:42.253Z</updated>
    
    
    <summary type="html">&lt;p&gt;进程是操作系统的伟大发明之一，对应用程序屏蔽了CPU调度、内存管理等硬件细节，而抽象出一个进程的概念，让应用程序专心于实现自己的业务逻辑既可，而且在有限的CPU上可以“同时”进行许多个任务。但是它为用户带来方便的同时，也引入了一些额外的开销。如下图，在进程运行中间的时间里，虽然CPU也在忙于干活，但是却没有完成任何的用户工作，这就是进程机制带来的额外开销。  &lt;/p&gt;</summary>
    
    
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
    <category term="系统编程" scheme="http://example.com/tags/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Go tool: expvar 自定义度量数据，辅助定位性能瓶颈点</title>
    <link href="http://example.com/2024/03/15/Go%20tool%EF%BC%9Aexpvar%20%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%A6%E9%87%8F%E6%95%B0%E6%8D%AE%EF%BC%8C%E8%BE%85%E5%8A%A9%E5%AE%9A%E4%BD%8D%E6%80%A7%E8%83%BD%E7%93%B6%E9%A2%88%E7%82%B9/"/>
    <id>http://example.com/2024/03/15/Go%20tool%EF%BC%9Aexpvar%20%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%A6%E9%87%8F%E6%95%B0%E6%8D%AE%EF%BC%8C%E8%BE%85%E5%8A%A9%E5%AE%9A%E4%BD%8D%E6%80%A7%E8%83%BD%E7%93%B6%E9%A2%88%E7%82%B9/</id>
    <published>2024-03-15T01:50:00.000Z</published>
    <updated>2024-03-15T06:40:27.969Z</updated>
    
    
    <summary type="html">&lt;p&gt;介绍 go 内置工具包 expvar 的使用，能够帮我们实现什么功能，以及它跟pprof 的区别&lt;/p&gt;</summary>
    
    
    
    <category term="blog" scheme="http://example.com/categories/blog/"/>
    
    
    <category term="go" scheme="http://example.com/tags/go/"/>
    
    <category term="监控" scheme="http://example.com/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>每个人都应该考虑采用的 Linux 内核安全可调</title>
    <link href="http://example.com/2024/03/15/%E6%AF%8F%E4%B8%AA%E4%BA%BA%E9%83%BD%E5%BA%94%E8%AF%A5%E8%80%83%E8%99%91%E9%87%87%E7%94%A8%E7%9A%84%20Linux%20%E5%86%85%E6%A0%B8%E5%AE%89%E5%85%A8%E5%8F%AF%E8%B0%83/"/>
    <id>http://example.com/2024/03/15/%E6%AF%8F%E4%B8%AA%E4%BA%BA%E9%83%BD%E5%BA%94%E8%AF%A5%E8%80%83%E8%99%91%E9%87%87%E7%94%A8%E7%9A%84%20Linux%20%E5%86%85%E6%A0%B8%E5%AE%89%E5%85%A8%E5%8F%AF%E8%B0%83/</id>
    <published>2024-03-15T01:42:00.000Z</published>
    <updated>2024-03-15T01:42:25.869Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;每个人都应该考虑采用的Linux内核安全可调&quot;&gt;&lt;a href=&quot;#每个人都应该考虑采用的Linux内核安全可调&quot; class=&quot;headerlink&quot; title=&quot;每个人都应该考虑采用的Linux内核安全可调&quot;&gt;&lt;/a&gt;每个人都应该考虑采用的Linux内核安全可调&lt;/h1&gt;&lt;p&gt;原文连接：&lt;a href=&quot;https://blog.cloudflare.com/linux-kernel-hardening/&quot;&gt;https://blog.cloudflare.com/linux-kernel-hardening/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文介绍了一些Linux内核的功能，这些功能帮助我们保持生产系统更安全。我们将深入探讨它们的工作原理以及为什么您也应该考虑启用它们。&lt;/p&gt;</summary>
    
    
    
    <category term="blog" scheme="http://example.com/categories/blog/"/>
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
    <category term="安全" scheme="http://example.com/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>什么是medium 的 publication</title>
    <link href="http://example.com/2024/03/12/%E4%BB%80%E4%B9%88%E6%98%AFmedium%20%E7%9A%84%20publication/"/>
    <id>http://example.com/2024/03/12/%E4%BB%80%E4%B9%88%E6%98%AFmedium%20%E7%9A%84%20publication/</id>
    <published>2024-03-12T07:49:51.813Z</published>
    <updated>2024-03-15T07:00:53.351Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;This article is first published in the medium MPP plan. If you are a medium user, please follow me in &lt;a href=&quot;https://medium.hxzhouh.com/&quot;&gt;medium&lt;/a&gt;. Thank you very much.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;publication即出版物，你可以把他理解成一本杂志，但是可以随时发布，随时修改。&lt;br&gt;每个 publication都有一个或者多个编辑，这个编辑负责审核你的文章，发表。总体流程 大概就这样子。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Go 编程模式 05 修饰器（Decoration）</title>
    <link href="http://example.com/2024/03/04/Go%20%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F%2005%20%E4%BF%AE%E9%A5%B0%E5%99%A8%EF%BC%88Decoration%EF%BC%89/"/>
    <id>http://example.com/2024/03/04/Go%20%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F%2005%20%E4%BF%AE%E9%A5%B0%E5%99%A8%EF%BC%88Decoration%EF%BC%89/</id>
    <published>2024-03-04T06:45:00.000Z</published>
    <updated>2024-03-15T06:45:19.654Z</updated>
    
    
    <summary type="html">&lt;p&gt;Go 是一种静态类型的编译语言，它的设计目标是简洁、高效。虽然 Go 不是一种完全的面向对象语言，但是我们仍然可以使用一些设计模式来提高代码的可读性和可维护性。今天，我将介绍一种常见的设计模式：修饰器模式。&lt;/p&gt;</summary>
    
    
    
    <category term="blog" scheme="http://example.com/categories/blog/"/>
    
    
    <category term="go" scheme="http://example.com/tags/go/"/>
    
    <category term="编程模式" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>hash table 一个古老的经典数据结构</title>
    <link href="http://example.com/2024/02/26/hash%20table%20%E4%B8%80%E4%B8%AA%E5%8F%A4%E8%80%81%E7%9A%84%E7%BB%8F%E5%85%B8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://example.com/2024/02/26/hash%20table%20%E4%B8%80%E4%B8%AA%E5%8F%A4%E8%80%81%E7%9A%84%E7%BB%8F%E5%85%B8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2024-02-26T06:39:26.010Z</published>
    <updated>2024-02-26T11:23:41.807Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Hash_table&quot;&gt;哈希表&lt;/a&gt;一种古老的数据结构，在 1953 年就有人使用拉链法实现了哈希表，它能够通过键直接获取该键对应的值。&lt;/p&gt;</summary>
    
    
    
    <category term="blog" scheme="http://example.com/categories/blog/"/>
    
    
    <category term="go" scheme="http://example.com/tags/go/"/>
    
    <category term="hash" scheme="http://example.com/tags/hash/"/>
    
  </entry>
  
  <entry>
    <title>medium能让你快速的赚到钱？ 不可能</title>
    <link href="http://example.com/2024/02/23/medium%E8%83%BD%E8%AE%A9%E4%BD%A0%E5%BF%AB%E9%80%9F%E7%9A%84%E8%B5%9A%E5%88%B0%E9%92%B1%EF%BC%9F%20%E4%B8%8D%E5%8F%AF%E8%83%BD/"/>
    <id>http://example.com/2024/02/23/medium%E8%83%BD%E8%AE%A9%E4%BD%A0%E5%BF%AB%E9%80%9F%E7%9A%84%E8%B5%9A%E5%88%B0%E9%92%B1%EF%BC%9F%20%E4%B8%8D%E5%8F%AF%E8%83%BD/</id>
    <published>2024-02-23T13:40:00.000Z</published>
    <updated>2024-02-23T13:41:20.003Z</updated>
    
    
    <summary type="html">&lt;p&gt;medium能让你快速的赚到钱？ 不可能&lt;br&gt;我要用我两个月的经历告诉你们，这是不可能的&lt;/p&gt;</summary>
    
    
    
    <category term="blog" scheme="http://example.com/categories/blog/"/>
    
    
    <category term="medium" scheme="http://example.com/tags/medium/"/>
    
    <category term="副业" scheme="http://example.com/tags/%E5%89%AF%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>medium 写作一个月的心得</title>
    <link href="http://example.com/2024/02/19/medium%20%E5%86%99%E4%BD%9C%E4%B8%80%E4%B8%AA%E6%9C%88%E7%9A%84%E5%BF%83%E5%BE%97/"/>
    <id>http://example.com/2024/02/19/medium%20%E5%86%99%E4%BD%9C%E4%B8%80%E4%B8%AA%E6%9C%88%E7%9A%84%E5%BF%83%E5%BE%97/</id>
    <published>2024-02-19T10:12:00.000Z</published>
    <updated>2024-02-19T10:23:50.594Z</updated>
    
    
    <summary type="html">medium 写作一个月的心得</summary>
    
    
    
    <category term="blog" scheme="http://example.com/categories/blog/"/>
    
    
    <category term="写作" scheme="http://example.com/tags/%E5%86%99%E4%BD%9C/"/>
    
    <category term="medium" scheme="http://example.com/tags/medium/"/>
    
  </entry>
  
  <entry>
    <title>浅析Go 主流日志库：从设计层学习如何集成日志轮转与切割功能</title>
    <link href="http://example.com/2024/02/16/%E6%B5%85%E6%9E%90Go%20%E4%B8%BB%E6%B5%81%E6%97%A5%E5%BF%97%E5%BA%93%EF%BC%9A%E4%BB%8E%E8%AE%BE%E8%AE%A1%E5%B1%82%E5%AD%A6%E4%B9%A0%E5%A6%82%E4%BD%95%E9%9B%86%E6%88%90%E6%97%A5%E5%BF%97%E8%BD%AE%E8%BD%AC%E4%B8%8E%E5%88%87%E5%89%B2%E5%8A%9F%E8%83%BD/"/>
    <id>http://example.com/2024/02/16/%E6%B5%85%E6%9E%90Go%20%E4%B8%BB%E6%B5%81%E6%97%A5%E5%BF%97%E5%BA%93%EF%BC%9A%E4%BB%8E%E8%AE%BE%E8%AE%A1%E5%B1%82%E5%AD%A6%E4%B9%A0%E5%A6%82%E4%BD%95%E9%9B%86%E6%88%90%E6%97%A5%E5%BF%97%E8%BD%AE%E8%BD%AC%E4%B8%8E%E5%88%87%E5%89%B2%E5%8A%9F%E8%83%BD/</id>
    <published>2024-02-16T10:05:00.000Z</published>
    <updated>2024-03-26T01:06:37.341Z</updated>
    
    
    <summary type="html">&lt;p&gt;在现有的日志库中，包括 &lt;code&gt;go&lt;/code&gt; 1.21.0 引入的 &lt;code&gt;slog&lt;/code&gt; 日志库，它们通常都支持对日志文件进行轮转与切割，只不过这些功能并不直接被内置，而是需要我们主动配置来启用。&lt;/p&gt;
&lt;p&gt;本文将探讨几个热门的日志库如 &lt;code&gt;logrus&lt;/code&gt;、&lt;code&gt;zap&lt;/code&gt; 和官网的 &lt;code&gt;slog&lt;/code&gt;，我将分析这些库的的关键设计元素，探讨它们是如何支持日志轮转与切割功能的配置。&lt;/p&gt;</summary>
    
    
    
    <category term="Go" scheme="http://example.com/categories/Go/"/>
    
    
    <category term="go" scheme="http://example.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>为什么TCP连接时需要3次握手</title>
    <link href="http://example.com/2024/02/16/%E4%B8%BA%E4%BB%80%E4%B9%88TCP%E8%BF%9E%E6%8E%A5%E6%97%B6%E9%9C%80%E8%A6%813%E6%AC%A1%E6%8F%A1%E6%89%8B/"/>
    <id>http://example.com/2024/02/16/%E4%B8%BA%E4%BB%80%E4%B9%88TCP%E8%BF%9E%E6%8E%A5%E6%97%B6%E9%9C%80%E8%A6%813%E6%AC%A1%E6%8F%A1%E6%89%8B/</id>
    <published>2024-02-16T10:04:00.000Z</published>
    <updated>2024-02-16T10:04:23.140Z</updated>
    
    
    <summary type="html">&lt;p&gt;TCP 协议是我们几乎每天都会接触到的网络协议，绝大多数网络连接的建立都是基于 TCP 协议的，学过计算机网络或者对 TCP 协议稍有了解的人都知道 —— 使用 TCP 协议建立连接需要经过三次握手（three-way handshake）。&lt;/p&gt;
&lt;p&gt;如果让我们简单说说 TCP 建立连接的过程，相信很多准备过面试的人都会非常了解，但是一旦想要深究『为什么 TCP 建立连接需要三次握手？』，作者相信大多数人都没有办法回答这个问题或者会给出错误的答案，这边文章就会讨论究竟为什么我们需要三次握手才能建立 TCP 连接？而不是四次、或者两次？&lt;/p&gt;</summary>
    
    
    
    <category term="blog" scheme="http://example.com/categories/blog/"/>
    
    
    <category term="tcp" scheme="http://example.com/tags/tcp/"/>
    
  </entry>
  
  <entry>
    <title>为什么TCP断开的时候需要四次挥手</title>
    <link href="http://example.com/2024/02/16/%E4%B8%BA%E4%BB%80%E4%B9%88TCP%E6%96%AD%E5%BC%80%E7%9A%84%E6%97%B6%E5%80%99%E9%9C%80%E8%A6%81%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
    <id>http://example.com/2024/02/16/%E4%B8%BA%E4%BB%80%E4%B9%88TCP%E6%96%AD%E5%BC%80%E7%9A%84%E6%97%B6%E5%80%99%E9%9C%80%E8%A6%81%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</id>
    <published>2024-02-16T10:02:00.000Z</published>
    <updated>2024-03-26T03:06:25.631Z</updated>
    
    
    <summary type="html">本文从原理上解释了，tcp 挥手过程中会发生什么事情</summary>
    
    
    
    <category term="为什么这么设计" scheme="http://example.com/categories/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%99%E4%B9%88%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="tcp" scheme="http://example.com/tags/tcp/"/>
    
  </entry>
  
  <entry>
    <title>我在13年后如何编写Go的HTTP服务|Grafana Labs</title>
    <link href="http://example.com/2024/02/16/%E6%88%91%E5%9C%A813%E5%B9%B4%E5%90%8E%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99Go%E7%9A%84HTTP%E6%9C%8D%E5%8A%A1%20Grafana%20Labs/"/>
    <id>http://example.com/2024/02/16/%E6%88%91%E5%9C%A813%E5%B9%B4%E5%90%8E%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99Go%E7%9A%84HTTP%E6%9C%8D%E5%8A%A1%20Grafana%20Labs/</id>
    <published>2024-02-16T09:15:24.992Z</published>
    <updated>2024-03-26T01:08:38.694Z</updated>
    
    
    <summary type="html">&lt;p&gt;将近六年前，我写了一篇博客文章，概述了&lt;a href=&quot;https://pace.dev/blog/2018/05/09/how-I-write-http-services-after-eight-years.html&quot;&gt;我如何编写Go的HTTP服务&lt;/a&gt;，现在，我再次告诉你，我如何编写HTTP服务。&lt;/p&gt;</summary>
    
    
    
    <category term="go" scheme="http://example.com/categories/go/"/>
    
    
    <category term="翻译" scheme="http://example.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
    <category term="GO" scheme="http://example.com/tags/GO/"/>
    
  </entry>
  
  <entry>
    <title>如何用汇编分析Go代码</title>
    <link href="http://example.com/2024/01/16/%E5%A6%82%E4%BD%95%E7%94%A8%E6%B1%87%E7%BC%96%E5%88%86%E6%9E%90Go%E4%BB%A3%E7%A0%81/"/>
    <id>http://example.com/2024/01/16/%E5%A6%82%E4%BD%95%E7%94%A8%E6%B1%87%E7%BC%96%E5%88%86%E6%9E%90Go%E4%BB%A3%E7%A0%81/</id>
    <published>2024-01-15T19:55:43.000Z</published>
    <updated>2024-03-26T06:12:19.117Z</updated>
    
    
    <summary type="html">&lt;p&gt;今天介绍几个常用的查看 Go 汇编代码、调试 Go 程序的命令和工具，&lt;/p&gt;</summary>
    
    
    
    <category term="go" scheme="http://example.com/categories/go/"/>
    
    
    <category term="Go" scheme="http://example.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>如何利用 github copilot搭建 chatgpt-4  服务</title>
    <link href="http://example.com/2024/01/12/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%20github%20copilot%E6%90%AD%E5%BB%BA%20chatgpt-4%20%20%E6%9C%8D%E5%8A%A1/"/>
    <id>http://example.com/2024/01/12/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%20github%20copilot%E6%90%AD%E5%BB%BA%20chatgpt-4%20%20%E6%9C%8D%E5%8A%A1/</id>
    <published>2024-01-12T01:51:00.000Z</published>
    <updated>2024-03-15T12:48:31.819Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;如何利用-github-copilot搭建-chatgpt-4-服务&quot;&gt;&lt;a href=&quot;#如何利用-github-copilot搭建-chatgpt-4-服务&quot; class=&quot;headerlink&quot; title=&quot;如何利用 github copilot搭建 chatgpt-4  服务&quot;&gt;&lt;/a&gt;如何利用 github copilot搭建 chatgpt-4  服务&lt;/h1&gt;&lt;p&gt;Github Copilot 是 GitHub 开发 AI 助手，它可以帮助开发者编写代码。它是一个基于 OpenAI Codex 的 Visual Studio Code 插件，它可以为你提供代码提示、自动补全、自动修复、自动重构等功能。现在 Github Copilot 还支持chat功能，它的底层逻辑基于GPT-4，但是目前仅支持在vs code 中使用， 但是我日常开发环境是Golang，本文将介绍如何利用github copilot搭建chatgpt-4服务，使得我们可以在任何地方使用chatgpt-4。&lt;/p&gt;</summary>
    
    
    
    <category term="blog" scheme="http://example.com/categories/blog/"/>
    
    
    <category term="github" scheme="http://example.com/tags/github/"/>
    
    <category term="copilot" scheme="http://example.com/tags/copilot/"/>
    
    <category term="chatgpt-4" scheme="http://example.com/tags/chatgpt-4/"/>
    
  </entry>
  
</feed>
