<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>huizhou92</title>
  <icon>https://hxzhouh.com/icon.png</icon>
  
  <link href="https://hxzhouh.com/atom.xml" rel="self"/>
  
  <link href="https://hxzhouh.com/"/>
  <updated>2024-05-13T01:17:50.495Z</updated>
  <id>https://hxzhouh.com/</id>
  
  <author>
    <name>huizhou92</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Secure Communication with gRPC: From SSL/TLS Certification to SAN Certification</title>
    <link href="https://hxzhouh.com/2024/05/13/golang%20action%20grpc%20san/"/>
    <id>https://hxzhouh.com/2024/05/13/golang%20action%20grpc%20san/</id>
    <published>2024-05-13T01:15:00.000Z</published>
    <updated>2024-05-13T01:17:50.495Z</updated>
    
    
    <summary type="html">A step-by-step guide to creating and utilizing SAN Certifications for secure gRPC communicationgenerate by DALLE-3</summary>
    
    
    
    <category term="blog" scheme="https://hxzhouh.com/categories/blog/"/>
    
    
    <category term="golang" scheme="https://hxzhouh.com/tags/golang/"/>
    
    <category term="grpc" scheme="https://hxzhouh.com/tags/grpc/"/>
    
  </entry>
  
  <entry>
    <title>8 Common SQL Slow Query Statements and How to Optimize Them</title>
    <link href="https://hxzhouh.com/2024/05/11/8%20Common%20SQL%20Slow%20Query%20Statements%20and%20How%20to%20Optimize%20Them/"/>
    <id>https://hxzhouh.com/2024/05/11/8%20Common%20SQL%20Slow%20Query%20Statements%20and%20How%20to%20Optimize%20Them/</id>
    <published>2024-05-11T12:19:00.000Z</published>
    <updated>2024-05-14T06:21:24.078Z</updated>
    
    
    <summary type="html"> Learn how to optimize SQL queries for better performance</summary>
    
    
    
    <category term="database" scheme="https://hxzhouh.com/categories/database/"/>
    
    
    <category term="db" scheme="https://hxzhouh.com/tags/db/"/>
    
  </entry>
  
  <entry>
    <title>Smart Go compiler: Slimming</title>
    <link href="https://hxzhouh.com/2024/05/11/Smart%20Go%20compiler%20Slimming/"/>
    <id>https://hxzhouh.com/2024/05/11/Smart%20Go%20compiler%20Slimming/</id>
    <published>2024-05-11T01:10:00.000Z</published>
    <updated>2024-05-11T01:17:31.818Z</updated>
    
    
    <summary type="html">Understanding Dead Code Elimination and Executable File Size in Go</summary>
    
    
    
    <category term="blog" scheme="https://hxzhouh.com/categories/blog/"/>
    
    
    <category term="golang" scheme="https://hxzhouh.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>11 Tips for Detecting and Responding to Intrusions on Linux</title>
    <link href="https://hxzhouh.com/2024/05/10/11%20Tips%20for%20Detecting%20and%20Responding%20to%20Intrusions%20on%20Linux/"/>
    <id>https://hxzhouh.com/2024/05/10/11%20Tips%20for%20Detecting%20and%20Responding%20to%20Intrusions%20on%20Linux/</id>
    <published>2024-05-10T01:31:00.000Z</published>
    <updated>2024-05-14T06:18:39.475Z</updated>
    
    
    <summary type="html">&lt;p&gt;![[Pasted image 20240510093043.png]]&lt;br&gt;With the increasing popularity of open-source products, it is crucial for a backend engineer to be able to clearly identify whether an abnormal machine has been compromised. Based on my personal work experience, I have compiled several common scenarios of machines being hacked for reference.&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://hxzhouh.com/categories/linux/"/>
    
    
    <category term="linux" scheme="https://hxzhouh.com/tags/linux/"/>
    
    <category term="security" scheme="https://hxzhouh.com/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>Mac: Slowing Down Your Disk Speed by 60x</title>
    <link href="https://hxzhouh.com/2024/04/27/Slowing%20Down%20Your%20Disk%20Speed%20by%2060x/"/>
    <id>https://hxzhouh.com/2024/04/27/Slowing%20Down%20Your%20Disk%20Speed%20by%2060x/</id>
    <published>2024-04-27T14:21:00.000Z</published>
    <updated>2024-04-27T14:21:47.968Z</updated>
    
    
    <summary type="html">&lt;p&gt;Sometimes in the development process, we need to simulate slow disk conditions to verify if our code can still function on low-performance machines. Typically, we would use &lt;code&gt;cgroup&lt;/code&gt; or Docker for this purpose, but it can be cumbersome on a MacBook. However, there’s a built-in tool on macOS that can help us achieve this: &lt;code&gt;dmc&lt;/code&gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="blog" scheme="https://hxzhouh.com/categories/blog/"/>
    
    
    <category term="tools" scheme="https://hxzhouh.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Rust Lesson 1： A Gopher&#39;s View on Rust</title>
    <link href="https://hxzhouh.com/2024/04/26/Rust%20Lesson%201%20A%20Gopher&#39;s%20View%20on%20Rust/"/>
    <id>https://hxzhouh.com/2024/04/26/Rust%20Lesson%201%20A%20Gopher&#39;s%20View%20on%20Rust/</id>
    <published>2024-04-26T01:43:00.000Z</published>
    <updated>2024-04-26T01:44:17.176Z</updated>
    
    
    <summary type="html">Understand the history and current status of Rust, and why I want to learn Rust</summary>
    
    
    
    <category term="Go" scheme="https://hxzhouh.com/categories/Go/"/>
    
    
    <category term="go" scheme="https://hxzhouh.com/tags/go/"/>
    
    <category term="rust" scheme="https://hxzhouh.com/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>The Magical Algorithms Written by Two Old Men, Dominating the World!</title>
    <link href="https://hxzhouh.com/2024/04/25/The%20Magical%20Algorithms%20Written%20by%20Two%20Old%20Men,%20Dominating%20the%20World/"/>
    <id>https://hxzhouh.com/2024/04/25/The%20Magical%20Algorithms%20Written%20by%20Two%20Old%20Men,%20Dominating%20the%20World/</id>
    <published>2024-04-25T10:47:00.000Z</published>
    <updated>2024-05-14T06:21:00.266Z</updated>
    
    
    <summary type="html">The algorithm that changed the world</summary>
    
    
    
    <category term="compute" scheme="https://hxzhouh.com/categories/compute/"/>
    
    
    <category term="history" scheme="https://hxzhouh.com/tags/history/"/>
    
    <category term="compute" scheme="https://hxzhouh.com/tags/compute/"/>
    
  </entry>
  
  <entry>
    <title>Go program pattern 05: Decorations</title>
    <link href="https://hxzhouh.com/2024/04/23/Go%20program%20pattern%2005%20Decorations/"/>
    <id>https://hxzhouh.com/2024/04/23/Go%20program%20pattern%2005%20Decorations/</id>
    <published>2024-04-23T06:33:00.000Z</published>
    <updated>2024-04-23T07:33:58.578Z</updated>
    
    
    <summary type="html">&lt;p&gt;Go is a statically typed compiled language designed to be concise and efficient. While Go is not a purely object-oriented language, we can still use design patterns to improve code readability and maintainability. Today, I will introduce a common design pattern: the Decorator pattern.&lt;/p&gt;</summary>
    
    
    
    <category term="Go" scheme="https://hxzhouh.com/categories/Go/"/>
    
    
    <category term="go" scheme="https://hxzhouh.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go program pattern 03: Inversion of Control</title>
    <link href="https://hxzhouh.com/2024/04/23/Go%20program%20pattern%2003%EF%BC%9AInversion%20of%20Control/"/>
    <id>https://hxzhouh.com/2024/04/23/Go%20program%20pattern%2003%EF%BC%9AInversion%20of%20Control/</id>
    <published>2024-04-23T06:32:00.000Z</published>
    <updated>2024-04-23T07:33:51.330Z</updated>
    
    
    <summary type="html">&lt;p&gt;In the previous article, I briefly introduced the composite pattern in Go, which was explained in a simple manner. We understood that Go can achieve polymorphism in object-oriented programming through composition.&lt;/p&gt;</summary>
    
    
    
    <category term="Go" scheme="https://hxzhouh.com/categories/Go/"/>
    
    
    <category term="go" scheme="https://hxzhouh.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go Program pattern 04: Map-Reduce</title>
    <link href="https://hxzhouh.com/2024/04/23/Go%20Program%20pattern%2004%EF%BC%9AMap-Reduce/"/>
    <id>https://hxzhouh.com/2024/04/23/Go%20Program%20pattern%2004%EF%BC%9AMap-Reduce/</id>
    <published>2024-04-23T06:32:00.000Z</published>
    <updated>2024-04-23T07:33:55.179Z</updated>
    
    
    <summary type="html">&lt;p&gt;Map-Reduce is a programming paradigm used for processing large-scale datasets. It helps simplify the process of parallel computation and improves computational efficiency.  &lt;/p&gt;</summary>
    
    
    
    <category term="Go" scheme="https://hxzhouh.com/categories/Go/"/>
    
    
  </entry>
  
  <entry>
    <title>Go program pattern 02: Implementing Class Inheritance and Method Overriding through Composition</title>
    <link href="https://hxzhouh.com/2024/04/23/Go%20program%20pattern%2002%EF%BC%9A%20Implementing%20Class%20Inheritance%20and%20Method%20Overriding%20through%20Composition/"/>
    <id>https://hxzhouh.com/2024/04/23/Go%20program%20pattern%2002%EF%BC%9A%20Implementing%20Class%20Inheritance%20and%20Method%20Overriding%20through%20Composition/</id>
    <published>2024-04-23T06:30:00.000Z</published>
    <updated>2024-04-23T07:42:25.772Z</updated>
    
    
    <summary type="html">&lt;p&gt;In the previous tutorial, I have already introduced that Go language, unlike object-oriented programming languages such as Java and PHP, does not support keywords like &lt;code&gt;class&lt;/code&gt; to define classes. Instead, it uses the &lt;code&gt;type&lt;/code&gt; keyword combined with basic types or structures to define the type system. Additionally, it does not support explicitly defining inheritance relationships between types using the &lt;code&gt;extends&lt;/code&gt; keyword.&lt;/p&gt;</summary>
    
    
    
    <category term="Go" scheme="https://hxzhouh.com/categories/Go/"/>
    
    
    <category term="go" scheme="https://hxzhouh.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go program pattern 01: Functional Options Pattern</title>
    <link href="https://hxzhouh.com/2024/04/23/Go%20program%20pattern%2001%EF%BC%9A%20Functional%20Options%20Pattern/"/>
    <id>https://hxzhouh.com/2024/04/23/Go%20program%20pattern%2001%EF%BC%9A%20Functional%20Options%20Pattern/</id>
    <published>2024-04-23T06:29:00.000Z</published>
    <updated>2024-04-23T06:30:02.726Z</updated>
    
    
    <summary type="html">&lt;p&gt;Go is not a fully object-oriented language, and some object-oriented patterns are not well-suited for it. However, over the years, Go has developed its own set of patterns. Today, I would like to introduce a common pattern: the Functional Options Pattern.&lt;/p&gt;</summary>
    
    
    
    <category term="Go" scheme="https://hxzhouh.com/categories/Go/"/>
    
    
    <category term="go" scheme="https://hxzhouh.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Decryption go: understand go language pointer</title>
    <link href="https://hxzhouh.com/2024/04/23/Decryption%20go%EF%BC%9A%20understand%20go%20language%20pointer_%20english/"/>
    <id>https://hxzhouh.com/2024/04/23/Decryption%20go%EF%BC%9A%20understand%20go%20language%20pointer_%20english/</id>
    <published>2024-04-23T06:25:00.000Z</published>
    <updated>2024-04-23T06:25:48.688Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;This article is first published in the medium MPP plan. If you are a medium user, please follow me in &lt;a href=&quot;https://medium.hxzhouh.com/&quot;&gt;medium&lt;/a&gt;. Thank you very much.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Go language has three types of pointers. In the normal development process, we only encounter the ordinary pointer. However, in the low-level source code of Go language, there are a lot of operations involving three types of pointer conversion and manipulation. Let’s clarify these points first.&lt;/p&gt;</summary>
    
    
    
    <category term="Go" scheme="https://hxzhouh.com/categories/Go/"/>
    
    
    <category term="go" scheme="https://hxzhouh.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Learn How to Handle Time In Golang</title>
    <link href="https://hxzhouh.com/2024/04/19/Learn%20How%20to%20Handle%20Time%20In%20Golang/"/>
    <id>https://hxzhouh.com/2024/04/19/Learn%20How%20to%20Handle%20Time%20In%20Golang/</id>
    <published>2024-04-19T10:43:00.000Z</published>
    <updated>2024-04-19T10:58:30.587Z</updated>
    
    
    <summary type="html">introduce some important functions and methods in the time package</summary>
    
    
    
    <category term="Go" scheme="https://hxzhouh.com/categories/Go/"/>
    
    
    <category term="go" scheme="https://hxzhouh.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go1.22 a new math  lib</title>
    <link href="https://hxzhouh.com/2024/04/18/Go1.22%20a%20new%20math%20%20lib/"/>
    <id>https://hxzhouh.com/2024/04/18/Go1.22%20a%20new%20math%20%20lib/</id>
    <published>2024-04-18T09:05:00.000Z</published>
    <updated>2024-05-14T06:19:35.864Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;This article is first published in the medium MPP plan. If you are a medium user, please follow me in &lt;a href=&quot;https://medium.hxzhouh.com/&quot;&gt;medium&lt;/a&gt;. Thank you very much.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Go1-22-a-new-math-lib&quot;&gt;&lt;a href=&quot;#Go1-22-a-new-math-lib&quot; class=&quot;headerlink&quot; title=&quot;Go1.22 a new math lib&quot;&gt;&lt;/a&gt;Go1.22 a new math lib&lt;/h1&gt;&lt;p&gt;The inaugural v2 version of the standard library in Go, hails from the esteemed &lt;a href=&quot;https://github.com/golang/go/discussions/60751&quot;&gt;math&amp;#x2F;rand&amp;#x2F;v2&lt;/a&gt; repository. It is set to make its grand debut with the official release of Go1.22, poised to serve as a reliable and production-ready resource.  &lt;/p&gt;</summary>
    
    
    
    <category term="go" scheme="https://hxzhouh.com/categories/go/"/>
    
    
    <category term="go" scheme="https://hxzhouh.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go defer：makes the function simpler and more robust.</title>
    <link href="https://hxzhouh.com/2024/04/18/Go%20defer%EF%BC%9Amakes%20the%20function%20simpler%20and%20more%20robust./"/>
    <id>https://hxzhouh.com/2024/04/18/Go%20defer%EF%BC%9Amakes%20the%20function%20simpler%20and%20more%20robust./</id>
    <published>2024-04-18T09:02:00.000Z</published>
    <updated>2024-04-18T09:04:00.510Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;This article is first published in the medium MPP plan. If you are a medium user, please follow me in &lt;a href=&quot;https://medium.hxzhouh.com/&quot;&gt;medium&lt;/a&gt;. Thank you very much.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the previous article, we used &lt;code&gt;defer&lt;/code&gt; to recover from panics. In the practical work of a gopher, &lt;code&gt;defer&lt;/code&gt; acts like a loyal and reliable teammate, silently helping us with the clean-up work behind the scenes. For example:&lt;/p&gt;</summary>
    
    
    
    <category term="go" scheme="https://hxzhouh.com/categories/go/"/>
    
    
    <category term="go" scheme="https://hxzhouh.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>How was my blog built</title>
    <link href="https://hxzhouh.com/2024/04/18/How%20was%20my%20blog%20built/"/>
    <id>https://hxzhouh.com/2024/04/18/How%20was%20my%20blog%20built/</id>
    <published>2024-04-18T03:19:00.000Z</published>
    <updated>2024-04-18T11:07:17.543Z</updated>
    
    
    <summary type="html">This article introduces how I use free services to build my own blog</summary>
    
    
    
    <category term="blog" scheme="https://hxzhouh.com/categories/blog/"/>
    
    
    <category term="hexo" scheme="https://hxzhouh.com/tags/hexo/"/>
    
    <category term="blog" scheme="https://hxzhouh.com/tags/blog/"/>
    
    <category term="tools" scheme="https://hxzhouh.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>A Deep Dive into CNCF’s Cloud-Native AI Whitepaper</title>
    <link href="https://hxzhouh.com/2024/04/17/A%20Deep%20Dive%20into%20CNCF%E2%80%99s%20Cloud-Native%20AI%20Whitepaper/"/>
    <id>https://hxzhouh.com/2024/04/17/A%20Deep%20Dive%20into%20CNCF%E2%80%99s%20Cloud-Native%20AI%20Whitepaper/</id>
    <published>2024-04-17T02:14:00.000Z</published>
    <updated>2024-04-18T02:53:33.541Z</updated>
    
    
    <summary type="html">This article provides an in-depth analysis of the content of this whitepaper.</summary>
    
    
    
    <category term="Information" scheme="https://hxzhouh.com/categories/Information/"/>
    
    
    <category term="CNCF" scheme="https://hxzhouh.com/tags/CNCF/"/>
    
  </entry>
  
  <entry>
    <title>Performance analysis of goroutine switching</title>
    <link href="https://hxzhouh.com/2024/03/20/Performance%20analysis%20of%20goroutine%20switching/"/>
    <id>https://hxzhouh.com/2024/03/20/Performance%20analysis%20of%20goroutine%20switching/</id>
    <published>2024-03-20T08:32:00.000Z</published>
    <updated>2024-05-14T06:20:04.843Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://images.hxzhouh.com/blog-images/2024/03/057d94f39fc9a6838acdbc94b915f654.png&quot; alt=&quot;Pasted image 20240320201037&quot;&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: Non-members can read the full story in this &lt;a href=&quot;https://medium.hxzhouh.com/d91a49604cae?source=friends_link&amp;sk=f3140285d590037631e7f7354ee9f629&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;In the previous article, we verified the context switch overhead of Linux processes and threads experimentally, which was approximately between 3-5 microseconds. This overhead is not significant, but for massively concurrent internet servers and typical computer programs, the characteristics are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;High concurrency: Thousands to tens of thousands of user requests need to be processed per second.&lt;/li&gt;
&lt;li&gt;Short cycles: The processing time per user should be as short as possible, often in the millisecond range.&lt;/li&gt;
&lt;li&gt;High network I&amp;#x2F;O: Often requires network I&amp;#x2F;O from other machines, such as Redis, MySQL, etc.&lt;/li&gt;
&lt;li&gt;Low computation: General CPU-intensive operations are not frequent.</summary>
    
    
    
    <category term="go" scheme="https://hxzhouh.com/categories/go/"/>
    
    
    <category term="go" scheme="https://hxzhouh.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>ARTS-2024-02</title>
    <link href="https://hxzhouh.com/2024/01/09/arts/ARTS-2024-02/"/>
    <id>https://hxzhouh.com/2024/01/09/arts/ARTS-2024-02/</id>
    <published>2024-01-09T02:28:54.000Z</published>
    <updated>2024-01-09T06:14:41.093Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;ARTS 是陈浩（网名左耳朵耗子）在极客时间专栏里发起的一个活动，目的是通过分享的方式来坚持学习。 每人每周写一个 ARTS：&lt;br&gt;Algorithm 是一道算法题&lt;br&gt;Review 是读一篇英文文章&lt;br&gt;Technique&amp;#x2F;Tips 是分享一个小技术&lt;br&gt;Share 是分享一个观点。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="arts" scheme="https://hxzhouh.com/categories/arts/"/>
    
    
  </entry>
  
</feed>
